
Strain Gauges - CubeMX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006688  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000404  08006798  08006798  00016798  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b9c  08006b9c  000201f0  2**0
                  CONTENTS
  4 .ARM          00000000  08006b9c  08006b9c  000201f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006b9c  08006b9c  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b9c  08006b9c  00016b9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ba0  08006ba0  00016ba0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  08006ba4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a8  200001f0  08006d94  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000398  08006d94  00020398  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cb3e  00000000  00000000  00020219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024a7  00000000  00000000  0002cd57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cf8  00000000  00000000  0002f200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000be8  00000000  00000000  0002fef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019a07  00000000  00000000  00030ae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000100e0  00000000  00000000  0004a4e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008da50  00000000  00000000  0005a5c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e8017  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004590  00000000  00000000  000e8068  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f0 	.word	0x200001f0
 800012c:	00000000 	.word	0x00000000
 8000130:	08006780 	.word	0x08006780

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f4 	.word	0x200001f4
 800014c:	08006780 	.word	0x08006780

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop
 8000fe4:	0000      	movs	r0, r0
	...

08000fe8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fe8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000fec:	b09c      	sub	sp, #112	; 0x70
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint32_t adc_values[ADC_INPUT_NUM] = {'0'};
 8000ff0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]
 8000ffe:	611a      	str	r2, [r3, #16]
 8001000:	615a      	str	r2, [r3, #20]
 8001002:	2330      	movs	r3, #48	; 0x30
 8001004:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t i = 0, j= 0 ;
 8001006:	2300      	movs	r3, #0
 8001008:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800100c:	2300      	movs	r3, #0
 800100e:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
	uint8_t canId[ADC_INPUT_NUM]={0};
 8001012:	2300      	movs	r3, #0
 8001014:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001016:	2300      	movs	r3, #0
 8001018:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
	char can_msg[8]={'\0'};
 800101c:	2300      	movs	r3, #0
 800101e:	637b      	str	r3, [r7, #52]	; 0x34
 8001020:	2300      	movs	r3, #0
 8001022:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Variables for strain conversion */
	float a = 4.9e-7;
 8001024:	4b94      	ldr	r3, [pc, #592]	; (8001278 <main+0x290>)
 8001026:	66bb      	str	r3, [r7, #104]	; 0x68
	float gain = 500, gf = 2.022, vref = 2.5;
 8001028:	4b94      	ldr	r3, [pc, #592]	; (800127c <main+0x294>)
 800102a:	667b      	str	r3, [r7, #100]	; 0x64
 800102c:	4b94      	ldr	r3, [pc, #592]	; (8001280 <main+0x298>)
 800102e:	663b      	str	r3, [r7, #96]	; 0x60
 8001030:	4b94      	ldr	r3, [pc, #592]	; (8001284 <main+0x29c>)
 8001032:	65fb      	str	r3, [r7, #92]	; 0x5c
	float e[ADC_INPUT_NUM] = {'0'};
 8001034:	f107 031c 	add.w	r3, r7, #28
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	605a      	str	r2, [r3, #4]
 800103e:	609a      	str	r2, [r3, #8]
 8001040:	60da      	str	r2, [r3, #12]
 8001042:	611a      	str	r2, [r3, #16]
 8001044:	615a      	str	r2, [r3, #20]
 8001046:	4b90      	ldr	r3, [pc, #576]	; (8001288 <main+0x2a0>)
 8001048:	61fb      	str	r3, [r7, #28]
	float voltage_read [ADC_INPUT_NUM] ={'0'};
 800104a:	1d3b      	adds	r3, r7, #4
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	60da      	str	r2, [r3, #12]
 8001056:	611a      	str	r2, [r3, #16]
 8001058:	615a      	str	r2, [r3, #20]
 800105a:	4b8b      	ldr	r3, [pc, #556]	; (8001288 <main+0x2a0>)
 800105c:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800105e:	f000 fd69 	bl	8001b34 <HAL_Init>
  /* USER CODE BEGIN Init */

//  HAL_ADC_Init(&hadc1); // Initializes HAL lib
//  HAL_ADCEx_Calibration_Start(&hadc1);

  for (i=0;i<ADC_INPUT_NUM;i++) {
 8001062:	2300      	movs	r3, #0
 8001064:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8001068:	e00e      	b.n	8001088 <main+0xa0>
    canId[i] = CAN_DEFAULT_ID + i;
 800106a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800106e:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8001072:	3232      	adds	r2, #50	; 0x32
 8001074:	b2d2      	uxtb	r2, r2
 8001076:	3370      	adds	r3, #112	; 0x70
 8001078:	443b      	add	r3, r7
 800107a:	f803 2c34 	strb.w	r2, [r3, #-52]
  for (i=0;i<ADC_INPUT_NUM;i++) {
 800107e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001082:	3301      	adds	r3, #1
 8001084:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8001088:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800108c:	2b05      	cmp	r3, #5
 800108e:	d9ec      	bls.n	800106a <main+0x82>
  } // Set the correct IDs for CAN Bus

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001090:	f000 f904 	bl	800129c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001094:	f000 fa52 	bl	800153c <MX_GPIO_Init>
  MX_CAN_Init();
 8001098:	f000 f998 	bl	80013cc <MX_CAN_Init>
  MX_I2C1_Init();
 800109c:	f000 f9ca 	bl	8001434 <MX_I2C1_Init>
  MX_SPI1_Init();
 80010a0:	f000 f9f6 	bl	8001490 <MX_SPI1_Init>
  MX_DMA_Init();
 80010a4:	f000 fa2c 	bl	8001500 <MX_DMA_Init>
  MX_ADC1_Init();
 80010a8:	f000 f952 	bl	8001350 <MX_ADC1_Init>
  MX_FATFS_Init();
 80010ac:	f002 fd6e 	bl	8003b8c <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  if (HAL_ADC_Start_DMA(&hadc1, adc_values, ADC_INPUT_NUM) != HAL_OK) {
 80010b0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80010b4:	2206      	movs	r2, #6
 80010b6:	4619      	mov	r1, r3
 80010b8:	4874      	ldr	r0, [pc, #464]	; (800128c <main+0x2a4>)
 80010ba:	f000 fe75 	bl	8001da8 <HAL_ADC_Start_DMA>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <main+0xe0>
  	  Error_Handler();
 80010c4:	f000 fa8c 	bl	80015e0 <Error_Handler>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  for (i=0;i<ADC_INPUT_NUM;i++) {
 80010c8:	2300      	movs	r3, #0
 80010ca:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 80010ce:	e0bc      	b.n	800124a <main+0x262>
		  // d8 = Max6675_Read_Temp_1();
		  // d8 = Max6675_Read_Temp_2()
		  voltage_read[i] = ((float)adc_values[i]/(float)ADC_MAX_VALUE) * 3.3;
 80010d0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	3370      	adds	r3, #112	; 0x70
 80010d8:	443b      	add	r3, r7
 80010da:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80010de:	4618      	mov	r0, r3
 80010e0:	f7ff fdd8 	bl	8000c94 <__aeabi_ui2f>
 80010e4:	4603      	mov	r3, r0
 80010e6:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff fede 	bl	8000eac <__aeabi_fdiv>
 80010f0:	4603      	mov	r3, r0
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff f998 	bl	8000428 <__aeabi_f2d>
 80010f8:	a35b      	add	r3, pc, #364	; (adr r3, 8001268 <main+0x280>)
 80010fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010fe:	f7ff f9eb 	bl	80004d8 <__aeabi_dmul>
 8001102:	4602      	mov	r2, r0
 8001104:	460b      	mov	r3, r1
 8001106:	f897 406f 	ldrb.w	r4, [r7, #111]	; 0x6f
 800110a:	4610      	mov	r0, r2
 800110c:	4619      	mov	r1, r3
 800110e:	f7ff fcbb 	bl	8000a88 <__aeabi_d2f>
 8001112:	4602      	mov	r2, r0
 8001114:	00a3      	lsls	r3, r4, #2
 8001116:	3370      	adds	r3, #112	; 0x70
 8001118:	443b      	add	r3, r7
 800111a:	f843 2c6c 	str.w	r2, [r3, #-108]
		  /* Early code for strain gauge measurement */
		  e[i] = 4*(1.52*voltage_read[i] - vref)/(5*gain-2*(1.52*voltage_read[i] - vref)*gf*(1+a*1));
 800111e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	3370      	adds	r3, #112	; 0x70
 8001126:	443b      	add	r3, r7
 8001128:	f853 3c6c 	ldr.w	r3, [r3, #-108]
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff f97b 	bl	8000428 <__aeabi_f2d>
 8001132:	a34f      	add	r3, pc, #316	; (adr r3, 8001270 <main+0x288>)
 8001134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001138:	f7ff f9ce 	bl	80004d8 <__aeabi_dmul>
 800113c:	4602      	mov	r2, r0
 800113e:	460b      	mov	r3, r1
 8001140:	4614      	mov	r4, r2
 8001142:	461d      	mov	r5, r3
 8001144:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001146:	f7ff f96f 	bl	8000428 <__aeabi_f2d>
 800114a:	4602      	mov	r2, r0
 800114c:	460b      	mov	r3, r1
 800114e:	4620      	mov	r0, r4
 8001150:	4629      	mov	r1, r5
 8001152:	f7ff f809 	bl	8000168 <__aeabi_dsub>
 8001156:	4602      	mov	r2, r0
 8001158:	460b      	mov	r3, r1
 800115a:	4610      	mov	r0, r2
 800115c:	4619      	mov	r1, r3
 800115e:	f04f 0200 	mov.w	r2, #0
 8001162:	4b4b      	ldr	r3, [pc, #300]	; (8001290 <main+0x2a8>)
 8001164:	f7ff f9b8 	bl	80004d8 <__aeabi_dmul>
 8001168:	4602      	mov	r2, r0
 800116a:	460b      	mov	r3, r1
 800116c:	4690      	mov	r8, r2
 800116e:	4699      	mov	r9, r3
 8001170:	4948      	ldr	r1, [pc, #288]	; (8001294 <main+0x2ac>)
 8001172:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8001174:	f7ff fde6 	bl	8000d44 <__aeabi_fmul>
 8001178:	4603      	mov	r3, r0
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff f954 	bl	8000428 <__aeabi_f2d>
 8001180:	4604      	mov	r4, r0
 8001182:	460d      	mov	r5, r1
 8001184:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	3370      	adds	r3, #112	; 0x70
 800118c:	443b      	add	r3, r7
 800118e:	f853 3c6c 	ldr.w	r3, [r3, #-108]
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff f948 	bl	8000428 <__aeabi_f2d>
 8001198:	a335      	add	r3, pc, #212	; (adr r3, 8001270 <main+0x288>)
 800119a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800119e:	f7ff f99b 	bl	80004d8 <__aeabi_dmul>
 80011a2:	4602      	mov	r2, r0
 80011a4:	460b      	mov	r3, r1
 80011a6:	4692      	mov	sl, r2
 80011a8:	469b      	mov	fp, r3
 80011aa:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80011ac:	f7ff f93c 	bl	8000428 <__aeabi_f2d>
 80011b0:	4602      	mov	r2, r0
 80011b2:	460b      	mov	r3, r1
 80011b4:	4650      	mov	r0, sl
 80011b6:	4659      	mov	r1, fp
 80011b8:	f7fe ffd6 	bl	8000168 <__aeabi_dsub>
 80011bc:	4602      	mov	r2, r0
 80011be:	460b      	mov	r3, r1
 80011c0:	4610      	mov	r0, r2
 80011c2:	4619      	mov	r1, r3
 80011c4:	4602      	mov	r2, r0
 80011c6:	460b      	mov	r3, r1
 80011c8:	f7fe ffd0 	bl	800016c <__adddf3>
 80011cc:	4602      	mov	r2, r0
 80011ce:	460b      	mov	r3, r1
 80011d0:	4692      	mov	sl, r2
 80011d2:	469b      	mov	fp, r3
 80011d4:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80011d6:	f7ff f927 	bl	8000428 <__aeabi_f2d>
 80011da:	4602      	mov	r2, r0
 80011dc:	460b      	mov	r3, r1
 80011de:	4650      	mov	r0, sl
 80011e0:	4659      	mov	r1, fp
 80011e2:	f7ff f979 	bl	80004d8 <__aeabi_dmul>
 80011e6:	4602      	mov	r2, r0
 80011e8:	460b      	mov	r3, r1
 80011ea:	4692      	mov	sl, r2
 80011ec:	469b      	mov	fp, r3
 80011ee:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80011f2:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80011f4:	f7ff fc9e 	bl	8000b34 <__addsf3>
 80011f8:	4603      	mov	r3, r0
 80011fa:	4618      	mov	r0, r3
 80011fc:	f7ff f914 	bl	8000428 <__aeabi_f2d>
 8001200:	4602      	mov	r2, r0
 8001202:	460b      	mov	r3, r1
 8001204:	4650      	mov	r0, sl
 8001206:	4659      	mov	r1, fp
 8001208:	f7ff f966 	bl	80004d8 <__aeabi_dmul>
 800120c:	4602      	mov	r2, r0
 800120e:	460b      	mov	r3, r1
 8001210:	4620      	mov	r0, r4
 8001212:	4629      	mov	r1, r5
 8001214:	f7fe ffa8 	bl	8000168 <__aeabi_dsub>
 8001218:	4602      	mov	r2, r0
 800121a:	460b      	mov	r3, r1
 800121c:	4640      	mov	r0, r8
 800121e:	4649      	mov	r1, r9
 8001220:	f7ff fa84 	bl	800072c <__aeabi_ddiv>
 8001224:	4602      	mov	r2, r0
 8001226:	460b      	mov	r3, r1
 8001228:	f897 406f 	ldrb.w	r4, [r7, #111]	; 0x6f
 800122c:	4610      	mov	r0, r2
 800122e:	4619      	mov	r1, r3
 8001230:	f7ff fc2a 	bl	8000a88 <__aeabi_d2f>
 8001234:	4602      	mov	r2, r0
 8001236:	00a3      	lsls	r3, r4, #2
 8001238:	3370      	adds	r3, #112	; 0x70
 800123a:	443b      	add	r3, r7
 800123c:	f843 2c54 	str.w	r2, [r3, #-84]
	  for (i=0;i<ADC_INPUT_NUM;i++) {
 8001240:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001244:	3301      	adds	r3, #1
 8001246:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800124a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800124e:	2b05      	cmp	r3, #5
 8001250:	f67f af3e 	bls.w	80010d0 <main+0xe8>
	  }
	  TxHeader.IDE = CAN_ID_EXT;
 8001254:	4b10      	ldr	r3, [pc, #64]	; (8001298 <main+0x2b0>)
 8001256:	2204      	movs	r2, #4
 8001258:	609a      	str	r2, [r3, #8]
	  TxHeader.RTR = CAN_RTR_DATA;
 800125a:	4b0f      	ldr	r3, [pc, #60]	; (8001298 <main+0x2b0>)
 800125c:	2200      	movs	r2, #0
 800125e:	60da      	str	r2, [r3, #12]
	  TxHeader.DLC = 6;
 8001260:	4b0d      	ldr	r3, [pc, #52]	; (8001298 <main+0x2b0>)
 8001262:	2206      	movs	r2, #6
 8001264:	611a      	str	r2, [r3, #16]
	  for (i=0;i<ADC_INPUT_NUM;i++) {
 8001266:	e72f      	b.n	80010c8 <main+0xe0>
 8001268:	66666666 	.word	0x66666666
 800126c:	400a6666 	.word	0x400a6666
 8001270:	851eb852 	.word	0x851eb852
 8001274:	3ff851eb 	.word	0x3ff851eb
 8001278:	3503888b 	.word	0x3503888b
 800127c:	43fa0000 	.word	0x43fa0000
 8001280:	40016873 	.word	0x40016873
 8001284:	40200000 	.word	0x40200000
 8001288:	42400000 	.word	0x42400000
 800128c:	2000020c 	.word	0x2000020c
 8001290:	40100000 	.word	0x40100000
 8001294:	40a00000 	.word	0x40a00000
 8001298:	20000354 	.word	0x20000354

0800129c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b094      	sub	sp, #80	; 0x50
 80012a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012a6:	2228      	movs	r2, #40	; 0x28
 80012a8:	2100      	movs	r1, #0
 80012aa:	4618      	mov	r0, r3
 80012ac:	f002 fd54 	bl	8003d58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012b0:	f107 0314 	add.w	r3, r7, #20
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	609a      	str	r2, [r3, #8]
 80012bc:	60da      	str	r2, [r3, #12]
 80012be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012c0:	1d3b      	adds	r3, r7, #4
 80012c2:	2200      	movs	r2, #0
 80012c4:	601a      	str	r2, [r3, #0]
 80012c6:	605a      	str	r2, [r3, #4]
 80012c8:	609a      	str	r2, [r3, #8]
 80012ca:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012cc:	2301      	movs	r3, #1
 80012ce:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80012d6:	2300      	movs	r3, #0
 80012d8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012da:	2301      	movs	r3, #1
 80012dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012de:	2302      	movs	r3, #2
 80012e0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80012e8:	2300      	movs	r3, #0
 80012ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012f0:	4618      	mov	r0, r3
 80012f2:	f001 ff0b 	bl	800310c <HAL_RCC_OscConfig>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <SystemClock_Config+0x64>
  {
    Error_Handler();
 80012fc:	f000 f970 	bl	80015e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001300:	230f      	movs	r3, #15
 8001302:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001304:	2302      	movs	r3, #2
 8001306:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001308:	2300      	movs	r3, #0
 800130a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800130c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001310:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001312:	2300      	movs	r3, #0
 8001314:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001316:	f107 0314 	add.w	r3, r7, #20
 800131a:	2100      	movs	r1, #0
 800131c:	4618      	mov	r0, r3
 800131e:	f002 f977 	bl	8003610 <HAL_RCC_ClockConfig>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001328:	f000 f95a 	bl	80015e0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800132c:	2302      	movs	r3, #2
 800132e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001330:	2300      	movs	r3, #0
 8001332:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001334:	1d3b      	adds	r3, r7, #4
 8001336:	4618      	mov	r0, r3
 8001338:	f002 faee 	bl	8003918 <HAL_RCCEx_PeriphCLKConfig>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001342:	f000 f94d 	bl	80015e0 <Error_Handler>
  }
}
 8001346:	bf00      	nop
 8001348:	3750      	adds	r7, #80	; 0x50
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
	...

08001350 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001356:	1d3b      	adds	r3, r7, #4
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	605a      	str	r2, [r3, #4]
 800135e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001360:	4b18      	ldr	r3, [pc, #96]	; (80013c4 <MX_ADC1_Init+0x74>)
 8001362:	4a19      	ldr	r2, [pc, #100]	; (80013c8 <MX_ADC1_Init+0x78>)
 8001364:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001366:	4b17      	ldr	r3, [pc, #92]	; (80013c4 <MX_ADC1_Init+0x74>)
 8001368:	2200      	movs	r2, #0
 800136a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800136c:	4b15      	ldr	r3, [pc, #84]	; (80013c4 <MX_ADC1_Init+0x74>)
 800136e:	2200      	movs	r2, #0
 8001370:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001372:	4b14      	ldr	r3, [pc, #80]	; (80013c4 <MX_ADC1_Init+0x74>)
 8001374:	2200      	movs	r2, #0
 8001376:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001378:	4b12      	ldr	r3, [pc, #72]	; (80013c4 <MX_ADC1_Init+0x74>)
 800137a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800137e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001380:	4b10      	ldr	r3, [pc, #64]	; (80013c4 <MX_ADC1_Init+0x74>)
 8001382:	2200      	movs	r2, #0
 8001384:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001386:	4b0f      	ldr	r3, [pc, #60]	; (80013c4 <MX_ADC1_Init+0x74>)
 8001388:	2201      	movs	r2, #1
 800138a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800138c:	480d      	ldr	r0, [pc, #52]	; (80013c4 <MX_ADC1_Init+0x74>)
 800138e:	f000 fc33 	bl	8001bf8 <HAL_ADC_Init>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001398:	f000 f922 	bl	80015e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800139c:	2300      	movs	r3, #0
 800139e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80013a0:	2301      	movs	r3, #1
 80013a2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80013a4:	2300      	movs	r3, #0
 80013a6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013a8:	1d3b      	adds	r3, r7, #4
 80013aa:	4619      	mov	r1, r3
 80013ac:	4805      	ldr	r0, [pc, #20]	; (80013c4 <MX_ADC1_Init+0x74>)
 80013ae:	f000 fdf5 	bl	8001f9c <HAL_ADC_ConfigChannel>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80013b8:	f000 f912 	bl	80015e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013bc:	bf00      	nop
 80013be:	3710      	adds	r7, #16
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	2000020c 	.word	0x2000020c
 80013c8:	40012400 	.word	0x40012400

080013cc <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80013d0:	4b16      	ldr	r3, [pc, #88]	; (800142c <MX_CAN_Init+0x60>)
 80013d2:	4a17      	ldr	r2, [pc, #92]	; (8001430 <MX_CAN_Init+0x64>)
 80013d4:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 80013d6:	4b15      	ldr	r3, [pc, #84]	; (800142c <MX_CAN_Init+0x60>)
 80013d8:	2210      	movs	r2, #16
 80013da:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80013dc:	4b13      	ldr	r3, [pc, #76]	; (800142c <MX_CAN_Init+0x60>)
 80013de:	2200      	movs	r2, #0
 80013e0:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80013e2:	4b12      	ldr	r3, [pc, #72]	; (800142c <MX_CAN_Init+0x60>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 80013e8:	4b10      	ldr	r3, [pc, #64]	; (800142c <MX_CAN_Init+0x60>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80013ee:	4b0f      	ldr	r3, [pc, #60]	; (800142c <MX_CAN_Init+0x60>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80013f4:	4b0d      	ldr	r3, [pc, #52]	; (800142c <MX_CAN_Init+0x60>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80013fa:	4b0c      	ldr	r3, [pc, #48]	; (800142c <MX_CAN_Init+0x60>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001400:	4b0a      	ldr	r3, [pc, #40]	; (800142c <MX_CAN_Init+0x60>)
 8001402:	2200      	movs	r2, #0
 8001404:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8001406:	4b09      	ldr	r3, [pc, #36]	; (800142c <MX_CAN_Init+0x60>)
 8001408:	2200      	movs	r2, #0
 800140a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800140c:	4b07      	ldr	r3, [pc, #28]	; (800142c <MX_CAN_Init+0x60>)
 800140e:	2200      	movs	r2, #0
 8001410:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001412:	4b06      	ldr	r3, [pc, #24]	; (800142c <MX_CAN_Init+0x60>)
 8001414:	2200      	movs	r2, #0
 8001416:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001418:	4804      	ldr	r0, [pc, #16]	; (800142c <MX_CAN_Init+0x60>)
 800141a:	f000 ffb8 	bl	800238e <HAL_CAN_Init>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8001424:	f000 f8dc 	bl	80015e0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8001428:	bf00      	nop
 800142a:	bd80      	pop	{r7, pc}
 800142c:	20000280 	.word	0x20000280
 8001430:	40006400 	.word	0x40006400

08001434 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001438:	4b12      	ldr	r3, [pc, #72]	; (8001484 <MX_I2C1_Init+0x50>)
 800143a:	4a13      	ldr	r2, [pc, #76]	; (8001488 <MX_I2C1_Init+0x54>)
 800143c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800143e:	4b11      	ldr	r3, [pc, #68]	; (8001484 <MX_I2C1_Init+0x50>)
 8001440:	4a12      	ldr	r2, [pc, #72]	; (800148c <MX_I2C1_Init+0x58>)
 8001442:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001444:	4b0f      	ldr	r3, [pc, #60]	; (8001484 <MX_I2C1_Init+0x50>)
 8001446:	2200      	movs	r2, #0
 8001448:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800144a:	4b0e      	ldr	r3, [pc, #56]	; (8001484 <MX_I2C1_Init+0x50>)
 800144c:	2200      	movs	r2, #0
 800144e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001450:	4b0c      	ldr	r3, [pc, #48]	; (8001484 <MX_I2C1_Init+0x50>)
 8001452:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001456:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001458:	4b0a      	ldr	r3, [pc, #40]	; (8001484 <MX_I2C1_Init+0x50>)
 800145a:	2200      	movs	r2, #0
 800145c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800145e:	4b09      	ldr	r3, [pc, #36]	; (8001484 <MX_I2C1_Init+0x50>)
 8001460:	2200      	movs	r2, #0
 8001462:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001464:	4b07      	ldr	r3, [pc, #28]	; (8001484 <MX_I2C1_Init+0x50>)
 8001466:	2200      	movs	r2, #0
 8001468:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800146a:	4b06      	ldr	r3, [pc, #24]	; (8001484 <MX_I2C1_Init+0x50>)
 800146c:	2200      	movs	r2, #0
 800146e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001470:	4804      	ldr	r0, [pc, #16]	; (8001484 <MX_I2C1_Init+0x50>)
 8001472:	f001 fd07 	bl	8002e84 <HAL_I2C_Init>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800147c:	f000 f8b0 	bl	80015e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001480:	bf00      	nop
 8001482:	bd80      	pop	{r7, pc}
 8001484:	200002a8 	.word	0x200002a8
 8001488:	40005400 	.word	0x40005400
 800148c:	000186a0 	.word	0x000186a0

08001490 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001494:	4b18      	ldr	r3, [pc, #96]	; (80014f8 <MX_SPI1_Init+0x68>)
 8001496:	4a19      	ldr	r2, [pc, #100]	; (80014fc <MX_SPI1_Init+0x6c>)
 8001498:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800149a:	4b17      	ldr	r3, [pc, #92]	; (80014f8 <MX_SPI1_Init+0x68>)
 800149c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80014a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80014a2:	4b15      	ldr	r3, [pc, #84]	; (80014f8 <MX_SPI1_Init+0x68>)
 80014a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014a8:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80014aa:	4b13      	ldr	r3, [pc, #76]	; (80014f8 <MX_SPI1_Init+0x68>)
 80014ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80014b0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014b2:	4b11      	ldr	r3, [pc, #68]	; (80014f8 <MX_SPI1_Init+0x68>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014b8:	4b0f      	ldr	r3, [pc, #60]	; (80014f8 <MX_SPI1_Init+0x68>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80014be:	4b0e      	ldr	r3, [pc, #56]	; (80014f8 <MX_SPI1_Init+0x68>)
 80014c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014c4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80014c6:	4b0c      	ldr	r3, [pc, #48]	; (80014f8 <MX_SPI1_Init+0x68>)
 80014c8:	2210      	movs	r2, #16
 80014ca:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014cc:	4b0a      	ldr	r3, [pc, #40]	; (80014f8 <MX_SPI1_Init+0x68>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80014d2:	4b09      	ldr	r3, [pc, #36]	; (80014f8 <MX_SPI1_Init+0x68>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014d8:	4b07      	ldr	r3, [pc, #28]	; (80014f8 <MX_SPI1_Init+0x68>)
 80014da:	2200      	movs	r2, #0
 80014dc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80014de:	4b06      	ldr	r3, [pc, #24]	; (80014f8 <MX_SPI1_Init+0x68>)
 80014e0:	220a      	movs	r2, #10
 80014e2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80014e4:	4804      	ldr	r0, [pc, #16]	; (80014f8 <MX_SPI1_Init+0x68>)
 80014e6:	f002 facd 	bl	8003a84 <HAL_SPI_Init>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 80014f0:	f000 f876 	bl	80015e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80014f4:	bf00      	nop
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	200002fc 	.word	0x200002fc
 80014fc:	40013000 	.word	0x40013000

08001500 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001506:	4b0c      	ldr	r3, [pc, #48]	; (8001538 <MX_DMA_Init+0x38>)
 8001508:	695b      	ldr	r3, [r3, #20]
 800150a:	4a0b      	ldr	r2, [pc, #44]	; (8001538 <MX_DMA_Init+0x38>)
 800150c:	f043 0301 	orr.w	r3, r3, #1
 8001510:	6153      	str	r3, [r2, #20]
 8001512:	4b09      	ldr	r3, [pc, #36]	; (8001538 <MX_DMA_Init+0x38>)
 8001514:	695b      	ldr	r3, [r3, #20]
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	607b      	str	r3, [r7, #4]
 800151c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800151e:	2200      	movs	r2, #0
 8001520:	2100      	movs	r1, #0
 8001522:	200b      	movs	r0, #11
 8001524:	f001 f905 	bl	8002732 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001528:	200b      	movs	r0, #11
 800152a:	f001 f91e 	bl	800276a <HAL_NVIC_EnableIRQ>

}
 800152e:	bf00      	nop
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	40021000 	.word	0x40021000

0800153c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b088      	sub	sp, #32
 8001540:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001542:	f107 0310 	add.w	r3, r7, #16
 8001546:	2200      	movs	r2, #0
 8001548:	601a      	str	r2, [r3, #0]
 800154a:	605a      	str	r2, [r3, #4]
 800154c:	609a      	str	r2, [r3, #8]
 800154e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001550:	4b20      	ldr	r3, [pc, #128]	; (80015d4 <MX_GPIO_Init+0x98>)
 8001552:	699b      	ldr	r3, [r3, #24]
 8001554:	4a1f      	ldr	r2, [pc, #124]	; (80015d4 <MX_GPIO_Init+0x98>)
 8001556:	f043 0320 	orr.w	r3, r3, #32
 800155a:	6193      	str	r3, [r2, #24]
 800155c:	4b1d      	ldr	r3, [pc, #116]	; (80015d4 <MX_GPIO_Init+0x98>)
 800155e:	699b      	ldr	r3, [r3, #24]
 8001560:	f003 0320 	and.w	r3, r3, #32
 8001564:	60fb      	str	r3, [r7, #12]
 8001566:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001568:	4b1a      	ldr	r3, [pc, #104]	; (80015d4 <MX_GPIO_Init+0x98>)
 800156a:	699b      	ldr	r3, [r3, #24]
 800156c:	4a19      	ldr	r2, [pc, #100]	; (80015d4 <MX_GPIO_Init+0x98>)
 800156e:	f043 0304 	orr.w	r3, r3, #4
 8001572:	6193      	str	r3, [r2, #24]
 8001574:	4b17      	ldr	r3, [pc, #92]	; (80015d4 <MX_GPIO_Init+0x98>)
 8001576:	699b      	ldr	r3, [r3, #24]
 8001578:	f003 0304 	and.w	r3, r3, #4
 800157c:	60bb      	str	r3, [r7, #8]
 800157e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001580:	4b14      	ldr	r3, [pc, #80]	; (80015d4 <MX_GPIO_Init+0x98>)
 8001582:	699b      	ldr	r3, [r3, #24]
 8001584:	4a13      	ldr	r2, [pc, #76]	; (80015d4 <MX_GPIO_Init+0x98>)
 8001586:	f043 0308 	orr.w	r3, r3, #8
 800158a:	6193      	str	r3, [r2, #24]
 800158c:	4b11      	ldr	r3, [pc, #68]	; (80015d4 <MX_GPIO_Init+0x98>)
 800158e:	699b      	ldr	r3, [r3, #24]
 8001590:	f003 0308 	and.w	r3, r3, #8
 8001594:	607b      	str	r3, [r7, #4]
 8001596:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : CS1_Pin */
  GPIO_InitStruct.Pin = CS1_Pin;
 8001598:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800159c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800159e:	2300      	movs	r3, #0
 80015a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a2:	2300      	movs	r3, #0
 80015a4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CS1_GPIO_Port, &GPIO_InitStruct);
 80015a6:	f107 0310 	add.w	r3, r7, #16
 80015aa:	4619      	mov	r1, r3
 80015ac:	480a      	ldr	r0, [pc, #40]	; (80015d8 <MX_GPIO_Init+0x9c>)
 80015ae:	f001 fae5 	bl	8002b7c <HAL_GPIO_Init>

  /*Configure GPIO pin : CS2_Pin */
  GPIO_InitStruct.Pin = CS2_Pin;
 80015b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015b8:	2300      	movs	r3, #0
 80015ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015bc:	2300      	movs	r3, #0
 80015be:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CS2_GPIO_Port, &GPIO_InitStruct);
 80015c0:	f107 0310 	add.w	r3, r7, #16
 80015c4:	4619      	mov	r1, r3
 80015c6:	4805      	ldr	r0, [pc, #20]	; (80015dc <MX_GPIO_Init+0xa0>)
 80015c8:	f001 fad8 	bl	8002b7c <HAL_GPIO_Init>

}
 80015cc:	bf00      	nop
 80015ce:	3720      	adds	r7, #32
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	40021000 	.word	0x40021000
 80015d8:	40010c00 	.word	0x40010c00
 80015dc:	40010800 	.word	0x40010800

080015e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015e4:	b672      	cpsid	i
}
 80015e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015e8:	e7fe      	b.n	80015e8 <Error_Handler+0x8>
	...

080015ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b085      	sub	sp, #20
 80015f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80015f2:	4b15      	ldr	r3, [pc, #84]	; (8001648 <HAL_MspInit+0x5c>)
 80015f4:	699b      	ldr	r3, [r3, #24]
 80015f6:	4a14      	ldr	r2, [pc, #80]	; (8001648 <HAL_MspInit+0x5c>)
 80015f8:	f043 0301 	orr.w	r3, r3, #1
 80015fc:	6193      	str	r3, [r2, #24]
 80015fe:	4b12      	ldr	r3, [pc, #72]	; (8001648 <HAL_MspInit+0x5c>)
 8001600:	699b      	ldr	r3, [r3, #24]
 8001602:	f003 0301 	and.w	r3, r3, #1
 8001606:	60bb      	str	r3, [r7, #8]
 8001608:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800160a:	4b0f      	ldr	r3, [pc, #60]	; (8001648 <HAL_MspInit+0x5c>)
 800160c:	69db      	ldr	r3, [r3, #28]
 800160e:	4a0e      	ldr	r2, [pc, #56]	; (8001648 <HAL_MspInit+0x5c>)
 8001610:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001614:	61d3      	str	r3, [r2, #28]
 8001616:	4b0c      	ldr	r3, [pc, #48]	; (8001648 <HAL_MspInit+0x5c>)
 8001618:	69db      	ldr	r3, [r3, #28]
 800161a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800161e:	607b      	str	r3, [r7, #4]
 8001620:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NONJTRST: Full SWJ (JTAG-DP + SW-DP) but without NJTRST
  */
  __HAL_AFIO_REMAP_SWJ_NONJTRST();
 8001622:	4b0a      	ldr	r3, [pc, #40]	; (800164c <HAL_MspInit+0x60>)
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	60fb      	str	r3, [r7, #12]
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800162e:	60fb      	str	r3, [r7, #12]
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001636:	60fb      	str	r3, [r7, #12]
 8001638:	4a04      	ldr	r2, [pc, #16]	; (800164c <HAL_MspInit+0x60>)
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800163e:	bf00      	nop
 8001640:	3714      	adds	r7, #20
 8001642:	46bd      	mov	sp, r7
 8001644:	bc80      	pop	{r7}
 8001646:	4770      	bx	lr
 8001648:	40021000 	.word	0x40021000
 800164c:	40010000 	.word	0x40010000

08001650 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b08a      	sub	sp, #40	; 0x28
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001658:	f107 0318 	add.w	r3, r7, #24
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	605a      	str	r2, [r3, #4]
 8001662:	609a      	str	r2, [r3, #8]
 8001664:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a33      	ldr	r2, [pc, #204]	; (8001738 <HAL_ADC_MspInit+0xe8>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d15f      	bne.n	8001730 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001670:	4b32      	ldr	r3, [pc, #200]	; (800173c <HAL_ADC_MspInit+0xec>)
 8001672:	699b      	ldr	r3, [r3, #24]
 8001674:	4a31      	ldr	r2, [pc, #196]	; (800173c <HAL_ADC_MspInit+0xec>)
 8001676:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800167a:	6193      	str	r3, [r2, #24]
 800167c:	4b2f      	ldr	r3, [pc, #188]	; (800173c <HAL_ADC_MspInit+0xec>)
 800167e:	699b      	ldr	r3, [r3, #24]
 8001680:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001684:	617b      	str	r3, [r7, #20]
 8001686:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001688:	4b2c      	ldr	r3, [pc, #176]	; (800173c <HAL_ADC_MspInit+0xec>)
 800168a:	699b      	ldr	r3, [r3, #24]
 800168c:	4a2b      	ldr	r2, [pc, #172]	; (800173c <HAL_ADC_MspInit+0xec>)
 800168e:	f043 0304 	orr.w	r3, r3, #4
 8001692:	6193      	str	r3, [r2, #24]
 8001694:	4b29      	ldr	r3, [pc, #164]	; (800173c <HAL_ADC_MspInit+0xec>)
 8001696:	699b      	ldr	r3, [r3, #24]
 8001698:	f003 0304 	and.w	r3, r3, #4
 800169c:	613b      	str	r3, [r7, #16]
 800169e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016a0:	4b26      	ldr	r3, [pc, #152]	; (800173c <HAL_ADC_MspInit+0xec>)
 80016a2:	699b      	ldr	r3, [r3, #24]
 80016a4:	4a25      	ldr	r2, [pc, #148]	; (800173c <HAL_ADC_MspInit+0xec>)
 80016a6:	f043 0308 	orr.w	r3, r3, #8
 80016aa:	6193      	str	r3, [r2, #24]
 80016ac:	4b23      	ldr	r3, [pc, #140]	; (800173c <HAL_ADC_MspInit+0xec>)
 80016ae:	699b      	ldr	r3, [r3, #24]
 80016b0:	f003 0308 	and.w	r3, r3, #8
 80016b4:	60fb      	str	r3, [r7, #12]
 80016b6:	68fb      	ldr	r3, [r7, #12]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = STR1_IN_Pin|STR2_IN_Pin|STR3_IN_Pin|STR4_IN_Pin
 80016b8:	231f      	movs	r3, #31
 80016ba:	61bb      	str	r3, [r7, #24]
                          |STR5_IN_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016bc:	2303      	movs	r3, #3
 80016be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c0:	f107 0318 	add.w	r3, r7, #24
 80016c4:	4619      	mov	r1, r3
 80016c6:	481e      	ldr	r0, [pc, #120]	; (8001740 <HAL_ADC_MspInit+0xf0>)
 80016c8:	f001 fa58 	bl	8002b7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = STR6_IN_Pin;
 80016cc:	2302      	movs	r3, #2
 80016ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016d0:	2303      	movs	r3, #3
 80016d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(STR6_IN_GPIO_Port, &GPIO_InitStruct);
 80016d4:	f107 0318 	add.w	r3, r7, #24
 80016d8:	4619      	mov	r1, r3
 80016da:	481a      	ldr	r0, [pc, #104]	; (8001744 <HAL_ADC_MspInit+0xf4>)
 80016dc:	f001 fa4e 	bl	8002b7c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80016e0:	4b19      	ldr	r3, [pc, #100]	; (8001748 <HAL_ADC_MspInit+0xf8>)
 80016e2:	4a1a      	ldr	r2, [pc, #104]	; (800174c <HAL_ADC_MspInit+0xfc>)
 80016e4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016e6:	4b18      	ldr	r3, [pc, #96]	; (8001748 <HAL_ADC_MspInit+0xf8>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80016ec:	4b16      	ldr	r3, [pc, #88]	; (8001748 <HAL_ADC_MspInit+0xf8>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80016f2:	4b15      	ldr	r3, [pc, #84]	; (8001748 <HAL_ADC_MspInit+0xf8>)
 80016f4:	2280      	movs	r2, #128	; 0x80
 80016f6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80016f8:	4b13      	ldr	r3, [pc, #76]	; (8001748 <HAL_ADC_MspInit+0xf8>)
 80016fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016fe:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001700:	4b11      	ldr	r3, [pc, #68]	; (8001748 <HAL_ADC_MspInit+0xf8>)
 8001702:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001706:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001708:	4b0f      	ldr	r3, [pc, #60]	; (8001748 <HAL_ADC_MspInit+0xf8>)
 800170a:	2200      	movs	r2, #0
 800170c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800170e:	4b0e      	ldr	r3, [pc, #56]	; (8001748 <HAL_ADC_MspInit+0xf8>)
 8001710:	2200      	movs	r2, #0
 8001712:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001714:	480c      	ldr	r0, [pc, #48]	; (8001748 <HAL_ADC_MspInit+0xf8>)
 8001716:	f001 f843 	bl	80027a0 <HAL_DMA_Init>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 8001720:	f7ff ff5e 	bl	80015e0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	4a08      	ldr	r2, [pc, #32]	; (8001748 <HAL_ADC_MspInit+0xf8>)
 8001728:	621a      	str	r2, [r3, #32]
 800172a:	4a07      	ldr	r2, [pc, #28]	; (8001748 <HAL_ADC_MspInit+0xf8>)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001730:	bf00      	nop
 8001732:	3728      	adds	r7, #40	; 0x28
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	40012400 	.word	0x40012400
 800173c:	40021000 	.word	0x40021000
 8001740:	40010800 	.word	0x40010800
 8001744:	40010c00 	.word	0x40010c00
 8001748:	2000023c 	.word	0x2000023c
 800174c:	40020008 	.word	0x40020008

08001750 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b088      	sub	sp, #32
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001758:	f107 0310 	add.w	r3, r7, #16
 800175c:	2200      	movs	r2, #0
 800175e:	601a      	str	r2, [r3, #0]
 8001760:	605a      	str	r2, [r3, #4]
 8001762:	609a      	str	r2, [r3, #8]
 8001764:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a1c      	ldr	r2, [pc, #112]	; (80017dc <HAL_CAN_MspInit+0x8c>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d131      	bne.n	80017d4 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001770:	4b1b      	ldr	r3, [pc, #108]	; (80017e0 <HAL_CAN_MspInit+0x90>)
 8001772:	69db      	ldr	r3, [r3, #28]
 8001774:	4a1a      	ldr	r2, [pc, #104]	; (80017e0 <HAL_CAN_MspInit+0x90>)
 8001776:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800177a:	61d3      	str	r3, [r2, #28]
 800177c:	4b18      	ldr	r3, [pc, #96]	; (80017e0 <HAL_CAN_MspInit+0x90>)
 800177e:	69db      	ldr	r3, [r3, #28]
 8001780:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001784:	60fb      	str	r3, [r7, #12]
 8001786:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001788:	4b15      	ldr	r3, [pc, #84]	; (80017e0 <HAL_CAN_MspInit+0x90>)
 800178a:	699b      	ldr	r3, [r3, #24]
 800178c:	4a14      	ldr	r2, [pc, #80]	; (80017e0 <HAL_CAN_MspInit+0x90>)
 800178e:	f043 0304 	orr.w	r3, r3, #4
 8001792:	6193      	str	r3, [r2, #24]
 8001794:	4b12      	ldr	r3, [pc, #72]	; (80017e0 <HAL_CAN_MspInit+0x90>)
 8001796:	699b      	ldr	r3, [r3, #24]
 8001798:	f003 0304 	and.w	r3, r3, #4
 800179c:	60bb      	str	r3, [r7, #8]
 800179e:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80017a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80017a4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017a6:	2300      	movs	r3, #0
 80017a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017aa:	2300      	movs	r3, #0
 80017ac:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ae:	f107 0310 	add.w	r3, r7, #16
 80017b2:	4619      	mov	r1, r3
 80017b4:	480b      	ldr	r0, [pc, #44]	; (80017e4 <HAL_CAN_MspInit+0x94>)
 80017b6:	f001 f9e1 	bl	8002b7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80017ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c0:	2302      	movs	r3, #2
 80017c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017c4:	2303      	movs	r3, #3
 80017c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c8:	f107 0310 	add.w	r3, r7, #16
 80017cc:	4619      	mov	r1, r3
 80017ce:	4805      	ldr	r0, [pc, #20]	; (80017e4 <HAL_CAN_MspInit+0x94>)
 80017d0:	f001 f9d4 	bl	8002b7c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80017d4:	bf00      	nop
 80017d6:	3720      	adds	r7, #32
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	40006400 	.word	0x40006400
 80017e0:	40021000 	.word	0x40021000
 80017e4:	40010800 	.word	0x40010800

080017e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b088      	sub	sp, #32
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f0:	f107 0310 	add.w	r3, r7, #16
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	605a      	str	r2, [r3, #4]
 80017fa:	609a      	str	r2, [r3, #8]
 80017fc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a15      	ldr	r2, [pc, #84]	; (8001858 <HAL_I2C_MspInit+0x70>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d123      	bne.n	8001850 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001808:	4b14      	ldr	r3, [pc, #80]	; (800185c <HAL_I2C_MspInit+0x74>)
 800180a:	699b      	ldr	r3, [r3, #24]
 800180c:	4a13      	ldr	r2, [pc, #76]	; (800185c <HAL_I2C_MspInit+0x74>)
 800180e:	f043 0308 	orr.w	r3, r3, #8
 8001812:	6193      	str	r3, [r2, #24]
 8001814:	4b11      	ldr	r3, [pc, #68]	; (800185c <HAL_I2C_MspInit+0x74>)
 8001816:	699b      	ldr	r3, [r3, #24]
 8001818:	f003 0308 	and.w	r3, r3, #8
 800181c:	60fb      	str	r3, [r7, #12]
 800181e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001820:	23c0      	movs	r3, #192	; 0xc0
 8001822:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001824:	2312      	movs	r3, #18
 8001826:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001828:	2303      	movs	r3, #3
 800182a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800182c:	f107 0310 	add.w	r3, r7, #16
 8001830:	4619      	mov	r1, r3
 8001832:	480b      	ldr	r0, [pc, #44]	; (8001860 <HAL_I2C_MspInit+0x78>)
 8001834:	f001 f9a2 	bl	8002b7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001838:	4b08      	ldr	r3, [pc, #32]	; (800185c <HAL_I2C_MspInit+0x74>)
 800183a:	69db      	ldr	r3, [r3, #28]
 800183c:	4a07      	ldr	r2, [pc, #28]	; (800185c <HAL_I2C_MspInit+0x74>)
 800183e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001842:	61d3      	str	r3, [r2, #28]
 8001844:	4b05      	ldr	r3, [pc, #20]	; (800185c <HAL_I2C_MspInit+0x74>)
 8001846:	69db      	ldr	r3, [r3, #28]
 8001848:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800184c:	60bb      	str	r3, [r7, #8]
 800184e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001850:	bf00      	nop
 8001852:	3720      	adds	r7, #32
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	40005400 	.word	0x40005400
 800185c:	40021000 	.word	0x40021000
 8001860:	40010c00 	.word	0x40010c00

08001864 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b088      	sub	sp, #32
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800186c:	f107 0310 	add.w	r3, r7, #16
 8001870:	2200      	movs	r2, #0
 8001872:	601a      	str	r2, [r3, #0]
 8001874:	605a      	str	r2, [r3, #4]
 8001876:	609a      	str	r2, [r3, #8]
 8001878:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a1b      	ldr	r2, [pc, #108]	; (80018ec <HAL_SPI_MspInit+0x88>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d12f      	bne.n	80018e4 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001884:	4b1a      	ldr	r3, [pc, #104]	; (80018f0 <HAL_SPI_MspInit+0x8c>)
 8001886:	699b      	ldr	r3, [r3, #24]
 8001888:	4a19      	ldr	r2, [pc, #100]	; (80018f0 <HAL_SPI_MspInit+0x8c>)
 800188a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800188e:	6193      	str	r3, [r2, #24]
 8001890:	4b17      	ldr	r3, [pc, #92]	; (80018f0 <HAL_SPI_MspInit+0x8c>)
 8001892:	699b      	ldr	r3, [r3, #24]
 8001894:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001898:	60fb      	str	r3, [r7, #12]
 800189a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800189c:	4b14      	ldr	r3, [pc, #80]	; (80018f0 <HAL_SPI_MspInit+0x8c>)
 800189e:	699b      	ldr	r3, [r3, #24]
 80018a0:	4a13      	ldr	r2, [pc, #76]	; (80018f0 <HAL_SPI_MspInit+0x8c>)
 80018a2:	f043 0304 	orr.w	r3, r3, #4
 80018a6:	6193      	str	r3, [r2, #24]
 80018a8:	4b11      	ldr	r3, [pc, #68]	; (80018f0 <HAL_SPI_MspInit+0x8c>)
 80018aa:	699b      	ldr	r3, [r3, #24]
 80018ac:	f003 0304 	and.w	r3, r3, #4
 80018b0:	60bb      	str	r3, [r7, #8]
 80018b2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80018b4:	2320      	movs	r3, #32
 80018b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b8:	2302      	movs	r3, #2
 80018ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018bc:	2303      	movs	r3, #3
 80018be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c0:	f107 0310 	add.w	r3, r7, #16
 80018c4:	4619      	mov	r1, r3
 80018c6:	480b      	ldr	r0, [pc, #44]	; (80018f4 <HAL_SPI_MspInit+0x90>)
 80018c8:	f001 f958 	bl	8002b7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80018cc:	2340      	movs	r3, #64	; 0x40
 80018ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018d0:	2300      	movs	r3, #0
 80018d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d4:	2300      	movs	r3, #0
 80018d6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d8:	f107 0310 	add.w	r3, r7, #16
 80018dc:	4619      	mov	r1, r3
 80018de:	4805      	ldr	r0, [pc, #20]	; (80018f4 <HAL_SPI_MspInit+0x90>)
 80018e0:	f001 f94c 	bl	8002b7c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80018e4:	bf00      	nop
 80018e6:	3720      	adds	r7, #32
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	40013000 	.word	0x40013000
 80018f0:	40021000 	.word	0x40021000
 80018f4:	40010800 	.word	0x40010800

080018f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018fc:	e7fe      	b.n	80018fc <NMI_Handler+0x4>

080018fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018fe:	b480      	push	{r7}
 8001900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001902:	e7fe      	b.n	8001902 <HardFault_Handler+0x4>

08001904 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001908:	e7fe      	b.n	8001908 <MemManage_Handler+0x4>

0800190a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800190a:	b480      	push	{r7}
 800190c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800190e:	e7fe      	b.n	800190e <BusFault_Handler+0x4>

08001910 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001914:	e7fe      	b.n	8001914 <UsageFault_Handler+0x4>

08001916 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001916:	b480      	push	{r7}
 8001918:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800191a:	bf00      	nop
 800191c:	46bd      	mov	sp, r7
 800191e:	bc80      	pop	{r7}
 8001920:	4770      	bx	lr

08001922 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001922:	b480      	push	{r7}
 8001924:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001926:	bf00      	nop
 8001928:	46bd      	mov	sp, r7
 800192a:	bc80      	pop	{r7}
 800192c:	4770      	bx	lr

0800192e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800192e:	b480      	push	{r7}
 8001930:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001932:	bf00      	nop
 8001934:	46bd      	mov	sp, r7
 8001936:	bc80      	pop	{r7}
 8001938:	4770      	bx	lr

0800193a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800193a:	b580      	push	{r7, lr}
 800193c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800193e:	f000 f93f 	bl	8001bc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001942:	bf00      	nop
 8001944:	bd80      	pop	{r7, pc}
	...

08001948 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800194c:	4802      	ldr	r0, [pc, #8]	; (8001958 <DMA1_Channel1_IRQHandler+0x10>)
 800194e:	f000 ffe1 	bl	8002914 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001952:	bf00      	nop
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	2000023c 	.word	0x2000023c

0800195c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
	return 1;
 8001960:	2301      	movs	r3, #1
}
 8001962:	4618      	mov	r0, r3
 8001964:	46bd      	mov	sp, r7
 8001966:	bc80      	pop	{r7}
 8001968:	4770      	bx	lr

0800196a <_kill>:

int _kill(int pid, int sig)
{
 800196a:	b580      	push	{r7, lr}
 800196c:	b082      	sub	sp, #8
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]
 8001972:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001974:	f002 f9c6 	bl	8003d04 <__errno>
 8001978:	4603      	mov	r3, r0
 800197a:	2216      	movs	r2, #22
 800197c:	601a      	str	r2, [r3, #0]
	return -1;
 800197e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001982:	4618      	mov	r0, r3
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <_exit>:

void _exit (int status)
{
 800198a:	b580      	push	{r7, lr}
 800198c:	b082      	sub	sp, #8
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001992:	f04f 31ff 	mov.w	r1, #4294967295
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f7ff ffe7 	bl	800196a <_kill>
	while (1) {}		/* Make sure we hang here */
 800199c:	e7fe      	b.n	800199c <_exit+0x12>

0800199e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800199e:	b580      	push	{r7, lr}
 80019a0:	b086      	sub	sp, #24
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	60f8      	str	r0, [r7, #12]
 80019a6:	60b9      	str	r1, [r7, #8]
 80019a8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019aa:	2300      	movs	r3, #0
 80019ac:	617b      	str	r3, [r7, #20]
 80019ae:	e00a      	b.n	80019c6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80019b0:	f3af 8000 	nop.w
 80019b4:	4601      	mov	r1, r0
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	1c5a      	adds	r2, r3, #1
 80019ba:	60ba      	str	r2, [r7, #8]
 80019bc:	b2ca      	uxtb	r2, r1
 80019be:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	3301      	adds	r3, #1
 80019c4:	617b      	str	r3, [r7, #20]
 80019c6:	697a      	ldr	r2, [r7, #20]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	429a      	cmp	r2, r3
 80019cc:	dbf0      	blt.n	80019b0 <_read+0x12>
	}

return len;
 80019ce:	687b      	ldr	r3, [r7, #4]
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3718      	adds	r7, #24
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}

080019d8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b086      	sub	sp, #24
 80019dc:	af00      	add	r7, sp, #0
 80019de:	60f8      	str	r0, [r7, #12]
 80019e0:	60b9      	str	r1, [r7, #8]
 80019e2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019e4:	2300      	movs	r3, #0
 80019e6:	617b      	str	r3, [r7, #20]
 80019e8:	e009      	b.n	80019fe <_write+0x26>
	{
		__io_putchar(*ptr++);
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	1c5a      	adds	r2, r3, #1
 80019ee:	60ba      	str	r2, [r7, #8]
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	3301      	adds	r3, #1
 80019fc:	617b      	str	r3, [r7, #20]
 80019fe:	697a      	ldr	r2, [r7, #20]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	429a      	cmp	r2, r3
 8001a04:	dbf1      	blt.n	80019ea <_write+0x12>
	}
	return len;
 8001a06:	687b      	ldr	r3, [r7, #4]
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3718      	adds	r7, #24
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <_close>:

int _close(int file)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
	return -1;
 8001a18:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	370c      	adds	r7, #12
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bc80      	pop	{r7}
 8001a24:	4770      	bx	lr

08001a26 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a26:	b480      	push	{r7}
 8001a28:	b083      	sub	sp, #12
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
 8001a2e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a36:	605a      	str	r2, [r3, #4]
	return 0;
 8001a38:	2300      	movs	r3, #0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	370c      	adds	r7, #12
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bc80      	pop	{r7}
 8001a42:	4770      	bx	lr

08001a44 <_isatty>:

int _isatty(int file)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
	return 1;
 8001a4c:	2301      	movs	r3, #1
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bc80      	pop	{r7}
 8001a56:	4770      	bx	lr

08001a58 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b085      	sub	sp, #20
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	60f8      	str	r0, [r7, #12]
 8001a60:	60b9      	str	r1, [r7, #8]
 8001a62:	607a      	str	r2, [r7, #4]
	return 0;
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3714      	adds	r7, #20
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bc80      	pop	{r7}
 8001a6e:	4770      	bx	lr

08001a70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b086      	sub	sp, #24
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a78:	4a14      	ldr	r2, [pc, #80]	; (8001acc <_sbrk+0x5c>)
 8001a7a:	4b15      	ldr	r3, [pc, #84]	; (8001ad0 <_sbrk+0x60>)
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a84:	4b13      	ldr	r3, [pc, #76]	; (8001ad4 <_sbrk+0x64>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d102      	bne.n	8001a92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a8c:	4b11      	ldr	r3, [pc, #68]	; (8001ad4 <_sbrk+0x64>)
 8001a8e:	4a12      	ldr	r2, [pc, #72]	; (8001ad8 <_sbrk+0x68>)
 8001a90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a92:	4b10      	ldr	r3, [pc, #64]	; (8001ad4 <_sbrk+0x64>)
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4413      	add	r3, r2
 8001a9a:	693a      	ldr	r2, [r7, #16]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d207      	bcs.n	8001ab0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001aa0:	f002 f930 	bl	8003d04 <__errno>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	220c      	movs	r2, #12
 8001aa8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8001aae:	e009      	b.n	8001ac4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ab0:	4b08      	ldr	r3, [pc, #32]	; (8001ad4 <_sbrk+0x64>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ab6:	4b07      	ldr	r3, [pc, #28]	; (8001ad4 <_sbrk+0x64>)
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4413      	add	r3, r2
 8001abe:	4a05      	ldr	r2, [pc, #20]	; (8001ad4 <_sbrk+0x64>)
 8001ac0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3718      	adds	r7, #24
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	20005000 	.word	0x20005000
 8001ad0:	00000400 	.word	0x00000400
 8001ad4:	2000036c 	.word	0x2000036c
 8001ad8:	20000398 	.word	0x20000398

08001adc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ae0:	bf00      	nop
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bc80      	pop	{r7}
 8001ae6:	4770      	bx	lr

08001ae8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ae8:	480c      	ldr	r0, [pc, #48]	; (8001b1c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001aea:	490d      	ldr	r1, [pc, #52]	; (8001b20 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001aec:	4a0d      	ldr	r2, [pc, #52]	; (8001b24 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001aee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001af0:	e002      	b.n	8001af8 <LoopCopyDataInit>

08001af2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001af2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001af4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001af6:	3304      	adds	r3, #4

08001af8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001af8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001afa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001afc:	d3f9      	bcc.n	8001af2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001afe:	4a0a      	ldr	r2, [pc, #40]	; (8001b28 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b00:	4c0a      	ldr	r4, [pc, #40]	; (8001b2c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b04:	e001      	b.n	8001b0a <LoopFillZerobss>

08001b06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b08:	3204      	adds	r2, #4

08001b0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b0c:	d3fb      	bcc.n	8001b06 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001b0e:	f7ff ffe5 	bl	8001adc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b12:	f002 f8fd 	bl	8003d10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b16:	f7ff fa67 	bl	8000fe8 <main>
  bx lr
 8001b1a:	4770      	bx	lr
  ldr r0, =_sdata
 8001b1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b20:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8001b24:	08006ba4 	.word	0x08006ba4
  ldr r2, =_sbss
 8001b28:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8001b2c:	20000398 	.word	0x20000398

08001b30 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b30:	e7fe      	b.n	8001b30 <ADC1_2_IRQHandler>
	...

08001b34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b38:	4b08      	ldr	r3, [pc, #32]	; (8001b5c <HAL_Init+0x28>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a07      	ldr	r2, [pc, #28]	; (8001b5c <HAL_Init+0x28>)
 8001b3e:	f043 0310 	orr.w	r3, r3, #16
 8001b42:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b44:	2003      	movs	r0, #3
 8001b46:	f000 fde9 	bl	800271c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b4a:	2000      	movs	r0, #0
 8001b4c:	f000 f808 	bl	8001b60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b50:	f7ff fd4c 	bl	80015ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	40022000 	.word	0x40022000

08001b60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b68:	4b12      	ldr	r3, [pc, #72]	; (8001bb4 <HAL_InitTick+0x54>)
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	4b12      	ldr	r3, [pc, #72]	; (8001bb8 <HAL_InitTick+0x58>)
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	4619      	mov	r1, r3
 8001b72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b76:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f000 fe01 	bl	8002786 <HAL_SYSTICK_Config>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e00e      	b.n	8001bac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2b0f      	cmp	r3, #15
 8001b92:	d80a      	bhi.n	8001baa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b94:	2200      	movs	r2, #0
 8001b96:	6879      	ldr	r1, [r7, #4]
 8001b98:	f04f 30ff 	mov.w	r0, #4294967295
 8001b9c:	f000 fdc9 	bl	8002732 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ba0:	4a06      	ldr	r2, [pc, #24]	; (8001bbc <HAL_InitTick+0x5c>)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	e000      	b.n	8001bac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3708      	adds	r7, #8
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	20000000 	.word	0x20000000
 8001bb8:	20000008 	.word	0x20000008
 8001bbc:	20000004 	.word	0x20000004

08001bc0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bc4:	4b05      	ldr	r3, [pc, #20]	; (8001bdc <HAL_IncTick+0x1c>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	461a      	mov	r2, r3
 8001bca:	4b05      	ldr	r3, [pc, #20]	; (8001be0 <HAL_IncTick+0x20>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4413      	add	r3, r2
 8001bd0:	4a03      	ldr	r2, [pc, #12]	; (8001be0 <HAL_IncTick+0x20>)
 8001bd2:	6013      	str	r3, [r2, #0]
}
 8001bd4:	bf00      	nop
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bc80      	pop	{r7}
 8001bda:	4770      	bx	lr
 8001bdc:	20000008 	.word	0x20000008
 8001be0:	20000370 	.word	0x20000370

08001be4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  return uwTick;
 8001be8:	4b02      	ldr	r3, [pc, #8]	; (8001bf4 <HAL_GetTick+0x10>)
 8001bea:	681b      	ldr	r3, [r3, #0]
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bc80      	pop	{r7}
 8001bf2:	4770      	bx	lr
 8001bf4:	20000370 	.word	0x20000370

08001bf8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b086      	sub	sp, #24
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c00:	2300      	movs	r3, #0
 8001c02:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001c04:	2300      	movs	r3, #0
 8001c06:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d101      	bne.n	8001c1a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e0be      	b.n	8001d98 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d109      	bne.n	8001c3c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f7ff fd0a 	bl	8001650 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f000 faff 	bl	8002240 <ADC_ConversionStop_Disable>
 8001c42:	4603      	mov	r3, r0
 8001c44:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c4a:	f003 0310 	and.w	r3, r3, #16
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	f040 8099 	bne.w	8001d86 <HAL_ADC_Init+0x18e>
 8001c54:	7dfb      	ldrb	r3, [r7, #23]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	f040 8095 	bne.w	8001d86 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c60:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001c64:	f023 0302 	bic.w	r3, r3, #2
 8001c68:	f043 0202 	orr.w	r2, r3, #2
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001c78:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	7b1b      	ldrb	r3, [r3, #12]
 8001c7e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001c80:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001c82:	68ba      	ldr	r2, [r7, #8]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c90:	d003      	beq.n	8001c9a <HAL_ADC_Init+0xa2>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d102      	bne.n	8001ca0 <HAL_ADC_Init+0xa8>
 8001c9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c9e:	e000      	b.n	8001ca2 <HAL_ADC_Init+0xaa>
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	693a      	ldr	r2, [r7, #16]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	7d1b      	ldrb	r3, [r3, #20]
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d119      	bne.n	8001ce4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	7b1b      	ldrb	r3, [r3, #12]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d109      	bne.n	8001ccc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	699b      	ldr	r3, [r3, #24]
 8001cbc:	3b01      	subs	r3, #1
 8001cbe:	035a      	lsls	r2, r3, #13
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001cc8:	613b      	str	r3, [r7, #16]
 8001cca:	e00b      	b.n	8001ce4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd0:	f043 0220 	orr.w	r2, r3, #32
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cdc:	f043 0201 	orr.w	r2, r3, #1
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	693a      	ldr	r2, [r7, #16]
 8001cf4:	430a      	orrs	r2, r1
 8001cf6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	689a      	ldr	r2, [r3, #8]
 8001cfe:	4b28      	ldr	r3, [pc, #160]	; (8001da0 <HAL_ADC_Init+0x1a8>)
 8001d00:	4013      	ands	r3, r2
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	6812      	ldr	r2, [r2, #0]
 8001d06:	68b9      	ldr	r1, [r7, #8]
 8001d08:	430b      	orrs	r3, r1
 8001d0a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d14:	d003      	beq.n	8001d1e <HAL_ADC_Init+0x126>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d104      	bne.n	8001d28 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	691b      	ldr	r3, [r3, #16]
 8001d22:	3b01      	subs	r3, #1
 8001d24:	051b      	lsls	r3, r3, #20
 8001d26:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d2e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	68fa      	ldr	r2, [r7, #12]
 8001d38:	430a      	orrs	r2, r1
 8001d3a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	689a      	ldr	r2, [r3, #8]
 8001d42:	4b18      	ldr	r3, [pc, #96]	; (8001da4 <HAL_ADC_Init+0x1ac>)
 8001d44:	4013      	ands	r3, r2
 8001d46:	68ba      	ldr	r2, [r7, #8]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d10b      	bne.n	8001d64 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d56:	f023 0303 	bic.w	r3, r3, #3
 8001d5a:	f043 0201 	orr.w	r2, r3, #1
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001d62:	e018      	b.n	8001d96 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d68:	f023 0312 	bic.w	r3, r3, #18
 8001d6c:	f043 0210 	orr.w	r2, r3, #16
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d78:	f043 0201 	orr.w	r2, r3, #1
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001d84:	e007      	b.n	8001d96 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d8a:	f043 0210 	orr.w	r2, r3, #16
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001d96:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3718      	adds	r7, #24
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	ffe1f7fd 	.word	0xffe1f7fd
 8001da4:	ff1f0efe 	.word	0xff1f0efe

08001da8 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b086      	sub	sp, #24
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	60f8      	str	r0, [r7, #12]
 8001db0:	60b9      	str	r1, [r7, #8]
 8001db2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001db4:	2300      	movs	r3, #0
 8001db6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a64      	ldr	r2, [pc, #400]	; (8001f50 <HAL_ADC_Start_DMA+0x1a8>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d004      	beq.n	8001dcc <HAL_ADC_Start_DMA+0x24>
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a63      	ldr	r2, [pc, #396]	; (8001f54 <HAL_ADC_Start_DMA+0x1ac>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d106      	bne.n	8001dda <HAL_ADC_Start_DMA+0x32>
 8001dcc:	4b60      	ldr	r3, [pc, #384]	; (8001f50 <HAL_ADC_Start_DMA+0x1a8>)
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	f040 80b3 	bne.w	8001f40 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d101      	bne.n	8001de8 <HAL_ADC_Start_DMA+0x40>
 8001de4:	2302      	movs	r3, #2
 8001de6:	e0ae      	b.n	8001f46 <HAL_ADC_Start_DMA+0x19e>
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2201      	movs	r2, #1
 8001dec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001df0:	68f8      	ldr	r0, [r7, #12]
 8001df2:	f000 f9cb 	bl	800218c <ADC_Enable>
 8001df6:	4603      	mov	r3, r0
 8001df8:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001dfa:	7dfb      	ldrb	r3, [r7, #23]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	f040 809a 	bne.w	8001f36 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e06:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001e0a:	f023 0301 	bic.w	r3, r3, #1
 8001e0e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a4e      	ldr	r2, [pc, #312]	; (8001f54 <HAL_ADC_Start_DMA+0x1ac>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d105      	bne.n	8001e2c <HAL_ADC_Start_DMA+0x84>
 8001e20:	4b4b      	ldr	r3, [pc, #300]	; (8001f50 <HAL_ADC_Start_DMA+0x1a8>)
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d115      	bne.n	8001e58 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e30:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d026      	beq.n	8001e94 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e4a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e4e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001e56:	e01d      	b.n	8001e94 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e5c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a39      	ldr	r2, [pc, #228]	; (8001f50 <HAL_ADC_Start_DMA+0x1a8>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d004      	beq.n	8001e78 <HAL_ADC_Start_DMA+0xd0>
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a38      	ldr	r2, [pc, #224]	; (8001f54 <HAL_ADC_Start_DMA+0x1ac>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d10d      	bne.n	8001e94 <HAL_ADC_Start_DMA+0xec>
 8001e78:	4b35      	ldr	r3, [pc, #212]	; (8001f50 <HAL_ADC_Start_DMA+0x1a8>)
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d007      	beq.n	8001e94 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e88:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e8c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d006      	beq.n	8001eae <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea4:	f023 0206 	bic.w	r2, r3, #6
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	62da      	str	r2, [r3, #44]	; 0x2c
 8001eac:	e002      	b.n	8001eb4 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	6a1b      	ldr	r3, [r3, #32]
 8001ec0:	4a25      	ldr	r2, [pc, #148]	; (8001f58 <HAL_ADC_Start_DMA+0x1b0>)
 8001ec2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	6a1b      	ldr	r3, [r3, #32]
 8001ec8:	4a24      	ldr	r2, [pc, #144]	; (8001f5c <HAL_ADC_Start_DMA+0x1b4>)
 8001eca:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	6a1b      	ldr	r3, [r3, #32]
 8001ed0:	4a23      	ldr	r2, [pc, #140]	; (8001f60 <HAL_ADC_Start_DMA+0x1b8>)
 8001ed2:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f06f 0202 	mvn.w	r2, #2
 8001edc:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	689a      	ldr	r2, [r3, #8]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001eec:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	6a18      	ldr	r0, [r3, #32]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	334c      	adds	r3, #76	; 0x4c
 8001ef8:	4619      	mov	r1, r3
 8001efa:	68ba      	ldr	r2, [r7, #8]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	f000 fca9 	bl	8002854 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001f0c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001f10:	d108      	bne.n	8001f24 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	689a      	ldr	r2, [r3, #8]
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001f20:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001f22:	e00f      	b.n	8001f44 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	689a      	ldr	r2, [r3, #8]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001f32:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001f34:	e006      	b.n	8001f44 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8001f3e:	e001      	b.n	8001f44 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001f44:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3718      	adds	r7, #24
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	40012400 	.word	0x40012400
 8001f54:	40012800 	.word	0x40012800
 8001f58:	080022c3 	.word	0x080022c3
 8001f5c:	0800233f 	.word	0x0800233f
 8001f60:	0800235b 	.word	0x0800235b

08001f64 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001f6c:	bf00      	nop
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bc80      	pop	{r7}
 8001f74:	4770      	bx	lr

08001f76 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001f76:	b480      	push	{r7}
 8001f78:	b083      	sub	sp, #12
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001f7e:	bf00      	nop
 8001f80:	370c      	adds	r7, #12
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bc80      	pop	{r7}
 8001f86:	4770      	bx	lr

08001f88 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001f90:	bf00      	nop
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bc80      	pop	{r7}
 8001f98:	4770      	bx	lr
	...

08001f9c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001f9c:	b480      	push	{r7}
 8001f9e:	b085      	sub	sp, #20
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001faa:	2300      	movs	r3, #0
 8001fac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d101      	bne.n	8001fbc <HAL_ADC_ConfigChannel+0x20>
 8001fb8:	2302      	movs	r3, #2
 8001fba:	e0dc      	b.n	8002176 <HAL_ADC_ConfigChannel+0x1da>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	2b06      	cmp	r3, #6
 8001fca:	d81c      	bhi.n	8002006 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	685a      	ldr	r2, [r3, #4]
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	4413      	add	r3, r2
 8001fdc:	3b05      	subs	r3, #5
 8001fde:	221f      	movs	r2, #31
 8001fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe4:	43db      	mvns	r3, r3
 8001fe6:	4019      	ands	r1, r3
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	6818      	ldr	r0, [r3, #0]
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	685a      	ldr	r2, [r3, #4]
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	4413      	add	r3, r2
 8001ff6:	3b05      	subs	r3, #5
 8001ff8:	fa00 f203 	lsl.w	r2, r0, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	430a      	orrs	r2, r1
 8002002:	635a      	str	r2, [r3, #52]	; 0x34
 8002004:	e03c      	b.n	8002080 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	2b0c      	cmp	r3, #12
 800200c:	d81c      	bhi.n	8002048 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685a      	ldr	r2, [r3, #4]
 8002018:	4613      	mov	r3, r2
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	4413      	add	r3, r2
 800201e:	3b23      	subs	r3, #35	; 0x23
 8002020:	221f      	movs	r2, #31
 8002022:	fa02 f303 	lsl.w	r3, r2, r3
 8002026:	43db      	mvns	r3, r3
 8002028:	4019      	ands	r1, r3
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	6818      	ldr	r0, [r3, #0]
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	685a      	ldr	r2, [r3, #4]
 8002032:	4613      	mov	r3, r2
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	4413      	add	r3, r2
 8002038:	3b23      	subs	r3, #35	; 0x23
 800203a:	fa00 f203 	lsl.w	r2, r0, r3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	430a      	orrs	r2, r1
 8002044:	631a      	str	r2, [r3, #48]	; 0x30
 8002046:	e01b      	b.n	8002080 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	685a      	ldr	r2, [r3, #4]
 8002052:	4613      	mov	r3, r2
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	4413      	add	r3, r2
 8002058:	3b41      	subs	r3, #65	; 0x41
 800205a:	221f      	movs	r2, #31
 800205c:	fa02 f303 	lsl.w	r3, r2, r3
 8002060:	43db      	mvns	r3, r3
 8002062:	4019      	ands	r1, r3
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	6818      	ldr	r0, [r3, #0]
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	685a      	ldr	r2, [r3, #4]
 800206c:	4613      	mov	r3, r2
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	4413      	add	r3, r2
 8002072:	3b41      	subs	r3, #65	; 0x41
 8002074:	fa00 f203 	lsl.w	r2, r0, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	430a      	orrs	r2, r1
 800207e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2b09      	cmp	r3, #9
 8002086:	d91c      	bls.n	80020c2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	68d9      	ldr	r1, [r3, #12]
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	4613      	mov	r3, r2
 8002094:	005b      	lsls	r3, r3, #1
 8002096:	4413      	add	r3, r2
 8002098:	3b1e      	subs	r3, #30
 800209a:	2207      	movs	r2, #7
 800209c:	fa02 f303 	lsl.w	r3, r2, r3
 80020a0:	43db      	mvns	r3, r3
 80020a2:	4019      	ands	r1, r3
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	6898      	ldr	r0, [r3, #8]
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	4613      	mov	r3, r2
 80020ae:	005b      	lsls	r3, r3, #1
 80020b0:	4413      	add	r3, r2
 80020b2:	3b1e      	subs	r3, #30
 80020b4:	fa00 f203 	lsl.w	r2, r0, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	430a      	orrs	r2, r1
 80020be:	60da      	str	r2, [r3, #12]
 80020c0:	e019      	b.n	80020f6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	6919      	ldr	r1, [r3, #16]
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	4613      	mov	r3, r2
 80020ce:	005b      	lsls	r3, r3, #1
 80020d0:	4413      	add	r3, r2
 80020d2:	2207      	movs	r2, #7
 80020d4:	fa02 f303 	lsl.w	r3, r2, r3
 80020d8:	43db      	mvns	r3, r3
 80020da:	4019      	ands	r1, r3
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	6898      	ldr	r0, [r3, #8]
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	4613      	mov	r3, r2
 80020e6:	005b      	lsls	r3, r3, #1
 80020e8:	4413      	add	r3, r2
 80020ea:	fa00 f203 	lsl.w	r2, r0, r3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	430a      	orrs	r2, r1
 80020f4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2b10      	cmp	r3, #16
 80020fc:	d003      	beq.n	8002106 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002102:	2b11      	cmp	r3, #17
 8002104:	d132      	bne.n	800216c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a1d      	ldr	r2, [pc, #116]	; (8002180 <HAL_ADC_ConfigChannel+0x1e4>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d125      	bne.n	800215c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d126      	bne.n	800216c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	689a      	ldr	r2, [r3, #8]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800212c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	2b10      	cmp	r3, #16
 8002134:	d11a      	bne.n	800216c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002136:	4b13      	ldr	r3, [pc, #76]	; (8002184 <HAL_ADC_ConfigChannel+0x1e8>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a13      	ldr	r2, [pc, #76]	; (8002188 <HAL_ADC_ConfigChannel+0x1ec>)
 800213c:	fba2 2303 	umull	r2, r3, r2, r3
 8002140:	0c9a      	lsrs	r2, r3, #18
 8002142:	4613      	mov	r3, r2
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	4413      	add	r3, r2
 8002148:	005b      	lsls	r3, r3, #1
 800214a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800214c:	e002      	b.n	8002154 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	3b01      	subs	r3, #1
 8002152:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d1f9      	bne.n	800214e <HAL_ADC_ConfigChannel+0x1b2>
 800215a:	e007      	b.n	800216c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002160:	f043 0220 	orr.w	r2, r3, #32
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2200      	movs	r2, #0
 8002170:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002174:	7bfb      	ldrb	r3, [r7, #15]
}
 8002176:	4618      	mov	r0, r3
 8002178:	3714      	adds	r7, #20
 800217a:	46bd      	mov	sp, r7
 800217c:	bc80      	pop	{r7}
 800217e:	4770      	bx	lr
 8002180:	40012400 	.word	0x40012400
 8002184:	20000000 	.word	0x20000000
 8002188:	431bde83 	.word	0x431bde83

0800218c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002194:	2300      	movs	r3, #0
 8002196:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002198:	2300      	movs	r3, #0
 800219a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	f003 0301 	and.w	r3, r3, #1
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d040      	beq.n	800222c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	689a      	ldr	r2, [r3, #8]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f042 0201 	orr.w	r2, r2, #1
 80021b8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80021ba:	4b1f      	ldr	r3, [pc, #124]	; (8002238 <ADC_Enable+0xac>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a1f      	ldr	r2, [pc, #124]	; (800223c <ADC_Enable+0xb0>)
 80021c0:	fba2 2303 	umull	r2, r3, r2, r3
 80021c4:	0c9b      	lsrs	r3, r3, #18
 80021c6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80021c8:	e002      	b.n	80021d0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	3b01      	subs	r3, #1
 80021ce:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d1f9      	bne.n	80021ca <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80021d6:	f7ff fd05 	bl	8001be4 <HAL_GetTick>
 80021da:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80021dc:	e01f      	b.n	800221e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80021de:	f7ff fd01 	bl	8001be4 <HAL_GetTick>
 80021e2:	4602      	mov	r2, r0
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d918      	bls.n	800221e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	f003 0301 	and.w	r3, r3, #1
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d011      	beq.n	800221e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021fe:	f043 0210 	orr.w	r2, r3, #16
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800220a:	f043 0201 	orr.w	r2, r3, #1
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2200      	movs	r2, #0
 8002216:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e007      	b.n	800222e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	f003 0301 	and.w	r3, r3, #1
 8002228:	2b01      	cmp	r3, #1
 800222a:	d1d8      	bne.n	80021de <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800222c:	2300      	movs	r3, #0
}
 800222e:	4618      	mov	r0, r3
 8002230:	3710      	adds	r7, #16
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	20000000 	.word	0x20000000
 800223c:	431bde83 	.word	0x431bde83

08002240 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002248:	2300      	movs	r3, #0
 800224a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	f003 0301 	and.w	r3, r3, #1
 8002256:	2b01      	cmp	r3, #1
 8002258:	d12e      	bne.n	80022b8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	689a      	ldr	r2, [r3, #8]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f022 0201 	bic.w	r2, r2, #1
 8002268:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800226a:	f7ff fcbb 	bl	8001be4 <HAL_GetTick>
 800226e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002270:	e01b      	b.n	80022aa <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002272:	f7ff fcb7 	bl	8001be4 <HAL_GetTick>
 8002276:	4602      	mov	r2, r0
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	2b02      	cmp	r3, #2
 800227e:	d914      	bls.n	80022aa <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f003 0301 	and.w	r3, r3, #1
 800228a:	2b01      	cmp	r3, #1
 800228c:	d10d      	bne.n	80022aa <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002292:	f043 0210 	orr.w	r2, r3, #16
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800229e:	f043 0201 	orr.w	r2, r3, #1
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e007      	b.n	80022ba <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	f003 0301 	and.w	r3, r3, #1
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d0dc      	beq.n	8002272 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3710      	adds	r7, #16
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}

080022c2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80022c2:	b580      	push	{r7, lr}
 80022c4:	b084      	sub	sp, #16
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ce:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d127      	bne.n	800232c <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80022f2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80022f6:	d115      	bne.n	8002324 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d111      	bne.n	8002324 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002304:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002310:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002314:	2b00      	cmp	r3, #0
 8002316:	d105      	bne.n	8002324 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800231c:	f043 0201 	orr.w	r2, r3, #1
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002324:	68f8      	ldr	r0, [r7, #12]
 8002326:	f7ff fe1d 	bl	8001f64 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800232a:	e004      	b.n	8002336 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	6a1b      	ldr	r3, [r3, #32]
 8002330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	4798      	blx	r3
}
 8002336:	bf00      	nop
 8002338:	3710      	adds	r7, #16
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}

0800233e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800233e:	b580      	push	{r7, lr}
 8002340:	b084      	sub	sp, #16
 8002342:	af00      	add	r7, sp, #0
 8002344:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800234c:	68f8      	ldr	r0, [r7, #12]
 800234e:	f7ff fe12 	bl	8001f76 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002352:	bf00      	nop
 8002354:	3710      	adds	r7, #16
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}

0800235a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800235a:	b580      	push	{r7, lr}
 800235c:	b084      	sub	sp, #16
 800235e:	af00      	add	r7, sp, #0
 8002360:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002366:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800236c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002378:	f043 0204 	orr.w	r2, r3, #4
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002380:	68f8      	ldr	r0, [r7, #12]
 8002382:	f7ff fe01 	bl	8001f88 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002386:	bf00      	nop
 8002388:	3710      	adds	r7, #16
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}

0800238e <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800238e:	b580      	push	{r7, lr}
 8002390:	b084      	sub	sp, #16
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d101      	bne.n	80023a0 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e0ed      	b.n	800257c <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d102      	bne.n	80023b2 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f7ff f9cf 	bl	8001750 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f042 0201 	orr.w	r2, r2, #1
 80023c0:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023c2:	f7ff fc0f 	bl	8001be4 <HAL_GetTick>
 80023c6:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80023c8:	e012      	b.n	80023f0 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80023ca:	f7ff fc0b 	bl	8001be4 <HAL_GetTick>
 80023ce:	4602      	mov	r2, r0
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	2b0a      	cmp	r3, #10
 80023d6:	d90b      	bls.n	80023f0 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023dc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2205      	movs	r2, #5
 80023e8:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e0c5      	b.n	800257c <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f003 0301 	and.w	r3, r3, #1
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d0e5      	beq.n	80023ca <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f022 0202 	bic.w	r2, r2, #2
 800240c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800240e:	f7ff fbe9 	bl	8001be4 <HAL_GetTick>
 8002412:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002414:	e012      	b.n	800243c <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002416:	f7ff fbe5 	bl	8001be4 <HAL_GetTick>
 800241a:	4602      	mov	r2, r0
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	2b0a      	cmp	r3, #10
 8002422:	d90b      	bls.n	800243c <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002428:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2205      	movs	r2, #5
 8002434:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e09f      	b.n	800257c <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f003 0302 	and.w	r3, r3, #2
 8002446:	2b00      	cmp	r3, #0
 8002448:	d1e5      	bne.n	8002416 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	7e1b      	ldrb	r3, [r3, #24]
 800244e:	2b01      	cmp	r3, #1
 8002450:	d108      	bne.n	8002464 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002460:	601a      	str	r2, [r3, #0]
 8002462:	e007      	b.n	8002474 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002472:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	7e5b      	ldrb	r3, [r3, #25]
 8002478:	2b01      	cmp	r3, #1
 800247a:	d108      	bne.n	800248e <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800248a:	601a      	str	r2, [r3, #0]
 800248c:	e007      	b.n	800249e <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800249c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	7e9b      	ldrb	r3, [r3, #26]
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d108      	bne.n	80024b8 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f042 0220 	orr.w	r2, r2, #32
 80024b4:	601a      	str	r2, [r3, #0]
 80024b6:	e007      	b.n	80024c8 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f022 0220 	bic.w	r2, r2, #32
 80024c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	7edb      	ldrb	r3, [r3, #27]
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d108      	bne.n	80024e2 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f022 0210 	bic.w	r2, r2, #16
 80024de:	601a      	str	r2, [r3, #0]
 80024e0:	e007      	b.n	80024f2 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f042 0210 	orr.w	r2, r2, #16
 80024f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	7f1b      	ldrb	r3, [r3, #28]
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d108      	bne.n	800250c <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f042 0208 	orr.w	r2, r2, #8
 8002508:	601a      	str	r2, [r3, #0]
 800250a:	e007      	b.n	800251c <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f022 0208 	bic.w	r2, r2, #8
 800251a:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	7f5b      	ldrb	r3, [r3, #29]
 8002520:	2b01      	cmp	r3, #1
 8002522:	d108      	bne.n	8002536 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f042 0204 	orr.w	r2, r2, #4
 8002532:	601a      	str	r2, [r3, #0]
 8002534:	e007      	b.n	8002546 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f022 0204 	bic.w	r2, r2, #4
 8002544:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	689a      	ldr	r2, [r3, #8]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	431a      	orrs	r2, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	691b      	ldr	r3, [r3, #16]
 8002554:	431a      	orrs	r2, r3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	695b      	ldr	r3, [r3, #20]
 800255a:	ea42 0103 	orr.w	r1, r2, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	1e5a      	subs	r2, r3, #1
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	430a      	orrs	r2, r1
 800256a:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2201      	movs	r2, #1
 8002576:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800257a:	2300      	movs	r3, #0
}
 800257c:	4618      	mov	r0, r3
 800257e:	3710      	adds	r7, #16
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}

08002584 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002584:	b480      	push	{r7}
 8002586:	b085      	sub	sp, #20
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	f003 0307 	and.w	r3, r3, #7
 8002592:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002594:	4b0c      	ldr	r3, [pc, #48]	; (80025c8 <__NVIC_SetPriorityGrouping+0x44>)
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800259a:	68ba      	ldr	r2, [r7, #8]
 800259c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025a0:	4013      	ands	r3, r2
 80025a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025b6:	4a04      	ldr	r2, [pc, #16]	; (80025c8 <__NVIC_SetPriorityGrouping+0x44>)
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	60d3      	str	r3, [r2, #12]
}
 80025bc:	bf00      	nop
 80025be:	3714      	adds	r7, #20
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bc80      	pop	{r7}
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	e000ed00 	.word	0xe000ed00

080025cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025cc:	b480      	push	{r7}
 80025ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025d0:	4b04      	ldr	r3, [pc, #16]	; (80025e4 <__NVIC_GetPriorityGrouping+0x18>)
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	0a1b      	lsrs	r3, r3, #8
 80025d6:	f003 0307 	and.w	r3, r3, #7
}
 80025da:	4618      	mov	r0, r3
 80025dc:	46bd      	mov	sp, r7
 80025de:	bc80      	pop	{r7}
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	e000ed00 	.word	0xe000ed00

080025e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	4603      	mov	r3, r0
 80025f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	db0b      	blt.n	8002612 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025fa:	79fb      	ldrb	r3, [r7, #7]
 80025fc:	f003 021f 	and.w	r2, r3, #31
 8002600:	4906      	ldr	r1, [pc, #24]	; (800261c <__NVIC_EnableIRQ+0x34>)
 8002602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002606:	095b      	lsrs	r3, r3, #5
 8002608:	2001      	movs	r0, #1
 800260a:	fa00 f202 	lsl.w	r2, r0, r2
 800260e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002612:	bf00      	nop
 8002614:	370c      	adds	r7, #12
 8002616:	46bd      	mov	sp, r7
 8002618:	bc80      	pop	{r7}
 800261a:	4770      	bx	lr
 800261c:	e000e100 	.word	0xe000e100

08002620 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	4603      	mov	r3, r0
 8002628:	6039      	str	r1, [r7, #0]
 800262a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800262c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002630:	2b00      	cmp	r3, #0
 8002632:	db0a      	blt.n	800264a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	b2da      	uxtb	r2, r3
 8002638:	490c      	ldr	r1, [pc, #48]	; (800266c <__NVIC_SetPriority+0x4c>)
 800263a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800263e:	0112      	lsls	r2, r2, #4
 8002640:	b2d2      	uxtb	r2, r2
 8002642:	440b      	add	r3, r1
 8002644:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002648:	e00a      	b.n	8002660 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	b2da      	uxtb	r2, r3
 800264e:	4908      	ldr	r1, [pc, #32]	; (8002670 <__NVIC_SetPriority+0x50>)
 8002650:	79fb      	ldrb	r3, [r7, #7]
 8002652:	f003 030f 	and.w	r3, r3, #15
 8002656:	3b04      	subs	r3, #4
 8002658:	0112      	lsls	r2, r2, #4
 800265a:	b2d2      	uxtb	r2, r2
 800265c:	440b      	add	r3, r1
 800265e:	761a      	strb	r2, [r3, #24]
}
 8002660:	bf00      	nop
 8002662:	370c      	adds	r7, #12
 8002664:	46bd      	mov	sp, r7
 8002666:	bc80      	pop	{r7}
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	e000e100 	.word	0xe000e100
 8002670:	e000ed00 	.word	0xe000ed00

08002674 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002674:	b480      	push	{r7}
 8002676:	b089      	sub	sp, #36	; 0x24
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f003 0307 	and.w	r3, r3, #7
 8002686:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	f1c3 0307 	rsb	r3, r3, #7
 800268e:	2b04      	cmp	r3, #4
 8002690:	bf28      	it	cs
 8002692:	2304      	movcs	r3, #4
 8002694:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	3304      	adds	r3, #4
 800269a:	2b06      	cmp	r3, #6
 800269c:	d902      	bls.n	80026a4 <NVIC_EncodePriority+0x30>
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	3b03      	subs	r3, #3
 80026a2:	e000      	b.n	80026a6 <NVIC_EncodePriority+0x32>
 80026a4:	2300      	movs	r3, #0
 80026a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026a8:	f04f 32ff 	mov.w	r2, #4294967295
 80026ac:	69bb      	ldr	r3, [r7, #24]
 80026ae:	fa02 f303 	lsl.w	r3, r2, r3
 80026b2:	43da      	mvns	r2, r3
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	401a      	ands	r2, r3
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026bc:	f04f 31ff 	mov.w	r1, #4294967295
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	fa01 f303 	lsl.w	r3, r1, r3
 80026c6:	43d9      	mvns	r1, r3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026cc:	4313      	orrs	r3, r2
         );
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3724      	adds	r7, #36	; 0x24
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bc80      	pop	{r7}
 80026d6:	4770      	bx	lr

080026d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	3b01      	subs	r3, #1
 80026e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026e8:	d301      	bcc.n	80026ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026ea:	2301      	movs	r3, #1
 80026ec:	e00f      	b.n	800270e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026ee:	4a0a      	ldr	r2, [pc, #40]	; (8002718 <SysTick_Config+0x40>)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	3b01      	subs	r3, #1
 80026f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026f6:	210f      	movs	r1, #15
 80026f8:	f04f 30ff 	mov.w	r0, #4294967295
 80026fc:	f7ff ff90 	bl	8002620 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002700:	4b05      	ldr	r3, [pc, #20]	; (8002718 <SysTick_Config+0x40>)
 8002702:	2200      	movs	r2, #0
 8002704:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002706:	4b04      	ldr	r3, [pc, #16]	; (8002718 <SysTick_Config+0x40>)
 8002708:	2207      	movs	r2, #7
 800270a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800270c:	2300      	movs	r3, #0
}
 800270e:	4618      	mov	r0, r3
 8002710:	3708      	adds	r7, #8
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	e000e010 	.word	0xe000e010

0800271c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f7ff ff2d 	bl	8002584 <__NVIC_SetPriorityGrouping>
}
 800272a:	bf00      	nop
 800272c:	3708      	adds	r7, #8
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}

08002732 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002732:	b580      	push	{r7, lr}
 8002734:	b086      	sub	sp, #24
 8002736:	af00      	add	r7, sp, #0
 8002738:	4603      	mov	r3, r0
 800273a:	60b9      	str	r1, [r7, #8]
 800273c:	607a      	str	r2, [r7, #4]
 800273e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002740:	2300      	movs	r3, #0
 8002742:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002744:	f7ff ff42 	bl	80025cc <__NVIC_GetPriorityGrouping>
 8002748:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	68b9      	ldr	r1, [r7, #8]
 800274e:	6978      	ldr	r0, [r7, #20]
 8002750:	f7ff ff90 	bl	8002674 <NVIC_EncodePriority>
 8002754:	4602      	mov	r2, r0
 8002756:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800275a:	4611      	mov	r1, r2
 800275c:	4618      	mov	r0, r3
 800275e:	f7ff ff5f 	bl	8002620 <__NVIC_SetPriority>
}
 8002762:	bf00      	nop
 8002764:	3718      	adds	r7, #24
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}

0800276a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800276a:	b580      	push	{r7, lr}
 800276c:	b082      	sub	sp, #8
 800276e:	af00      	add	r7, sp, #0
 8002770:	4603      	mov	r3, r0
 8002772:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002774:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002778:	4618      	mov	r0, r3
 800277a:	f7ff ff35 	bl	80025e8 <__NVIC_EnableIRQ>
}
 800277e:	bf00      	nop
 8002780:	3708      	adds	r7, #8
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}

08002786 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002786:	b580      	push	{r7, lr}
 8002788:	b082      	sub	sp, #8
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f7ff ffa2 	bl	80026d8 <SysTick_Config>
 8002794:	4603      	mov	r3, r0
}
 8002796:	4618      	mov	r0, r3
 8002798:	3708      	adds	r7, #8
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
	...

080027a0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b085      	sub	sp, #20
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80027a8:	2300      	movs	r3, #0
 80027aa:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d101      	bne.n	80027b6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e043      	b.n	800283e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	461a      	mov	r2, r3
 80027bc:	4b22      	ldr	r3, [pc, #136]	; (8002848 <HAL_DMA_Init+0xa8>)
 80027be:	4413      	add	r3, r2
 80027c0:	4a22      	ldr	r2, [pc, #136]	; (800284c <HAL_DMA_Init+0xac>)
 80027c2:	fba2 2303 	umull	r2, r3, r2, r3
 80027c6:	091b      	lsrs	r3, r3, #4
 80027c8:	009a      	lsls	r2, r3, #2
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a1f      	ldr	r2, [pc, #124]	; (8002850 <HAL_DMA_Init+0xb0>)
 80027d2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2202      	movs	r2, #2
 80027d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80027ea:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80027ee:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80027f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002804:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	695b      	ldr	r3, [r3, #20]
 800280a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002810:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	69db      	ldr	r3, [r3, #28]
 8002816:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002818:	68fa      	ldr	r2, [r7, #12]
 800281a:	4313      	orrs	r3, r2
 800281c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	68fa      	ldr	r2, [r7, #12]
 8002824:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2200      	movs	r2, #0
 800282a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	3714      	adds	r7, #20
 8002842:	46bd      	mov	sp, r7
 8002844:	bc80      	pop	{r7}
 8002846:	4770      	bx	lr
 8002848:	bffdfff8 	.word	0xbffdfff8
 800284c:	cccccccd 	.word	0xcccccccd
 8002850:	40020000 	.word	0x40020000

08002854 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b086      	sub	sp, #24
 8002858:	af00      	add	r7, sp, #0
 800285a:	60f8      	str	r0, [r7, #12]
 800285c:	60b9      	str	r1, [r7, #8]
 800285e:	607a      	str	r2, [r7, #4]
 8002860:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002862:	2300      	movs	r3, #0
 8002864:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	f893 3020 	ldrb.w	r3, [r3, #32]
 800286c:	2b01      	cmp	r3, #1
 800286e:	d101      	bne.n	8002874 <HAL_DMA_Start_IT+0x20>
 8002870:	2302      	movs	r3, #2
 8002872:	e04a      	b.n	800290a <HAL_DMA_Start_IT+0xb6>
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2201      	movs	r2, #1
 8002878:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002882:	2b01      	cmp	r3, #1
 8002884:	d13a      	bne.n	80028fc <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2202      	movs	r2, #2
 800288a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2200      	movs	r2, #0
 8002892:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f022 0201 	bic.w	r2, r2, #1
 80028a2:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	68b9      	ldr	r1, [r7, #8]
 80028aa:	68f8      	ldr	r0, [r7, #12]
 80028ac:	f000 f938 	bl	8002b20 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d008      	beq.n	80028ca <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f042 020e 	orr.w	r2, r2, #14
 80028c6:	601a      	str	r2, [r3, #0]
 80028c8:	e00f      	b.n	80028ea <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f022 0204 	bic.w	r2, r2, #4
 80028d8:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f042 020a 	orr.w	r2, r2, #10
 80028e8:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f042 0201 	orr.w	r2, r2, #1
 80028f8:	601a      	str	r2, [r3, #0]
 80028fa:	e005      	b.n	8002908 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2200      	movs	r2, #0
 8002900:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002904:	2302      	movs	r3, #2
 8002906:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002908:	7dfb      	ldrb	r3, [r7, #23]
}
 800290a:	4618      	mov	r0, r3
 800290c:	3718      	adds	r7, #24
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
	...

08002914 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002930:	2204      	movs	r2, #4
 8002932:	409a      	lsls	r2, r3
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	4013      	ands	r3, r2
 8002938:	2b00      	cmp	r3, #0
 800293a:	d04f      	beq.n	80029dc <HAL_DMA_IRQHandler+0xc8>
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	f003 0304 	and.w	r3, r3, #4
 8002942:	2b00      	cmp	r3, #0
 8002944:	d04a      	beq.n	80029dc <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0320 	and.w	r3, r3, #32
 8002950:	2b00      	cmp	r3, #0
 8002952:	d107      	bne.n	8002964 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f022 0204 	bic.w	r2, r2, #4
 8002962:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a66      	ldr	r2, [pc, #408]	; (8002b04 <HAL_DMA_IRQHandler+0x1f0>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d029      	beq.n	80029c2 <HAL_DMA_IRQHandler+0xae>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a65      	ldr	r2, [pc, #404]	; (8002b08 <HAL_DMA_IRQHandler+0x1f4>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d022      	beq.n	80029be <HAL_DMA_IRQHandler+0xaa>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a63      	ldr	r2, [pc, #396]	; (8002b0c <HAL_DMA_IRQHandler+0x1f8>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d01a      	beq.n	80029b8 <HAL_DMA_IRQHandler+0xa4>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a62      	ldr	r2, [pc, #392]	; (8002b10 <HAL_DMA_IRQHandler+0x1fc>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d012      	beq.n	80029b2 <HAL_DMA_IRQHandler+0x9e>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a60      	ldr	r2, [pc, #384]	; (8002b14 <HAL_DMA_IRQHandler+0x200>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d00a      	beq.n	80029ac <HAL_DMA_IRQHandler+0x98>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a5f      	ldr	r2, [pc, #380]	; (8002b18 <HAL_DMA_IRQHandler+0x204>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d102      	bne.n	80029a6 <HAL_DMA_IRQHandler+0x92>
 80029a0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80029a4:	e00e      	b.n	80029c4 <HAL_DMA_IRQHandler+0xb0>
 80029a6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80029aa:	e00b      	b.n	80029c4 <HAL_DMA_IRQHandler+0xb0>
 80029ac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80029b0:	e008      	b.n	80029c4 <HAL_DMA_IRQHandler+0xb0>
 80029b2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80029b6:	e005      	b.n	80029c4 <HAL_DMA_IRQHandler+0xb0>
 80029b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029bc:	e002      	b.n	80029c4 <HAL_DMA_IRQHandler+0xb0>
 80029be:	2340      	movs	r3, #64	; 0x40
 80029c0:	e000      	b.n	80029c4 <HAL_DMA_IRQHandler+0xb0>
 80029c2:	2304      	movs	r3, #4
 80029c4:	4a55      	ldr	r2, [pc, #340]	; (8002b1c <HAL_DMA_IRQHandler+0x208>)
 80029c6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	f000 8094 	beq.w	8002afa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80029da:	e08e      	b.n	8002afa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e0:	2202      	movs	r2, #2
 80029e2:	409a      	lsls	r2, r3
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	4013      	ands	r3, r2
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d056      	beq.n	8002a9a <HAL_DMA_IRQHandler+0x186>
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	f003 0302 	and.w	r3, r3, #2
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d051      	beq.n	8002a9a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0320 	and.w	r3, r3, #32
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d10b      	bne.n	8002a1c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f022 020a 	bic.w	r2, r2, #10
 8002a12:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a38      	ldr	r2, [pc, #224]	; (8002b04 <HAL_DMA_IRQHandler+0x1f0>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d029      	beq.n	8002a7a <HAL_DMA_IRQHandler+0x166>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a37      	ldr	r2, [pc, #220]	; (8002b08 <HAL_DMA_IRQHandler+0x1f4>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d022      	beq.n	8002a76 <HAL_DMA_IRQHandler+0x162>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a35      	ldr	r2, [pc, #212]	; (8002b0c <HAL_DMA_IRQHandler+0x1f8>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d01a      	beq.n	8002a70 <HAL_DMA_IRQHandler+0x15c>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a34      	ldr	r2, [pc, #208]	; (8002b10 <HAL_DMA_IRQHandler+0x1fc>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d012      	beq.n	8002a6a <HAL_DMA_IRQHandler+0x156>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a32      	ldr	r2, [pc, #200]	; (8002b14 <HAL_DMA_IRQHandler+0x200>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d00a      	beq.n	8002a64 <HAL_DMA_IRQHandler+0x150>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a31      	ldr	r2, [pc, #196]	; (8002b18 <HAL_DMA_IRQHandler+0x204>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d102      	bne.n	8002a5e <HAL_DMA_IRQHandler+0x14a>
 8002a58:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002a5c:	e00e      	b.n	8002a7c <HAL_DMA_IRQHandler+0x168>
 8002a5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a62:	e00b      	b.n	8002a7c <HAL_DMA_IRQHandler+0x168>
 8002a64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a68:	e008      	b.n	8002a7c <HAL_DMA_IRQHandler+0x168>
 8002a6a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a6e:	e005      	b.n	8002a7c <HAL_DMA_IRQHandler+0x168>
 8002a70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a74:	e002      	b.n	8002a7c <HAL_DMA_IRQHandler+0x168>
 8002a76:	2320      	movs	r3, #32
 8002a78:	e000      	b.n	8002a7c <HAL_DMA_IRQHandler+0x168>
 8002a7a:	2302      	movs	r3, #2
 8002a7c:	4a27      	ldr	r2, [pc, #156]	; (8002b1c <HAL_DMA_IRQHandler+0x208>)
 8002a7e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2200      	movs	r2, #0
 8002a84:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d034      	beq.n	8002afa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002a98:	e02f      	b.n	8002afa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9e:	2208      	movs	r2, #8
 8002aa0:	409a      	lsls	r2, r3
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d028      	beq.n	8002afc <HAL_DMA_IRQHandler+0x1e8>
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	f003 0308 	and.w	r3, r3, #8
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d023      	beq.n	8002afc <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f022 020e 	bic.w	r2, r2, #14
 8002ac2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002acc:	2101      	movs	r1, #1
 8002ace:	fa01 f202 	lsl.w	r2, r1, r2
 8002ad2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2201      	movs	r2, #1
 8002ade:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d004      	beq.n	8002afc <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	4798      	blx	r3
    }
  }
  return;
 8002afa:	bf00      	nop
 8002afc:	bf00      	nop
}
 8002afe:	3710      	adds	r7, #16
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	40020008 	.word	0x40020008
 8002b08:	4002001c 	.word	0x4002001c
 8002b0c:	40020030 	.word	0x40020030
 8002b10:	40020044 	.word	0x40020044
 8002b14:	40020058 	.word	0x40020058
 8002b18:	4002006c 	.word	0x4002006c
 8002b1c:	40020000 	.word	0x40020000

08002b20 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b085      	sub	sp, #20
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	60b9      	str	r1, [r7, #8]
 8002b2a:	607a      	str	r2, [r7, #4]
 8002b2c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b36:	2101      	movs	r1, #1
 8002b38:	fa01 f202 	lsl.w	r2, r1, r2
 8002b3c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	683a      	ldr	r2, [r7, #0]
 8002b44:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	2b10      	cmp	r3, #16
 8002b4c:	d108      	bne.n	8002b60 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	68ba      	ldr	r2, [r7, #8]
 8002b5c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002b5e:	e007      	b.n	8002b70 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	68ba      	ldr	r2, [r7, #8]
 8002b66:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	687a      	ldr	r2, [r7, #4]
 8002b6e:	60da      	str	r2, [r3, #12]
}
 8002b70:	bf00      	nop
 8002b72:	3714      	adds	r7, #20
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bc80      	pop	{r7}
 8002b78:	4770      	bx	lr
	...

08002b7c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b08b      	sub	sp, #44	; 0x2c
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b86:	2300      	movs	r3, #0
 8002b88:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b8e:	e169      	b.n	8002e64 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002b90:	2201      	movs	r2, #1
 8002b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b94:	fa02 f303 	lsl.w	r3, r2, r3
 8002b98:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	69fa      	ldr	r2, [r7, #28]
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002ba4:	69ba      	ldr	r2, [r7, #24]
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	f040 8158 	bne.w	8002e5e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	4a9a      	ldr	r2, [pc, #616]	; (8002e1c <HAL_GPIO_Init+0x2a0>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d05e      	beq.n	8002c76 <HAL_GPIO_Init+0xfa>
 8002bb8:	4a98      	ldr	r2, [pc, #608]	; (8002e1c <HAL_GPIO_Init+0x2a0>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d875      	bhi.n	8002caa <HAL_GPIO_Init+0x12e>
 8002bbe:	4a98      	ldr	r2, [pc, #608]	; (8002e20 <HAL_GPIO_Init+0x2a4>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d058      	beq.n	8002c76 <HAL_GPIO_Init+0xfa>
 8002bc4:	4a96      	ldr	r2, [pc, #600]	; (8002e20 <HAL_GPIO_Init+0x2a4>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d86f      	bhi.n	8002caa <HAL_GPIO_Init+0x12e>
 8002bca:	4a96      	ldr	r2, [pc, #600]	; (8002e24 <HAL_GPIO_Init+0x2a8>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d052      	beq.n	8002c76 <HAL_GPIO_Init+0xfa>
 8002bd0:	4a94      	ldr	r2, [pc, #592]	; (8002e24 <HAL_GPIO_Init+0x2a8>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d869      	bhi.n	8002caa <HAL_GPIO_Init+0x12e>
 8002bd6:	4a94      	ldr	r2, [pc, #592]	; (8002e28 <HAL_GPIO_Init+0x2ac>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d04c      	beq.n	8002c76 <HAL_GPIO_Init+0xfa>
 8002bdc:	4a92      	ldr	r2, [pc, #584]	; (8002e28 <HAL_GPIO_Init+0x2ac>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d863      	bhi.n	8002caa <HAL_GPIO_Init+0x12e>
 8002be2:	4a92      	ldr	r2, [pc, #584]	; (8002e2c <HAL_GPIO_Init+0x2b0>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d046      	beq.n	8002c76 <HAL_GPIO_Init+0xfa>
 8002be8:	4a90      	ldr	r2, [pc, #576]	; (8002e2c <HAL_GPIO_Init+0x2b0>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d85d      	bhi.n	8002caa <HAL_GPIO_Init+0x12e>
 8002bee:	2b12      	cmp	r3, #18
 8002bf0:	d82a      	bhi.n	8002c48 <HAL_GPIO_Init+0xcc>
 8002bf2:	2b12      	cmp	r3, #18
 8002bf4:	d859      	bhi.n	8002caa <HAL_GPIO_Init+0x12e>
 8002bf6:	a201      	add	r2, pc, #4	; (adr r2, 8002bfc <HAL_GPIO_Init+0x80>)
 8002bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bfc:	08002c77 	.word	0x08002c77
 8002c00:	08002c51 	.word	0x08002c51
 8002c04:	08002c63 	.word	0x08002c63
 8002c08:	08002ca5 	.word	0x08002ca5
 8002c0c:	08002cab 	.word	0x08002cab
 8002c10:	08002cab 	.word	0x08002cab
 8002c14:	08002cab 	.word	0x08002cab
 8002c18:	08002cab 	.word	0x08002cab
 8002c1c:	08002cab 	.word	0x08002cab
 8002c20:	08002cab 	.word	0x08002cab
 8002c24:	08002cab 	.word	0x08002cab
 8002c28:	08002cab 	.word	0x08002cab
 8002c2c:	08002cab 	.word	0x08002cab
 8002c30:	08002cab 	.word	0x08002cab
 8002c34:	08002cab 	.word	0x08002cab
 8002c38:	08002cab 	.word	0x08002cab
 8002c3c:	08002cab 	.word	0x08002cab
 8002c40:	08002c59 	.word	0x08002c59
 8002c44:	08002c6d 	.word	0x08002c6d
 8002c48:	4a79      	ldr	r2, [pc, #484]	; (8002e30 <HAL_GPIO_Init+0x2b4>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d013      	beq.n	8002c76 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002c4e:	e02c      	b.n	8002caa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	623b      	str	r3, [r7, #32]
          break;
 8002c56:	e029      	b.n	8002cac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	3304      	adds	r3, #4
 8002c5e:	623b      	str	r3, [r7, #32]
          break;
 8002c60:	e024      	b.n	8002cac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	3308      	adds	r3, #8
 8002c68:	623b      	str	r3, [r7, #32]
          break;
 8002c6a:	e01f      	b.n	8002cac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	330c      	adds	r3, #12
 8002c72:	623b      	str	r3, [r7, #32]
          break;
 8002c74:	e01a      	b.n	8002cac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d102      	bne.n	8002c84 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002c7e:	2304      	movs	r3, #4
 8002c80:	623b      	str	r3, [r7, #32]
          break;
 8002c82:	e013      	b.n	8002cac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d105      	bne.n	8002c98 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c8c:	2308      	movs	r3, #8
 8002c8e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	69fa      	ldr	r2, [r7, #28]
 8002c94:	611a      	str	r2, [r3, #16]
          break;
 8002c96:	e009      	b.n	8002cac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c98:	2308      	movs	r3, #8
 8002c9a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	69fa      	ldr	r2, [r7, #28]
 8002ca0:	615a      	str	r2, [r3, #20]
          break;
 8002ca2:	e003      	b.n	8002cac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	623b      	str	r3, [r7, #32]
          break;
 8002ca8:	e000      	b.n	8002cac <HAL_GPIO_Init+0x130>
          break;
 8002caa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002cac:	69bb      	ldr	r3, [r7, #24]
 8002cae:	2bff      	cmp	r3, #255	; 0xff
 8002cb0:	d801      	bhi.n	8002cb6 <HAL_GPIO_Init+0x13a>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	e001      	b.n	8002cba <HAL_GPIO_Init+0x13e>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	3304      	adds	r3, #4
 8002cba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002cbc:	69bb      	ldr	r3, [r7, #24]
 8002cbe:	2bff      	cmp	r3, #255	; 0xff
 8002cc0:	d802      	bhi.n	8002cc8 <HAL_GPIO_Init+0x14c>
 8002cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	e002      	b.n	8002cce <HAL_GPIO_Init+0x152>
 8002cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cca:	3b08      	subs	r3, #8
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	210f      	movs	r1, #15
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8002cdc:	43db      	mvns	r3, r3
 8002cde:	401a      	ands	r2, r3
 8002ce0:	6a39      	ldr	r1, [r7, #32]
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ce8:	431a      	orrs	r2, r3
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	f000 80b1 	beq.w	8002e5e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002cfc:	4b4d      	ldr	r3, [pc, #308]	; (8002e34 <HAL_GPIO_Init+0x2b8>)
 8002cfe:	699b      	ldr	r3, [r3, #24]
 8002d00:	4a4c      	ldr	r2, [pc, #304]	; (8002e34 <HAL_GPIO_Init+0x2b8>)
 8002d02:	f043 0301 	orr.w	r3, r3, #1
 8002d06:	6193      	str	r3, [r2, #24]
 8002d08:	4b4a      	ldr	r3, [pc, #296]	; (8002e34 <HAL_GPIO_Init+0x2b8>)
 8002d0a:	699b      	ldr	r3, [r3, #24]
 8002d0c:	f003 0301 	and.w	r3, r3, #1
 8002d10:	60bb      	str	r3, [r7, #8]
 8002d12:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002d14:	4a48      	ldr	r2, [pc, #288]	; (8002e38 <HAL_GPIO_Init+0x2bc>)
 8002d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d18:	089b      	lsrs	r3, r3, #2
 8002d1a:	3302      	adds	r3, #2
 8002d1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d20:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d24:	f003 0303 	and.w	r3, r3, #3
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	220f      	movs	r2, #15
 8002d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d30:	43db      	mvns	r3, r3
 8002d32:	68fa      	ldr	r2, [r7, #12]
 8002d34:	4013      	ands	r3, r2
 8002d36:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	4a40      	ldr	r2, [pc, #256]	; (8002e3c <HAL_GPIO_Init+0x2c0>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d013      	beq.n	8002d68 <HAL_GPIO_Init+0x1ec>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	4a3f      	ldr	r2, [pc, #252]	; (8002e40 <HAL_GPIO_Init+0x2c4>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d00d      	beq.n	8002d64 <HAL_GPIO_Init+0x1e8>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	4a3e      	ldr	r2, [pc, #248]	; (8002e44 <HAL_GPIO_Init+0x2c8>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d007      	beq.n	8002d60 <HAL_GPIO_Init+0x1e4>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	4a3d      	ldr	r2, [pc, #244]	; (8002e48 <HAL_GPIO_Init+0x2cc>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d101      	bne.n	8002d5c <HAL_GPIO_Init+0x1e0>
 8002d58:	2303      	movs	r3, #3
 8002d5a:	e006      	b.n	8002d6a <HAL_GPIO_Init+0x1ee>
 8002d5c:	2304      	movs	r3, #4
 8002d5e:	e004      	b.n	8002d6a <HAL_GPIO_Init+0x1ee>
 8002d60:	2302      	movs	r3, #2
 8002d62:	e002      	b.n	8002d6a <HAL_GPIO_Init+0x1ee>
 8002d64:	2301      	movs	r3, #1
 8002d66:	e000      	b.n	8002d6a <HAL_GPIO_Init+0x1ee>
 8002d68:	2300      	movs	r3, #0
 8002d6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d6c:	f002 0203 	and.w	r2, r2, #3
 8002d70:	0092      	lsls	r2, r2, #2
 8002d72:	4093      	lsls	r3, r2
 8002d74:	68fa      	ldr	r2, [r7, #12]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002d7a:	492f      	ldr	r1, [pc, #188]	; (8002e38 <HAL_GPIO_Init+0x2bc>)
 8002d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7e:	089b      	lsrs	r3, r3, #2
 8002d80:	3302      	adds	r3, #2
 8002d82:	68fa      	ldr	r2, [r7, #12]
 8002d84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d006      	beq.n	8002da2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002d94:	4b2d      	ldr	r3, [pc, #180]	; (8002e4c <HAL_GPIO_Init+0x2d0>)
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	492c      	ldr	r1, [pc, #176]	; (8002e4c <HAL_GPIO_Init+0x2d0>)
 8002d9a:	69bb      	ldr	r3, [r7, #24]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	600b      	str	r3, [r1, #0]
 8002da0:	e006      	b.n	8002db0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002da2:	4b2a      	ldr	r3, [pc, #168]	; (8002e4c <HAL_GPIO_Init+0x2d0>)
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	43db      	mvns	r3, r3
 8002daa:	4928      	ldr	r1, [pc, #160]	; (8002e4c <HAL_GPIO_Init+0x2d0>)
 8002dac:	4013      	ands	r3, r2
 8002dae:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d006      	beq.n	8002dca <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002dbc:	4b23      	ldr	r3, [pc, #140]	; (8002e4c <HAL_GPIO_Init+0x2d0>)
 8002dbe:	685a      	ldr	r2, [r3, #4]
 8002dc0:	4922      	ldr	r1, [pc, #136]	; (8002e4c <HAL_GPIO_Init+0x2d0>)
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	604b      	str	r3, [r1, #4]
 8002dc8:	e006      	b.n	8002dd8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002dca:	4b20      	ldr	r3, [pc, #128]	; (8002e4c <HAL_GPIO_Init+0x2d0>)
 8002dcc:	685a      	ldr	r2, [r3, #4]
 8002dce:	69bb      	ldr	r3, [r7, #24]
 8002dd0:	43db      	mvns	r3, r3
 8002dd2:	491e      	ldr	r1, [pc, #120]	; (8002e4c <HAL_GPIO_Init+0x2d0>)
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d006      	beq.n	8002df2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002de4:	4b19      	ldr	r3, [pc, #100]	; (8002e4c <HAL_GPIO_Init+0x2d0>)
 8002de6:	689a      	ldr	r2, [r3, #8]
 8002de8:	4918      	ldr	r1, [pc, #96]	; (8002e4c <HAL_GPIO_Init+0x2d0>)
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	608b      	str	r3, [r1, #8]
 8002df0:	e006      	b.n	8002e00 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002df2:	4b16      	ldr	r3, [pc, #88]	; (8002e4c <HAL_GPIO_Init+0x2d0>)
 8002df4:	689a      	ldr	r2, [r3, #8]
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	43db      	mvns	r3, r3
 8002dfa:	4914      	ldr	r1, [pc, #80]	; (8002e4c <HAL_GPIO_Init+0x2d0>)
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d021      	beq.n	8002e50 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002e0c:	4b0f      	ldr	r3, [pc, #60]	; (8002e4c <HAL_GPIO_Init+0x2d0>)
 8002e0e:	68da      	ldr	r2, [r3, #12]
 8002e10:	490e      	ldr	r1, [pc, #56]	; (8002e4c <HAL_GPIO_Init+0x2d0>)
 8002e12:	69bb      	ldr	r3, [r7, #24]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	60cb      	str	r3, [r1, #12]
 8002e18:	e021      	b.n	8002e5e <HAL_GPIO_Init+0x2e2>
 8002e1a:	bf00      	nop
 8002e1c:	10320000 	.word	0x10320000
 8002e20:	10310000 	.word	0x10310000
 8002e24:	10220000 	.word	0x10220000
 8002e28:	10210000 	.word	0x10210000
 8002e2c:	10120000 	.word	0x10120000
 8002e30:	10110000 	.word	0x10110000
 8002e34:	40021000 	.word	0x40021000
 8002e38:	40010000 	.word	0x40010000
 8002e3c:	40010800 	.word	0x40010800
 8002e40:	40010c00 	.word	0x40010c00
 8002e44:	40011000 	.word	0x40011000
 8002e48:	40011400 	.word	0x40011400
 8002e4c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002e50:	4b0b      	ldr	r3, [pc, #44]	; (8002e80 <HAL_GPIO_Init+0x304>)
 8002e52:	68da      	ldr	r2, [r3, #12]
 8002e54:	69bb      	ldr	r3, [r7, #24]
 8002e56:	43db      	mvns	r3, r3
 8002e58:	4909      	ldr	r1, [pc, #36]	; (8002e80 <HAL_GPIO_Init+0x304>)
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e60:	3301      	adds	r3, #1
 8002e62:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6a:	fa22 f303 	lsr.w	r3, r2, r3
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	f47f ae8e 	bne.w	8002b90 <HAL_GPIO_Init+0x14>
  }
}
 8002e74:	bf00      	nop
 8002e76:	bf00      	nop
 8002e78:	372c      	adds	r7, #44	; 0x2c
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bc80      	pop	{r7}
 8002e7e:	4770      	bx	lr
 8002e80:	40010400 	.word	0x40010400

08002e84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d101      	bne.n	8002e96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e12b      	b.n	80030ee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d106      	bne.n	8002eb0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f7fe fc9c 	bl	80017e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2224      	movs	r2, #36	; 0x24
 8002eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f022 0201 	bic.w	r2, r2, #1
 8002ec6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ed6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ee6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ee8:	f000 fce4 	bl	80038b4 <HAL_RCC_GetPCLK1Freq>
 8002eec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	4a81      	ldr	r2, [pc, #516]	; (80030f8 <HAL_I2C_Init+0x274>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d807      	bhi.n	8002f08 <HAL_I2C_Init+0x84>
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	4a80      	ldr	r2, [pc, #512]	; (80030fc <HAL_I2C_Init+0x278>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	bf94      	ite	ls
 8002f00:	2301      	movls	r3, #1
 8002f02:	2300      	movhi	r3, #0
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	e006      	b.n	8002f16 <HAL_I2C_Init+0x92>
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	4a7d      	ldr	r2, [pc, #500]	; (8003100 <HAL_I2C_Init+0x27c>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	bf94      	ite	ls
 8002f10:	2301      	movls	r3, #1
 8002f12:	2300      	movhi	r3, #0
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d001      	beq.n	8002f1e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e0e7      	b.n	80030ee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	4a78      	ldr	r2, [pc, #480]	; (8003104 <HAL_I2C_Init+0x280>)
 8002f22:	fba2 2303 	umull	r2, r3, r2, r3
 8002f26:	0c9b      	lsrs	r3, r3, #18
 8002f28:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	68ba      	ldr	r2, [r7, #8]
 8002f3a:	430a      	orrs	r2, r1
 8002f3c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	6a1b      	ldr	r3, [r3, #32]
 8002f44:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	4a6a      	ldr	r2, [pc, #424]	; (80030f8 <HAL_I2C_Init+0x274>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d802      	bhi.n	8002f58 <HAL_I2C_Init+0xd4>
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	3301      	adds	r3, #1
 8002f56:	e009      	b.n	8002f6c <HAL_I2C_Init+0xe8>
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002f5e:	fb02 f303 	mul.w	r3, r2, r3
 8002f62:	4a69      	ldr	r2, [pc, #420]	; (8003108 <HAL_I2C_Init+0x284>)
 8002f64:	fba2 2303 	umull	r2, r3, r2, r3
 8002f68:	099b      	lsrs	r3, r3, #6
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	687a      	ldr	r2, [r7, #4]
 8002f6e:	6812      	ldr	r2, [r2, #0]
 8002f70:	430b      	orrs	r3, r1
 8002f72:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	69db      	ldr	r3, [r3, #28]
 8002f7a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002f7e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	495c      	ldr	r1, [pc, #368]	; (80030f8 <HAL_I2C_Init+0x274>)
 8002f88:	428b      	cmp	r3, r1
 8002f8a:	d819      	bhi.n	8002fc0 <HAL_I2C_Init+0x13c>
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	1e59      	subs	r1, r3, #1
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	005b      	lsls	r3, r3, #1
 8002f96:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f9a:	1c59      	adds	r1, r3, #1
 8002f9c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002fa0:	400b      	ands	r3, r1
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d00a      	beq.n	8002fbc <HAL_I2C_Init+0x138>
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	1e59      	subs	r1, r3, #1
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	005b      	lsls	r3, r3, #1
 8002fb0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fb4:	3301      	adds	r3, #1
 8002fb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fba:	e051      	b.n	8003060 <HAL_I2C_Init+0x1dc>
 8002fbc:	2304      	movs	r3, #4
 8002fbe:	e04f      	b.n	8003060 <HAL_I2C_Init+0x1dc>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d111      	bne.n	8002fec <HAL_I2C_Init+0x168>
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	1e58      	subs	r0, r3, #1
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6859      	ldr	r1, [r3, #4]
 8002fd0:	460b      	mov	r3, r1
 8002fd2:	005b      	lsls	r3, r3, #1
 8002fd4:	440b      	add	r3, r1
 8002fd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fda:	3301      	adds	r3, #1
 8002fdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	bf0c      	ite	eq
 8002fe4:	2301      	moveq	r3, #1
 8002fe6:	2300      	movne	r3, #0
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	e012      	b.n	8003012 <HAL_I2C_Init+0x18e>
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	1e58      	subs	r0, r3, #1
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6859      	ldr	r1, [r3, #4]
 8002ff4:	460b      	mov	r3, r1
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	440b      	add	r3, r1
 8002ffa:	0099      	lsls	r1, r3, #2
 8002ffc:	440b      	add	r3, r1
 8002ffe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003002:	3301      	adds	r3, #1
 8003004:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003008:	2b00      	cmp	r3, #0
 800300a:	bf0c      	ite	eq
 800300c:	2301      	moveq	r3, #1
 800300e:	2300      	movne	r3, #0
 8003010:	b2db      	uxtb	r3, r3
 8003012:	2b00      	cmp	r3, #0
 8003014:	d001      	beq.n	800301a <HAL_I2C_Init+0x196>
 8003016:	2301      	movs	r3, #1
 8003018:	e022      	b.n	8003060 <HAL_I2C_Init+0x1dc>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d10e      	bne.n	8003040 <HAL_I2C_Init+0x1bc>
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	1e58      	subs	r0, r3, #1
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6859      	ldr	r1, [r3, #4]
 800302a:	460b      	mov	r3, r1
 800302c:	005b      	lsls	r3, r3, #1
 800302e:	440b      	add	r3, r1
 8003030:	fbb0 f3f3 	udiv	r3, r0, r3
 8003034:	3301      	adds	r3, #1
 8003036:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800303a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800303e:	e00f      	b.n	8003060 <HAL_I2C_Init+0x1dc>
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	1e58      	subs	r0, r3, #1
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6859      	ldr	r1, [r3, #4]
 8003048:	460b      	mov	r3, r1
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	440b      	add	r3, r1
 800304e:	0099      	lsls	r1, r3, #2
 8003050:	440b      	add	r3, r1
 8003052:	fbb0 f3f3 	udiv	r3, r0, r3
 8003056:	3301      	adds	r3, #1
 8003058:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800305c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003060:	6879      	ldr	r1, [r7, #4]
 8003062:	6809      	ldr	r1, [r1, #0]
 8003064:	4313      	orrs	r3, r2
 8003066:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	69da      	ldr	r2, [r3, #28]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6a1b      	ldr	r3, [r3, #32]
 800307a:	431a      	orrs	r2, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	430a      	orrs	r2, r1
 8003082:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800308e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	6911      	ldr	r1, [r2, #16]
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	68d2      	ldr	r2, [r2, #12]
 800309a:	4311      	orrs	r1, r2
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	6812      	ldr	r2, [r2, #0]
 80030a0:	430b      	orrs	r3, r1
 80030a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	695a      	ldr	r2, [r3, #20]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	699b      	ldr	r3, [r3, #24]
 80030b6:	431a      	orrs	r2, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	430a      	orrs	r2, r1
 80030be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f042 0201 	orr.w	r2, r2, #1
 80030ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2220      	movs	r2, #32
 80030da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80030ec:	2300      	movs	r3, #0
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3710      	adds	r7, #16
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	000186a0 	.word	0x000186a0
 80030fc:	001e847f 	.word	0x001e847f
 8003100:	003d08ff 	.word	0x003d08ff
 8003104:	431bde83 	.word	0x431bde83
 8003108:	10624dd3 	.word	0x10624dd3

0800310c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b086      	sub	sp, #24
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d101      	bne.n	800311e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e272      	b.n	8003604 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0301 	and.w	r3, r3, #1
 8003126:	2b00      	cmp	r3, #0
 8003128:	f000 8087 	beq.w	800323a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800312c:	4b92      	ldr	r3, [pc, #584]	; (8003378 <HAL_RCC_OscConfig+0x26c>)
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f003 030c 	and.w	r3, r3, #12
 8003134:	2b04      	cmp	r3, #4
 8003136:	d00c      	beq.n	8003152 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003138:	4b8f      	ldr	r3, [pc, #572]	; (8003378 <HAL_RCC_OscConfig+0x26c>)
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f003 030c 	and.w	r3, r3, #12
 8003140:	2b08      	cmp	r3, #8
 8003142:	d112      	bne.n	800316a <HAL_RCC_OscConfig+0x5e>
 8003144:	4b8c      	ldr	r3, [pc, #560]	; (8003378 <HAL_RCC_OscConfig+0x26c>)
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800314c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003150:	d10b      	bne.n	800316a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003152:	4b89      	ldr	r3, [pc, #548]	; (8003378 <HAL_RCC_OscConfig+0x26c>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d06c      	beq.n	8003238 <HAL_RCC_OscConfig+0x12c>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d168      	bne.n	8003238 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e24c      	b.n	8003604 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003172:	d106      	bne.n	8003182 <HAL_RCC_OscConfig+0x76>
 8003174:	4b80      	ldr	r3, [pc, #512]	; (8003378 <HAL_RCC_OscConfig+0x26c>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a7f      	ldr	r2, [pc, #508]	; (8003378 <HAL_RCC_OscConfig+0x26c>)
 800317a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800317e:	6013      	str	r3, [r2, #0]
 8003180:	e02e      	b.n	80031e0 <HAL_RCC_OscConfig+0xd4>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d10c      	bne.n	80031a4 <HAL_RCC_OscConfig+0x98>
 800318a:	4b7b      	ldr	r3, [pc, #492]	; (8003378 <HAL_RCC_OscConfig+0x26c>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a7a      	ldr	r2, [pc, #488]	; (8003378 <HAL_RCC_OscConfig+0x26c>)
 8003190:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003194:	6013      	str	r3, [r2, #0]
 8003196:	4b78      	ldr	r3, [pc, #480]	; (8003378 <HAL_RCC_OscConfig+0x26c>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a77      	ldr	r2, [pc, #476]	; (8003378 <HAL_RCC_OscConfig+0x26c>)
 800319c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031a0:	6013      	str	r3, [r2, #0]
 80031a2:	e01d      	b.n	80031e0 <HAL_RCC_OscConfig+0xd4>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031ac:	d10c      	bne.n	80031c8 <HAL_RCC_OscConfig+0xbc>
 80031ae:	4b72      	ldr	r3, [pc, #456]	; (8003378 <HAL_RCC_OscConfig+0x26c>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a71      	ldr	r2, [pc, #452]	; (8003378 <HAL_RCC_OscConfig+0x26c>)
 80031b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031b8:	6013      	str	r3, [r2, #0]
 80031ba:	4b6f      	ldr	r3, [pc, #444]	; (8003378 <HAL_RCC_OscConfig+0x26c>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a6e      	ldr	r2, [pc, #440]	; (8003378 <HAL_RCC_OscConfig+0x26c>)
 80031c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031c4:	6013      	str	r3, [r2, #0]
 80031c6:	e00b      	b.n	80031e0 <HAL_RCC_OscConfig+0xd4>
 80031c8:	4b6b      	ldr	r3, [pc, #428]	; (8003378 <HAL_RCC_OscConfig+0x26c>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a6a      	ldr	r2, [pc, #424]	; (8003378 <HAL_RCC_OscConfig+0x26c>)
 80031ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031d2:	6013      	str	r3, [r2, #0]
 80031d4:	4b68      	ldr	r3, [pc, #416]	; (8003378 <HAL_RCC_OscConfig+0x26c>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a67      	ldr	r2, [pc, #412]	; (8003378 <HAL_RCC_OscConfig+0x26c>)
 80031da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031de:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d013      	beq.n	8003210 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031e8:	f7fe fcfc 	bl	8001be4 <HAL_GetTick>
 80031ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ee:	e008      	b.n	8003202 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031f0:	f7fe fcf8 	bl	8001be4 <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	2b64      	cmp	r3, #100	; 0x64
 80031fc:	d901      	bls.n	8003202 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e200      	b.n	8003604 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003202:	4b5d      	ldr	r3, [pc, #372]	; (8003378 <HAL_RCC_OscConfig+0x26c>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d0f0      	beq.n	80031f0 <HAL_RCC_OscConfig+0xe4>
 800320e:	e014      	b.n	800323a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003210:	f7fe fce8 	bl	8001be4 <HAL_GetTick>
 8003214:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003216:	e008      	b.n	800322a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003218:	f7fe fce4 	bl	8001be4 <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	2b64      	cmp	r3, #100	; 0x64
 8003224:	d901      	bls.n	800322a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e1ec      	b.n	8003604 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800322a:	4b53      	ldr	r3, [pc, #332]	; (8003378 <HAL_RCC_OscConfig+0x26c>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d1f0      	bne.n	8003218 <HAL_RCC_OscConfig+0x10c>
 8003236:	e000      	b.n	800323a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003238:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0302 	and.w	r3, r3, #2
 8003242:	2b00      	cmp	r3, #0
 8003244:	d063      	beq.n	800330e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003246:	4b4c      	ldr	r3, [pc, #304]	; (8003378 <HAL_RCC_OscConfig+0x26c>)
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	f003 030c 	and.w	r3, r3, #12
 800324e:	2b00      	cmp	r3, #0
 8003250:	d00b      	beq.n	800326a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003252:	4b49      	ldr	r3, [pc, #292]	; (8003378 <HAL_RCC_OscConfig+0x26c>)
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	f003 030c 	and.w	r3, r3, #12
 800325a:	2b08      	cmp	r3, #8
 800325c:	d11c      	bne.n	8003298 <HAL_RCC_OscConfig+0x18c>
 800325e:	4b46      	ldr	r3, [pc, #280]	; (8003378 <HAL_RCC_OscConfig+0x26c>)
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d116      	bne.n	8003298 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800326a:	4b43      	ldr	r3, [pc, #268]	; (8003378 <HAL_RCC_OscConfig+0x26c>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0302 	and.w	r3, r3, #2
 8003272:	2b00      	cmp	r3, #0
 8003274:	d005      	beq.n	8003282 <HAL_RCC_OscConfig+0x176>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	691b      	ldr	r3, [r3, #16]
 800327a:	2b01      	cmp	r3, #1
 800327c:	d001      	beq.n	8003282 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e1c0      	b.n	8003604 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003282:	4b3d      	ldr	r3, [pc, #244]	; (8003378 <HAL_RCC_OscConfig+0x26c>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	695b      	ldr	r3, [r3, #20]
 800328e:	00db      	lsls	r3, r3, #3
 8003290:	4939      	ldr	r1, [pc, #228]	; (8003378 <HAL_RCC_OscConfig+0x26c>)
 8003292:	4313      	orrs	r3, r2
 8003294:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003296:	e03a      	b.n	800330e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	691b      	ldr	r3, [r3, #16]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d020      	beq.n	80032e2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032a0:	4b36      	ldr	r3, [pc, #216]	; (800337c <HAL_RCC_OscConfig+0x270>)
 80032a2:	2201      	movs	r2, #1
 80032a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032a6:	f7fe fc9d 	bl	8001be4 <HAL_GetTick>
 80032aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032ac:	e008      	b.n	80032c0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032ae:	f7fe fc99 	bl	8001be4 <HAL_GetTick>
 80032b2:	4602      	mov	r2, r0
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d901      	bls.n	80032c0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	e1a1      	b.n	8003604 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032c0:	4b2d      	ldr	r3, [pc, #180]	; (8003378 <HAL_RCC_OscConfig+0x26c>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0302 	and.w	r3, r3, #2
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d0f0      	beq.n	80032ae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032cc:	4b2a      	ldr	r3, [pc, #168]	; (8003378 <HAL_RCC_OscConfig+0x26c>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	695b      	ldr	r3, [r3, #20]
 80032d8:	00db      	lsls	r3, r3, #3
 80032da:	4927      	ldr	r1, [pc, #156]	; (8003378 <HAL_RCC_OscConfig+0x26c>)
 80032dc:	4313      	orrs	r3, r2
 80032de:	600b      	str	r3, [r1, #0]
 80032e0:	e015      	b.n	800330e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032e2:	4b26      	ldr	r3, [pc, #152]	; (800337c <HAL_RCC_OscConfig+0x270>)
 80032e4:	2200      	movs	r2, #0
 80032e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032e8:	f7fe fc7c 	bl	8001be4 <HAL_GetTick>
 80032ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032ee:	e008      	b.n	8003302 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032f0:	f7fe fc78 	bl	8001be4 <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	2b02      	cmp	r3, #2
 80032fc:	d901      	bls.n	8003302 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e180      	b.n	8003604 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003302:	4b1d      	ldr	r3, [pc, #116]	; (8003378 <HAL_RCC_OscConfig+0x26c>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0302 	and.w	r3, r3, #2
 800330a:	2b00      	cmp	r3, #0
 800330c:	d1f0      	bne.n	80032f0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0308 	and.w	r3, r3, #8
 8003316:	2b00      	cmp	r3, #0
 8003318:	d03a      	beq.n	8003390 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	699b      	ldr	r3, [r3, #24]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d019      	beq.n	8003356 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003322:	4b17      	ldr	r3, [pc, #92]	; (8003380 <HAL_RCC_OscConfig+0x274>)
 8003324:	2201      	movs	r2, #1
 8003326:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003328:	f7fe fc5c 	bl	8001be4 <HAL_GetTick>
 800332c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800332e:	e008      	b.n	8003342 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003330:	f7fe fc58 	bl	8001be4 <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	2b02      	cmp	r3, #2
 800333c:	d901      	bls.n	8003342 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800333e:	2303      	movs	r3, #3
 8003340:	e160      	b.n	8003604 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003342:	4b0d      	ldr	r3, [pc, #52]	; (8003378 <HAL_RCC_OscConfig+0x26c>)
 8003344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003346:	f003 0302 	and.w	r3, r3, #2
 800334a:	2b00      	cmp	r3, #0
 800334c:	d0f0      	beq.n	8003330 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800334e:	2001      	movs	r0, #1
 8003350:	f000 fac4 	bl	80038dc <RCC_Delay>
 8003354:	e01c      	b.n	8003390 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003356:	4b0a      	ldr	r3, [pc, #40]	; (8003380 <HAL_RCC_OscConfig+0x274>)
 8003358:	2200      	movs	r2, #0
 800335a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800335c:	f7fe fc42 	bl	8001be4 <HAL_GetTick>
 8003360:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003362:	e00f      	b.n	8003384 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003364:	f7fe fc3e 	bl	8001be4 <HAL_GetTick>
 8003368:	4602      	mov	r2, r0
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	2b02      	cmp	r3, #2
 8003370:	d908      	bls.n	8003384 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003372:	2303      	movs	r3, #3
 8003374:	e146      	b.n	8003604 <HAL_RCC_OscConfig+0x4f8>
 8003376:	bf00      	nop
 8003378:	40021000 	.word	0x40021000
 800337c:	42420000 	.word	0x42420000
 8003380:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003384:	4b92      	ldr	r3, [pc, #584]	; (80035d0 <HAL_RCC_OscConfig+0x4c4>)
 8003386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003388:	f003 0302 	and.w	r3, r3, #2
 800338c:	2b00      	cmp	r3, #0
 800338e:	d1e9      	bne.n	8003364 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0304 	and.w	r3, r3, #4
 8003398:	2b00      	cmp	r3, #0
 800339a:	f000 80a6 	beq.w	80034ea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800339e:	2300      	movs	r3, #0
 80033a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033a2:	4b8b      	ldr	r3, [pc, #556]	; (80035d0 <HAL_RCC_OscConfig+0x4c4>)
 80033a4:	69db      	ldr	r3, [r3, #28]
 80033a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d10d      	bne.n	80033ca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033ae:	4b88      	ldr	r3, [pc, #544]	; (80035d0 <HAL_RCC_OscConfig+0x4c4>)
 80033b0:	69db      	ldr	r3, [r3, #28]
 80033b2:	4a87      	ldr	r2, [pc, #540]	; (80035d0 <HAL_RCC_OscConfig+0x4c4>)
 80033b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033b8:	61d3      	str	r3, [r2, #28]
 80033ba:	4b85      	ldr	r3, [pc, #532]	; (80035d0 <HAL_RCC_OscConfig+0x4c4>)
 80033bc:	69db      	ldr	r3, [r3, #28]
 80033be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033c2:	60bb      	str	r3, [r7, #8]
 80033c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033c6:	2301      	movs	r3, #1
 80033c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033ca:	4b82      	ldr	r3, [pc, #520]	; (80035d4 <HAL_RCC_OscConfig+0x4c8>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d118      	bne.n	8003408 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033d6:	4b7f      	ldr	r3, [pc, #508]	; (80035d4 <HAL_RCC_OscConfig+0x4c8>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a7e      	ldr	r2, [pc, #504]	; (80035d4 <HAL_RCC_OscConfig+0x4c8>)
 80033dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033e2:	f7fe fbff 	bl	8001be4 <HAL_GetTick>
 80033e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033e8:	e008      	b.n	80033fc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033ea:	f7fe fbfb 	bl	8001be4 <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	2b64      	cmp	r3, #100	; 0x64
 80033f6:	d901      	bls.n	80033fc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	e103      	b.n	8003604 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033fc:	4b75      	ldr	r3, [pc, #468]	; (80035d4 <HAL_RCC_OscConfig+0x4c8>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003404:	2b00      	cmp	r3, #0
 8003406:	d0f0      	beq.n	80033ea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	2b01      	cmp	r3, #1
 800340e:	d106      	bne.n	800341e <HAL_RCC_OscConfig+0x312>
 8003410:	4b6f      	ldr	r3, [pc, #444]	; (80035d0 <HAL_RCC_OscConfig+0x4c4>)
 8003412:	6a1b      	ldr	r3, [r3, #32]
 8003414:	4a6e      	ldr	r2, [pc, #440]	; (80035d0 <HAL_RCC_OscConfig+0x4c4>)
 8003416:	f043 0301 	orr.w	r3, r3, #1
 800341a:	6213      	str	r3, [r2, #32]
 800341c:	e02d      	b.n	800347a <HAL_RCC_OscConfig+0x36e>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d10c      	bne.n	8003440 <HAL_RCC_OscConfig+0x334>
 8003426:	4b6a      	ldr	r3, [pc, #424]	; (80035d0 <HAL_RCC_OscConfig+0x4c4>)
 8003428:	6a1b      	ldr	r3, [r3, #32]
 800342a:	4a69      	ldr	r2, [pc, #420]	; (80035d0 <HAL_RCC_OscConfig+0x4c4>)
 800342c:	f023 0301 	bic.w	r3, r3, #1
 8003430:	6213      	str	r3, [r2, #32]
 8003432:	4b67      	ldr	r3, [pc, #412]	; (80035d0 <HAL_RCC_OscConfig+0x4c4>)
 8003434:	6a1b      	ldr	r3, [r3, #32]
 8003436:	4a66      	ldr	r2, [pc, #408]	; (80035d0 <HAL_RCC_OscConfig+0x4c4>)
 8003438:	f023 0304 	bic.w	r3, r3, #4
 800343c:	6213      	str	r3, [r2, #32]
 800343e:	e01c      	b.n	800347a <HAL_RCC_OscConfig+0x36e>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	2b05      	cmp	r3, #5
 8003446:	d10c      	bne.n	8003462 <HAL_RCC_OscConfig+0x356>
 8003448:	4b61      	ldr	r3, [pc, #388]	; (80035d0 <HAL_RCC_OscConfig+0x4c4>)
 800344a:	6a1b      	ldr	r3, [r3, #32]
 800344c:	4a60      	ldr	r2, [pc, #384]	; (80035d0 <HAL_RCC_OscConfig+0x4c4>)
 800344e:	f043 0304 	orr.w	r3, r3, #4
 8003452:	6213      	str	r3, [r2, #32]
 8003454:	4b5e      	ldr	r3, [pc, #376]	; (80035d0 <HAL_RCC_OscConfig+0x4c4>)
 8003456:	6a1b      	ldr	r3, [r3, #32]
 8003458:	4a5d      	ldr	r2, [pc, #372]	; (80035d0 <HAL_RCC_OscConfig+0x4c4>)
 800345a:	f043 0301 	orr.w	r3, r3, #1
 800345e:	6213      	str	r3, [r2, #32]
 8003460:	e00b      	b.n	800347a <HAL_RCC_OscConfig+0x36e>
 8003462:	4b5b      	ldr	r3, [pc, #364]	; (80035d0 <HAL_RCC_OscConfig+0x4c4>)
 8003464:	6a1b      	ldr	r3, [r3, #32]
 8003466:	4a5a      	ldr	r2, [pc, #360]	; (80035d0 <HAL_RCC_OscConfig+0x4c4>)
 8003468:	f023 0301 	bic.w	r3, r3, #1
 800346c:	6213      	str	r3, [r2, #32]
 800346e:	4b58      	ldr	r3, [pc, #352]	; (80035d0 <HAL_RCC_OscConfig+0x4c4>)
 8003470:	6a1b      	ldr	r3, [r3, #32]
 8003472:	4a57      	ldr	r2, [pc, #348]	; (80035d0 <HAL_RCC_OscConfig+0x4c4>)
 8003474:	f023 0304 	bic.w	r3, r3, #4
 8003478:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d015      	beq.n	80034ae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003482:	f7fe fbaf 	bl	8001be4 <HAL_GetTick>
 8003486:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003488:	e00a      	b.n	80034a0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800348a:	f7fe fbab 	bl	8001be4 <HAL_GetTick>
 800348e:	4602      	mov	r2, r0
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	f241 3288 	movw	r2, #5000	; 0x1388
 8003498:	4293      	cmp	r3, r2
 800349a:	d901      	bls.n	80034a0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800349c:	2303      	movs	r3, #3
 800349e:	e0b1      	b.n	8003604 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034a0:	4b4b      	ldr	r3, [pc, #300]	; (80035d0 <HAL_RCC_OscConfig+0x4c4>)
 80034a2:	6a1b      	ldr	r3, [r3, #32]
 80034a4:	f003 0302 	and.w	r3, r3, #2
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d0ee      	beq.n	800348a <HAL_RCC_OscConfig+0x37e>
 80034ac:	e014      	b.n	80034d8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034ae:	f7fe fb99 	bl	8001be4 <HAL_GetTick>
 80034b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034b4:	e00a      	b.n	80034cc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034b6:	f7fe fb95 	bl	8001be4 <HAL_GetTick>
 80034ba:	4602      	mov	r2, r0
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d901      	bls.n	80034cc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80034c8:	2303      	movs	r3, #3
 80034ca:	e09b      	b.n	8003604 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034cc:	4b40      	ldr	r3, [pc, #256]	; (80035d0 <HAL_RCC_OscConfig+0x4c4>)
 80034ce:	6a1b      	ldr	r3, [r3, #32]
 80034d0:	f003 0302 	and.w	r3, r3, #2
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d1ee      	bne.n	80034b6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80034d8:	7dfb      	ldrb	r3, [r7, #23]
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d105      	bne.n	80034ea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034de:	4b3c      	ldr	r3, [pc, #240]	; (80035d0 <HAL_RCC_OscConfig+0x4c4>)
 80034e0:	69db      	ldr	r3, [r3, #28]
 80034e2:	4a3b      	ldr	r2, [pc, #236]	; (80035d0 <HAL_RCC_OscConfig+0x4c4>)
 80034e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034e8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	69db      	ldr	r3, [r3, #28]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	f000 8087 	beq.w	8003602 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034f4:	4b36      	ldr	r3, [pc, #216]	; (80035d0 <HAL_RCC_OscConfig+0x4c4>)
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f003 030c 	and.w	r3, r3, #12
 80034fc:	2b08      	cmp	r3, #8
 80034fe:	d061      	beq.n	80035c4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	69db      	ldr	r3, [r3, #28]
 8003504:	2b02      	cmp	r3, #2
 8003506:	d146      	bne.n	8003596 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003508:	4b33      	ldr	r3, [pc, #204]	; (80035d8 <HAL_RCC_OscConfig+0x4cc>)
 800350a:	2200      	movs	r2, #0
 800350c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800350e:	f7fe fb69 	bl	8001be4 <HAL_GetTick>
 8003512:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003514:	e008      	b.n	8003528 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003516:	f7fe fb65 	bl	8001be4 <HAL_GetTick>
 800351a:	4602      	mov	r2, r0
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	2b02      	cmp	r3, #2
 8003522:	d901      	bls.n	8003528 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	e06d      	b.n	8003604 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003528:	4b29      	ldr	r3, [pc, #164]	; (80035d0 <HAL_RCC_OscConfig+0x4c4>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003530:	2b00      	cmp	r3, #0
 8003532:	d1f0      	bne.n	8003516 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6a1b      	ldr	r3, [r3, #32]
 8003538:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800353c:	d108      	bne.n	8003550 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800353e:	4b24      	ldr	r3, [pc, #144]	; (80035d0 <HAL_RCC_OscConfig+0x4c4>)
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	4921      	ldr	r1, [pc, #132]	; (80035d0 <HAL_RCC_OscConfig+0x4c4>)
 800354c:	4313      	orrs	r3, r2
 800354e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003550:	4b1f      	ldr	r3, [pc, #124]	; (80035d0 <HAL_RCC_OscConfig+0x4c4>)
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6a19      	ldr	r1, [r3, #32]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003560:	430b      	orrs	r3, r1
 8003562:	491b      	ldr	r1, [pc, #108]	; (80035d0 <HAL_RCC_OscConfig+0x4c4>)
 8003564:	4313      	orrs	r3, r2
 8003566:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003568:	4b1b      	ldr	r3, [pc, #108]	; (80035d8 <HAL_RCC_OscConfig+0x4cc>)
 800356a:	2201      	movs	r2, #1
 800356c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800356e:	f7fe fb39 	bl	8001be4 <HAL_GetTick>
 8003572:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003574:	e008      	b.n	8003588 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003576:	f7fe fb35 	bl	8001be4 <HAL_GetTick>
 800357a:	4602      	mov	r2, r0
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	2b02      	cmp	r3, #2
 8003582:	d901      	bls.n	8003588 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003584:	2303      	movs	r3, #3
 8003586:	e03d      	b.n	8003604 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003588:	4b11      	ldr	r3, [pc, #68]	; (80035d0 <HAL_RCC_OscConfig+0x4c4>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d0f0      	beq.n	8003576 <HAL_RCC_OscConfig+0x46a>
 8003594:	e035      	b.n	8003602 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003596:	4b10      	ldr	r3, [pc, #64]	; (80035d8 <HAL_RCC_OscConfig+0x4cc>)
 8003598:	2200      	movs	r2, #0
 800359a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800359c:	f7fe fb22 	bl	8001be4 <HAL_GetTick>
 80035a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035a2:	e008      	b.n	80035b6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035a4:	f7fe fb1e 	bl	8001be4 <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d901      	bls.n	80035b6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e026      	b.n	8003604 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035b6:	4b06      	ldr	r3, [pc, #24]	; (80035d0 <HAL_RCC_OscConfig+0x4c4>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d1f0      	bne.n	80035a4 <HAL_RCC_OscConfig+0x498>
 80035c2:	e01e      	b.n	8003602 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	69db      	ldr	r3, [r3, #28]
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d107      	bne.n	80035dc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	e019      	b.n	8003604 <HAL_RCC_OscConfig+0x4f8>
 80035d0:	40021000 	.word	0x40021000
 80035d4:	40007000 	.word	0x40007000
 80035d8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80035dc:	4b0b      	ldr	r3, [pc, #44]	; (800360c <HAL_RCC_OscConfig+0x500>)
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6a1b      	ldr	r3, [r3, #32]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d106      	bne.n	80035fe <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d001      	beq.n	8003602 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e000      	b.n	8003604 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003602:	2300      	movs	r3, #0
}
 8003604:	4618      	mov	r0, r3
 8003606:	3718      	adds	r7, #24
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}
 800360c:	40021000 	.word	0x40021000

08003610 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b084      	sub	sp, #16
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d101      	bne.n	8003624 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e0d0      	b.n	80037c6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003624:	4b6a      	ldr	r3, [pc, #424]	; (80037d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 0307 	and.w	r3, r3, #7
 800362c:	683a      	ldr	r2, [r7, #0]
 800362e:	429a      	cmp	r2, r3
 8003630:	d910      	bls.n	8003654 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003632:	4b67      	ldr	r3, [pc, #412]	; (80037d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f023 0207 	bic.w	r2, r3, #7
 800363a:	4965      	ldr	r1, [pc, #404]	; (80037d0 <HAL_RCC_ClockConfig+0x1c0>)
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	4313      	orrs	r3, r2
 8003640:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003642:	4b63      	ldr	r3, [pc, #396]	; (80037d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0307 	and.w	r3, r3, #7
 800364a:	683a      	ldr	r2, [r7, #0]
 800364c:	429a      	cmp	r2, r3
 800364e:	d001      	beq.n	8003654 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e0b8      	b.n	80037c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0302 	and.w	r3, r3, #2
 800365c:	2b00      	cmp	r3, #0
 800365e:	d020      	beq.n	80036a2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 0304 	and.w	r3, r3, #4
 8003668:	2b00      	cmp	r3, #0
 800366a:	d005      	beq.n	8003678 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800366c:	4b59      	ldr	r3, [pc, #356]	; (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	4a58      	ldr	r2, [pc, #352]	; (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003672:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003676:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0308 	and.w	r3, r3, #8
 8003680:	2b00      	cmp	r3, #0
 8003682:	d005      	beq.n	8003690 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003684:	4b53      	ldr	r3, [pc, #332]	; (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	4a52      	ldr	r2, [pc, #328]	; (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 800368a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800368e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003690:	4b50      	ldr	r3, [pc, #320]	; (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	494d      	ldr	r1, [pc, #308]	; (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 800369e:	4313      	orrs	r3, r2
 80036a0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 0301 	and.w	r3, r3, #1
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d040      	beq.n	8003730 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d107      	bne.n	80036c6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036b6:	4b47      	ldr	r3, [pc, #284]	; (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d115      	bne.n	80036ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e07f      	b.n	80037c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d107      	bne.n	80036de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036ce:	4b41      	ldr	r3, [pc, #260]	; (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d109      	bne.n	80036ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e073      	b.n	80037c6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036de:	4b3d      	ldr	r3, [pc, #244]	; (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0302 	and.w	r3, r3, #2
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d101      	bne.n	80036ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e06b      	b.n	80037c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036ee:	4b39      	ldr	r3, [pc, #228]	; (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	f023 0203 	bic.w	r2, r3, #3
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	4936      	ldr	r1, [pc, #216]	; (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 80036fc:	4313      	orrs	r3, r2
 80036fe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003700:	f7fe fa70 	bl	8001be4 <HAL_GetTick>
 8003704:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003706:	e00a      	b.n	800371e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003708:	f7fe fa6c 	bl	8001be4 <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	f241 3288 	movw	r2, #5000	; 0x1388
 8003716:	4293      	cmp	r3, r2
 8003718:	d901      	bls.n	800371e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e053      	b.n	80037c6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800371e:	4b2d      	ldr	r3, [pc, #180]	; (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	f003 020c 	and.w	r2, r3, #12
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	429a      	cmp	r2, r3
 800372e:	d1eb      	bne.n	8003708 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003730:	4b27      	ldr	r3, [pc, #156]	; (80037d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0307 	and.w	r3, r3, #7
 8003738:	683a      	ldr	r2, [r7, #0]
 800373a:	429a      	cmp	r2, r3
 800373c:	d210      	bcs.n	8003760 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800373e:	4b24      	ldr	r3, [pc, #144]	; (80037d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f023 0207 	bic.w	r2, r3, #7
 8003746:	4922      	ldr	r1, [pc, #136]	; (80037d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	4313      	orrs	r3, r2
 800374c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800374e:	4b20      	ldr	r3, [pc, #128]	; (80037d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0307 	and.w	r3, r3, #7
 8003756:	683a      	ldr	r2, [r7, #0]
 8003758:	429a      	cmp	r2, r3
 800375a:	d001      	beq.n	8003760 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e032      	b.n	80037c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0304 	and.w	r3, r3, #4
 8003768:	2b00      	cmp	r3, #0
 800376a:	d008      	beq.n	800377e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800376c:	4b19      	ldr	r3, [pc, #100]	; (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	4916      	ldr	r1, [pc, #88]	; (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 800377a:	4313      	orrs	r3, r2
 800377c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0308 	and.w	r3, r3, #8
 8003786:	2b00      	cmp	r3, #0
 8003788:	d009      	beq.n	800379e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800378a:	4b12      	ldr	r3, [pc, #72]	; (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	691b      	ldr	r3, [r3, #16]
 8003796:	00db      	lsls	r3, r3, #3
 8003798:	490e      	ldr	r1, [pc, #56]	; (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 800379a:	4313      	orrs	r3, r2
 800379c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800379e:	f000 f821 	bl	80037e4 <HAL_RCC_GetSysClockFreq>
 80037a2:	4602      	mov	r2, r0
 80037a4:	4b0b      	ldr	r3, [pc, #44]	; (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	091b      	lsrs	r3, r3, #4
 80037aa:	f003 030f 	and.w	r3, r3, #15
 80037ae:	490a      	ldr	r1, [pc, #40]	; (80037d8 <HAL_RCC_ClockConfig+0x1c8>)
 80037b0:	5ccb      	ldrb	r3, [r1, r3]
 80037b2:	fa22 f303 	lsr.w	r3, r2, r3
 80037b6:	4a09      	ldr	r2, [pc, #36]	; (80037dc <HAL_RCC_ClockConfig+0x1cc>)
 80037b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80037ba:	4b09      	ldr	r3, [pc, #36]	; (80037e0 <HAL_RCC_ClockConfig+0x1d0>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4618      	mov	r0, r3
 80037c0:	f7fe f9ce 	bl	8001b60 <HAL_InitTick>

  return HAL_OK;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3710      	adds	r7, #16
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	40022000 	.word	0x40022000
 80037d4:	40021000 	.word	0x40021000
 80037d8:	080067a8 	.word	0x080067a8
 80037dc:	20000000 	.word	0x20000000
 80037e0:	20000004 	.word	0x20000004

080037e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037e4:	b490      	push	{r4, r7}
 80037e6:	b08a      	sub	sp, #40	; 0x28
 80037e8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80037ea:	4b29      	ldr	r3, [pc, #164]	; (8003890 <HAL_RCC_GetSysClockFreq+0xac>)
 80037ec:	1d3c      	adds	r4, r7, #4
 80037ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80037f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80037f4:	f240 2301 	movw	r3, #513	; 0x201
 80037f8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80037fa:	2300      	movs	r3, #0
 80037fc:	61fb      	str	r3, [r7, #28]
 80037fe:	2300      	movs	r3, #0
 8003800:	61bb      	str	r3, [r7, #24]
 8003802:	2300      	movs	r3, #0
 8003804:	627b      	str	r3, [r7, #36]	; 0x24
 8003806:	2300      	movs	r3, #0
 8003808:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800380a:	2300      	movs	r3, #0
 800380c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800380e:	4b21      	ldr	r3, [pc, #132]	; (8003894 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	f003 030c 	and.w	r3, r3, #12
 800381a:	2b04      	cmp	r3, #4
 800381c:	d002      	beq.n	8003824 <HAL_RCC_GetSysClockFreq+0x40>
 800381e:	2b08      	cmp	r3, #8
 8003820:	d003      	beq.n	800382a <HAL_RCC_GetSysClockFreq+0x46>
 8003822:	e02b      	b.n	800387c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003824:	4b1c      	ldr	r3, [pc, #112]	; (8003898 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003826:	623b      	str	r3, [r7, #32]
      break;
 8003828:	e02b      	b.n	8003882 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	0c9b      	lsrs	r3, r3, #18
 800382e:	f003 030f 	and.w	r3, r3, #15
 8003832:	3328      	adds	r3, #40	; 0x28
 8003834:	443b      	add	r3, r7
 8003836:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800383a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800383c:	69fb      	ldr	r3, [r7, #28]
 800383e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d012      	beq.n	800386c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003846:	4b13      	ldr	r3, [pc, #76]	; (8003894 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	0c5b      	lsrs	r3, r3, #17
 800384c:	f003 0301 	and.w	r3, r3, #1
 8003850:	3328      	adds	r3, #40	; 0x28
 8003852:	443b      	add	r3, r7
 8003854:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003858:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	4a0e      	ldr	r2, [pc, #56]	; (8003898 <HAL_RCC_GetSysClockFreq+0xb4>)
 800385e:	fb03 f202 	mul.w	r2, r3, r2
 8003862:	69bb      	ldr	r3, [r7, #24]
 8003864:	fbb2 f3f3 	udiv	r3, r2, r3
 8003868:	627b      	str	r3, [r7, #36]	; 0x24
 800386a:	e004      	b.n	8003876 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	4a0b      	ldr	r2, [pc, #44]	; (800389c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003870:	fb02 f303 	mul.w	r3, r2, r3
 8003874:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003878:	623b      	str	r3, [r7, #32]
      break;
 800387a:	e002      	b.n	8003882 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800387c:	4b06      	ldr	r3, [pc, #24]	; (8003898 <HAL_RCC_GetSysClockFreq+0xb4>)
 800387e:	623b      	str	r3, [r7, #32]
      break;
 8003880:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003882:	6a3b      	ldr	r3, [r7, #32]
}
 8003884:	4618      	mov	r0, r3
 8003886:	3728      	adds	r7, #40	; 0x28
 8003888:	46bd      	mov	sp, r7
 800388a:	bc90      	pop	{r4, r7}
 800388c:	4770      	bx	lr
 800388e:	bf00      	nop
 8003890:	08006798 	.word	0x08006798
 8003894:	40021000 	.word	0x40021000
 8003898:	007a1200 	.word	0x007a1200
 800389c:	003d0900 	.word	0x003d0900

080038a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038a0:	b480      	push	{r7}
 80038a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038a4:	4b02      	ldr	r3, [pc, #8]	; (80038b0 <HAL_RCC_GetHCLKFreq+0x10>)
 80038a6:	681b      	ldr	r3, [r3, #0]
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bc80      	pop	{r7}
 80038ae:	4770      	bx	lr
 80038b0:	20000000 	.word	0x20000000

080038b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80038b8:	f7ff fff2 	bl	80038a0 <HAL_RCC_GetHCLKFreq>
 80038bc:	4602      	mov	r2, r0
 80038be:	4b05      	ldr	r3, [pc, #20]	; (80038d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	0a1b      	lsrs	r3, r3, #8
 80038c4:	f003 0307 	and.w	r3, r3, #7
 80038c8:	4903      	ldr	r1, [pc, #12]	; (80038d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038ca:	5ccb      	ldrb	r3, [r1, r3]
 80038cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	40021000 	.word	0x40021000
 80038d8:	080067b8 	.word	0x080067b8

080038dc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80038dc:	b480      	push	{r7}
 80038de:	b085      	sub	sp, #20
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80038e4:	4b0a      	ldr	r3, [pc, #40]	; (8003910 <RCC_Delay+0x34>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a0a      	ldr	r2, [pc, #40]	; (8003914 <RCC_Delay+0x38>)
 80038ea:	fba2 2303 	umull	r2, r3, r2, r3
 80038ee:	0a5b      	lsrs	r3, r3, #9
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	fb02 f303 	mul.w	r3, r2, r3
 80038f6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80038f8:	bf00      	nop
  }
  while (Delay --);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	1e5a      	subs	r2, r3, #1
 80038fe:	60fa      	str	r2, [r7, #12]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d1f9      	bne.n	80038f8 <RCC_Delay+0x1c>
}
 8003904:	bf00      	nop
 8003906:	bf00      	nop
 8003908:	3714      	adds	r7, #20
 800390a:	46bd      	mov	sp, r7
 800390c:	bc80      	pop	{r7}
 800390e:	4770      	bx	lr
 8003910:	20000000 	.word	0x20000000
 8003914:	10624dd3 	.word	0x10624dd3

08003918 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b086      	sub	sp, #24
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003920:	2300      	movs	r3, #0
 8003922:	613b      	str	r3, [r7, #16]
 8003924:	2300      	movs	r3, #0
 8003926:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 0301 	and.w	r3, r3, #1
 8003930:	2b00      	cmp	r3, #0
 8003932:	d07d      	beq.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003934:	2300      	movs	r3, #0
 8003936:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003938:	4b4f      	ldr	r3, [pc, #316]	; (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800393a:	69db      	ldr	r3, [r3, #28]
 800393c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003940:	2b00      	cmp	r3, #0
 8003942:	d10d      	bne.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003944:	4b4c      	ldr	r3, [pc, #304]	; (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003946:	69db      	ldr	r3, [r3, #28]
 8003948:	4a4b      	ldr	r2, [pc, #300]	; (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800394a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800394e:	61d3      	str	r3, [r2, #28]
 8003950:	4b49      	ldr	r3, [pc, #292]	; (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003952:	69db      	ldr	r3, [r3, #28]
 8003954:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003958:	60bb      	str	r3, [r7, #8]
 800395a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800395c:	2301      	movs	r3, #1
 800395e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003960:	4b46      	ldr	r3, [pc, #280]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003968:	2b00      	cmp	r3, #0
 800396a:	d118      	bne.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800396c:	4b43      	ldr	r3, [pc, #268]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a42      	ldr	r2, [pc, #264]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003972:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003976:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003978:	f7fe f934 	bl	8001be4 <HAL_GetTick>
 800397c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800397e:	e008      	b.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003980:	f7fe f930 	bl	8001be4 <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	2b64      	cmp	r3, #100	; 0x64
 800398c:	d901      	bls.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800398e:	2303      	movs	r3, #3
 8003990:	e06d      	b.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003992:	4b3a      	ldr	r3, [pc, #232]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800399a:	2b00      	cmp	r3, #0
 800399c:	d0f0      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800399e:	4b36      	ldr	r3, [pc, #216]	; (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039a0:	6a1b      	ldr	r3, [r3, #32]
 80039a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039a6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d02e      	beq.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039b6:	68fa      	ldr	r2, [r7, #12]
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d027      	beq.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80039bc:	4b2e      	ldr	r3, [pc, #184]	; (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039be:	6a1b      	ldr	r3, [r3, #32]
 80039c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039c4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80039c6:	4b2e      	ldr	r3, [pc, #184]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80039c8:	2201      	movs	r2, #1
 80039ca:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80039cc:	4b2c      	ldr	r3, [pc, #176]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80039ce:	2200      	movs	r2, #0
 80039d0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80039d2:	4a29      	ldr	r2, [pc, #164]	; (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f003 0301 	and.w	r3, r3, #1
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d014      	beq.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039e2:	f7fe f8ff 	bl	8001be4 <HAL_GetTick>
 80039e6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039e8:	e00a      	b.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039ea:	f7fe f8fb 	bl	8001be4 <HAL_GetTick>
 80039ee:	4602      	mov	r2, r0
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	1ad3      	subs	r3, r2, r3
 80039f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d901      	bls.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80039fc:	2303      	movs	r3, #3
 80039fe:	e036      	b.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a00:	4b1d      	ldr	r3, [pc, #116]	; (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a02:	6a1b      	ldr	r3, [r3, #32]
 8003a04:	f003 0302 	and.w	r3, r3, #2
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d0ee      	beq.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a0c:	4b1a      	ldr	r3, [pc, #104]	; (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a0e:	6a1b      	ldr	r3, [r3, #32]
 8003a10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	4917      	ldr	r1, [pc, #92]	; (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003a1e:	7dfb      	ldrb	r3, [r7, #23]
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d105      	bne.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a24:	4b14      	ldr	r3, [pc, #80]	; (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a26:	69db      	ldr	r3, [r3, #28]
 8003a28:	4a13      	ldr	r2, [pc, #76]	; (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a2e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0302 	and.w	r3, r3, #2
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d008      	beq.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a3c:	4b0e      	ldr	r3, [pc, #56]	; (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	490b      	ldr	r1, [pc, #44]	; (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 0310 	and.w	r3, r3, #16
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d008      	beq.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a5a:	4b07      	ldr	r3, [pc, #28]	; (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	4904      	ldr	r1, [pc, #16]	; (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003a6c:	2300      	movs	r3, #0
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3718      	adds	r7, #24
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	40021000 	.word	0x40021000
 8003a7c:	40007000 	.word	0x40007000
 8003a80:	42420440 	.word	0x42420440

08003a84 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b082      	sub	sp, #8
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d101      	bne.n	8003a96 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e076      	b.n	8003b84 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d108      	bne.n	8003ab0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003aa6:	d009      	beq.n	8003abc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	61da      	str	r2, [r3, #28]
 8003aae:	e005      	b.n	8003abc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d106      	bne.n	8003adc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f7fd fec4 	bl	8001864 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2202      	movs	r2, #2
 8003ae0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003af2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003b04:	431a      	orrs	r2, r3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b0e:	431a      	orrs	r2, r3
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	691b      	ldr	r3, [r3, #16]
 8003b14:	f003 0302 	and.w	r3, r3, #2
 8003b18:	431a      	orrs	r2, r3
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	695b      	ldr	r3, [r3, #20]
 8003b1e:	f003 0301 	and.w	r3, r3, #1
 8003b22:	431a      	orrs	r2, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	699b      	ldr	r3, [r3, #24]
 8003b28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b2c:	431a      	orrs	r2, r3
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	69db      	ldr	r3, [r3, #28]
 8003b32:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b36:	431a      	orrs	r2, r3
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6a1b      	ldr	r3, [r3, #32]
 8003b3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b40:	ea42 0103 	orr.w	r1, r2, r3
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b48:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	430a      	orrs	r2, r1
 8003b52:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	699b      	ldr	r3, [r3, #24]
 8003b58:	0c1a      	lsrs	r2, r3, #16
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f002 0204 	and.w	r2, r2, #4
 8003b62:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	69da      	ldr	r2, [r3, #28]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b72:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2200      	movs	r2, #0
 8003b78:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003b82:	2300      	movs	r3, #0
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3708      	adds	r7, #8
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}

08003b8c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8003b90:	4904      	ldr	r1, [pc, #16]	; (8003ba4 <MX_FATFS_Init+0x18>)
 8003b92:	4805      	ldr	r0, [pc, #20]	; (8003ba8 <MX_FATFS_Init+0x1c>)
 8003b94:	f000 f8a6 	bl	8003ce4 <FATFS_LinkDriver>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	4b03      	ldr	r3, [pc, #12]	; (8003bac <MX_FATFS_Init+0x20>)
 8003b9e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8003ba0:	bf00      	nop
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	20000378 	.word	0x20000378
 8003ba8:	2000000c 	.word	0x2000000c
 8003bac:	20000374 	.word	0x20000374

08003bb0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8003bba:	4b05      	ldr	r3, [pc, #20]	; (8003bd0 <USER_initialize+0x20>)
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	701a      	strb	r2, [r3, #0]
    return Stat;
 8003bc0:	4b03      	ldr	r3, [pc, #12]	; (8003bd0 <USER_initialize+0x20>)
 8003bc2:	781b      	ldrb	r3, [r3, #0]
 8003bc4:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	370c      	adds	r7, #12
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bc80      	pop	{r7}
 8003bce:	4770      	bx	lr
 8003bd0:	20000009 	.word	0x20000009

08003bd4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	4603      	mov	r3, r0
 8003bdc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8003bde:	4b05      	ldr	r3, [pc, #20]	; (8003bf4 <USER_status+0x20>)
 8003be0:	2201      	movs	r2, #1
 8003be2:	701a      	strb	r2, [r3, #0]
    return Stat;
 8003be4:	4b03      	ldr	r3, [pc, #12]	; (8003bf4 <USER_status+0x20>)
 8003be6:	781b      	ldrb	r3, [r3, #0]
 8003be8:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	370c      	adds	r7, #12
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bc80      	pop	{r7}
 8003bf2:	4770      	bx	lr
 8003bf4:	20000009 	.word	0x20000009

08003bf8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b085      	sub	sp, #20
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	60b9      	str	r1, [r7, #8]
 8003c00:	607a      	str	r2, [r7, #4]
 8003c02:	603b      	str	r3, [r7, #0]
 8003c04:	4603      	mov	r3, r0
 8003c06:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8003c08:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3714      	adds	r7, #20
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bc80      	pop	{r7}
 8003c12:	4770      	bx	lr

08003c14 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b085      	sub	sp, #20
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	60b9      	str	r1, [r7, #8]
 8003c1c:	607a      	str	r2, [r7, #4]
 8003c1e:	603b      	str	r3, [r7, #0]
 8003c20:	4603      	mov	r3, r0
 8003c22:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8003c24:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3714      	adds	r7, #20
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bc80      	pop	{r7}
 8003c2e:	4770      	bx	lr

08003c30 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b085      	sub	sp, #20
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	4603      	mov	r3, r0
 8003c38:	603a      	str	r2, [r7, #0]
 8003c3a:	71fb      	strb	r3, [r7, #7]
 8003c3c:	460b      	mov	r3, r1
 8003c3e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	73fb      	strb	r3, [r7, #15]
    return res;
 8003c44:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3714      	adds	r7, #20
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bc80      	pop	{r7}
 8003c4e:	4770      	bx	lr

08003c50 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b087      	sub	sp, #28
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	60f8      	str	r0, [r7, #12]
 8003c58:	60b9      	str	r1, [r7, #8]
 8003c5a:	4613      	mov	r3, r2
 8003c5c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8003c62:	2300      	movs	r3, #0
 8003c64:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8003c66:	4b1e      	ldr	r3, [pc, #120]	; (8003ce0 <FATFS_LinkDriverEx+0x90>)
 8003c68:	7a5b      	ldrb	r3, [r3, #9]
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d831      	bhi.n	8003cd4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8003c70:	4b1b      	ldr	r3, [pc, #108]	; (8003ce0 <FATFS_LinkDriverEx+0x90>)
 8003c72:	7a5b      	ldrb	r3, [r3, #9]
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	461a      	mov	r2, r3
 8003c78:	4b19      	ldr	r3, [pc, #100]	; (8003ce0 <FATFS_LinkDriverEx+0x90>)
 8003c7a:	2100      	movs	r1, #0
 8003c7c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8003c7e:	4b18      	ldr	r3, [pc, #96]	; (8003ce0 <FATFS_LinkDriverEx+0x90>)
 8003c80:	7a5b      	ldrb	r3, [r3, #9]
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	4a16      	ldr	r2, [pc, #88]	; (8003ce0 <FATFS_LinkDriverEx+0x90>)
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	4413      	add	r3, r2
 8003c8a:	68fa      	ldr	r2, [r7, #12]
 8003c8c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8003c8e:	4b14      	ldr	r3, [pc, #80]	; (8003ce0 <FATFS_LinkDriverEx+0x90>)
 8003c90:	7a5b      	ldrb	r3, [r3, #9]
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	461a      	mov	r2, r3
 8003c96:	4b12      	ldr	r3, [pc, #72]	; (8003ce0 <FATFS_LinkDriverEx+0x90>)
 8003c98:	4413      	add	r3, r2
 8003c9a:	79fa      	ldrb	r2, [r7, #7]
 8003c9c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8003c9e:	4b10      	ldr	r3, [pc, #64]	; (8003ce0 <FATFS_LinkDriverEx+0x90>)
 8003ca0:	7a5b      	ldrb	r3, [r3, #9]
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	1c5a      	adds	r2, r3, #1
 8003ca6:	b2d1      	uxtb	r1, r2
 8003ca8:	4a0d      	ldr	r2, [pc, #52]	; (8003ce0 <FATFS_LinkDriverEx+0x90>)
 8003caa:	7251      	strb	r1, [r2, #9]
 8003cac:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8003cae:	7dbb      	ldrb	r3, [r7, #22]
 8003cb0:	3330      	adds	r3, #48	; 0x30
 8003cb2:	b2da      	uxtb	r2, r3
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	3301      	adds	r3, #1
 8003cbc:	223a      	movs	r2, #58	; 0x3a
 8003cbe:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	3302      	adds	r3, #2
 8003cc4:	222f      	movs	r2, #47	; 0x2f
 8003cc6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	3303      	adds	r3, #3
 8003ccc:	2200      	movs	r2, #0
 8003cce:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8003cd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	371c      	adds	r7, #28
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bc80      	pop	{r7}
 8003cde:	4770      	bx	lr
 8003ce0:	2000037c 	.word	0x2000037c

08003ce4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b082      	sub	sp, #8
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8003cee:	2200      	movs	r2, #0
 8003cf0:	6839      	ldr	r1, [r7, #0]
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f7ff ffac 	bl	8003c50 <FATFS_LinkDriverEx>
 8003cf8:	4603      	mov	r3, r0
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3708      	adds	r7, #8
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
	...

08003d04 <__errno>:
 8003d04:	4b01      	ldr	r3, [pc, #4]	; (8003d0c <__errno+0x8>)
 8003d06:	6818      	ldr	r0, [r3, #0]
 8003d08:	4770      	bx	lr
 8003d0a:	bf00      	nop
 8003d0c:	20000020 	.word	0x20000020

08003d10 <__libc_init_array>:
 8003d10:	b570      	push	{r4, r5, r6, lr}
 8003d12:	2600      	movs	r6, #0
 8003d14:	4d0c      	ldr	r5, [pc, #48]	; (8003d48 <__libc_init_array+0x38>)
 8003d16:	4c0d      	ldr	r4, [pc, #52]	; (8003d4c <__libc_init_array+0x3c>)
 8003d18:	1b64      	subs	r4, r4, r5
 8003d1a:	10a4      	asrs	r4, r4, #2
 8003d1c:	42a6      	cmp	r6, r4
 8003d1e:	d109      	bne.n	8003d34 <__libc_init_array+0x24>
 8003d20:	f002 fd2e 	bl	8006780 <_init>
 8003d24:	2600      	movs	r6, #0
 8003d26:	4d0a      	ldr	r5, [pc, #40]	; (8003d50 <__libc_init_array+0x40>)
 8003d28:	4c0a      	ldr	r4, [pc, #40]	; (8003d54 <__libc_init_array+0x44>)
 8003d2a:	1b64      	subs	r4, r4, r5
 8003d2c:	10a4      	asrs	r4, r4, #2
 8003d2e:	42a6      	cmp	r6, r4
 8003d30:	d105      	bne.n	8003d3e <__libc_init_array+0x2e>
 8003d32:	bd70      	pop	{r4, r5, r6, pc}
 8003d34:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d38:	4798      	blx	r3
 8003d3a:	3601      	adds	r6, #1
 8003d3c:	e7ee      	b.n	8003d1c <__libc_init_array+0xc>
 8003d3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d42:	4798      	blx	r3
 8003d44:	3601      	adds	r6, #1
 8003d46:	e7f2      	b.n	8003d2e <__libc_init_array+0x1e>
 8003d48:	08006b9c 	.word	0x08006b9c
 8003d4c:	08006b9c 	.word	0x08006b9c
 8003d50:	08006b9c 	.word	0x08006b9c
 8003d54:	08006ba0 	.word	0x08006ba0

08003d58 <memset>:
 8003d58:	4603      	mov	r3, r0
 8003d5a:	4402      	add	r2, r0
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d100      	bne.n	8003d62 <memset+0xa>
 8003d60:	4770      	bx	lr
 8003d62:	f803 1b01 	strb.w	r1, [r3], #1
 8003d66:	e7f9      	b.n	8003d5c <memset+0x4>

08003d68 <__cvt>:
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d6e:	461f      	mov	r7, r3
 8003d70:	bfbb      	ittet	lt
 8003d72:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003d76:	461f      	movlt	r7, r3
 8003d78:	2300      	movge	r3, #0
 8003d7a:	232d      	movlt	r3, #45	; 0x2d
 8003d7c:	b088      	sub	sp, #32
 8003d7e:	4614      	mov	r4, r2
 8003d80:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003d82:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003d84:	7013      	strb	r3, [r2, #0]
 8003d86:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003d88:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8003d8c:	f023 0820 	bic.w	r8, r3, #32
 8003d90:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003d94:	d005      	beq.n	8003da2 <__cvt+0x3a>
 8003d96:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003d9a:	d100      	bne.n	8003d9e <__cvt+0x36>
 8003d9c:	3501      	adds	r5, #1
 8003d9e:	2302      	movs	r3, #2
 8003da0:	e000      	b.n	8003da4 <__cvt+0x3c>
 8003da2:	2303      	movs	r3, #3
 8003da4:	aa07      	add	r2, sp, #28
 8003da6:	9204      	str	r2, [sp, #16]
 8003da8:	aa06      	add	r2, sp, #24
 8003daa:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003dae:	e9cd 3500 	strd	r3, r5, [sp]
 8003db2:	4622      	mov	r2, r4
 8003db4:	463b      	mov	r3, r7
 8003db6:	f000 fcc3 	bl	8004740 <_dtoa_r>
 8003dba:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003dbe:	4606      	mov	r6, r0
 8003dc0:	d102      	bne.n	8003dc8 <__cvt+0x60>
 8003dc2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003dc4:	07db      	lsls	r3, r3, #31
 8003dc6:	d522      	bpl.n	8003e0e <__cvt+0xa6>
 8003dc8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003dcc:	eb06 0905 	add.w	r9, r6, r5
 8003dd0:	d110      	bne.n	8003df4 <__cvt+0x8c>
 8003dd2:	7833      	ldrb	r3, [r6, #0]
 8003dd4:	2b30      	cmp	r3, #48	; 0x30
 8003dd6:	d10a      	bne.n	8003dee <__cvt+0x86>
 8003dd8:	2200      	movs	r2, #0
 8003dda:	2300      	movs	r3, #0
 8003ddc:	4620      	mov	r0, r4
 8003dde:	4639      	mov	r1, r7
 8003de0:	f7fc fde2 	bl	80009a8 <__aeabi_dcmpeq>
 8003de4:	b918      	cbnz	r0, 8003dee <__cvt+0x86>
 8003de6:	f1c5 0501 	rsb	r5, r5, #1
 8003dea:	f8ca 5000 	str.w	r5, [sl]
 8003dee:	f8da 3000 	ldr.w	r3, [sl]
 8003df2:	4499      	add	r9, r3
 8003df4:	2200      	movs	r2, #0
 8003df6:	2300      	movs	r3, #0
 8003df8:	4620      	mov	r0, r4
 8003dfa:	4639      	mov	r1, r7
 8003dfc:	f7fc fdd4 	bl	80009a8 <__aeabi_dcmpeq>
 8003e00:	b108      	cbz	r0, 8003e06 <__cvt+0x9e>
 8003e02:	f8cd 901c 	str.w	r9, [sp, #28]
 8003e06:	2230      	movs	r2, #48	; 0x30
 8003e08:	9b07      	ldr	r3, [sp, #28]
 8003e0a:	454b      	cmp	r3, r9
 8003e0c:	d307      	bcc.n	8003e1e <__cvt+0xb6>
 8003e0e:	4630      	mov	r0, r6
 8003e10:	9b07      	ldr	r3, [sp, #28]
 8003e12:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003e14:	1b9b      	subs	r3, r3, r6
 8003e16:	6013      	str	r3, [r2, #0]
 8003e18:	b008      	add	sp, #32
 8003e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e1e:	1c59      	adds	r1, r3, #1
 8003e20:	9107      	str	r1, [sp, #28]
 8003e22:	701a      	strb	r2, [r3, #0]
 8003e24:	e7f0      	b.n	8003e08 <__cvt+0xa0>

08003e26 <__exponent>:
 8003e26:	4603      	mov	r3, r0
 8003e28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003e2a:	2900      	cmp	r1, #0
 8003e2c:	f803 2b02 	strb.w	r2, [r3], #2
 8003e30:	bfb6      	itet	lt
 8003e32:	222d      	movlt	r2, #45	; 0x2d
 8003e34:	222b      	movge	r2, #43	; 0x2b
 8003e36:	4249      	neglt	r1, r1
 8003e38:	2909      	cmp	r1, #9
 8003e3a:	7042      	strb	r2, [r0, #1]
 8003e3c:	dd2b      	ble.n	8003e96 <__exponent+0x70>
 8003e3e:	f10d 0407 	add.w	r4, sp, #7
 8003e42:	46a4      	mov	ip, r4
 8003e44:	270a      	movs	r7, #10
 8003e46:	fb91 f6f7 	sdiv	r6, r1, r7
 8003e4a:	460a      	mov	r2, r1
 8003e4c:	46a6      	mov	lr, r4
 8003e4e:	fb07 1516 	mls	r5, r7, r6, r1
 8003e52:	2a63      	cmp	r2, #99	; 0x63
 8003e54:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8003e58:	4631      	mov	r1, r6
 8003e5a:	f104 34ff 	add.w	r4, r4, #4294967295
 8003e5e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003e62:	dcf0      	bgt.n	8003e46 <__exponent+0x20>
 8003e64:	3130      	adds	r1, #48	; 0x30
 8003e66:	f1ae 0502 	sub.w	r5, lr, #2
 8003e6a:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003e6e:	4629      	mov	r1, r5
 8003e70:	1c44      	adds	r4, r0, #1
 8003e72:	4561      	cmp	r1, ip
 8003e74:	d30a      	bcc.n	8003e8c <__exponent+0x66>
 8003e76:	f10d 0209 	add.w	r2, sp, #9
 8003e7a:	eba2 020e 	sub.w	r2, r2, lr
 8003e7e:	4565      	cmp	r5, ip
 8003e80:	bf88      	it	hi
 8003e82:	2200      	movhi	r2, #0
 8003e84:	4413      	add	r3, r2
 8003e86:	1a18      	subs	r0, r3, r0
 8003e88:	b003      	add	sp, #12
 8003e8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e8c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003e90:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003e94:	e7ed      	b.n	8003e72 <__exponent+0x4c>
 8003e96:	2330      	movs	r3, #48	; 0x30
 8003e98:	3130      	adds	r1, #48	; 0x30
 8003e9a:	7083      	strb	r3, [r0, #2]
 8003e9c:	70c1      	strb	r1, [r0, #3]
 8003e9e:	1d03      	adds	r3, r0, #4
 8003ea0:	e7f1      	b.n	8003e86 <__exponent+0x60>
	...

08003ea4 <_printf_float>:
 8003ea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ea8:	b091      	sub	sp, #68	; 0x44
 8003eaa:	460c      	mov	r4, r1
 8003eac:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8003eb0:	4616      	mov	r6, r2
 8003eb2:	461f      	mov	r7, r3
 8003eb4:	4605      	mov	r5, r0
 8003eb6:	f001 fa31 	bl	800531c <_localeconv_r>
 8003eba:	6803      	ldr	r3, [r0, #0]
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	9309      	str	r3, [sp, #36]	; 0x24
 8003ec0:	f7fc f946 	bl	8000150 <strlen>
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	930e      	str	r3, [sp, #56]	; 0x38
 8003ec8:	f8d8 3000 	ldr.w	r3, [r8]
 8003ecc:	900a      	str	r0, [sp, #40]	; 0x28
 8003ece:	3307      	adds	r3, #7
 8003ed0:	f023 0307 	bic.w	r3, r3, #7
 8003ed4:	f103 0208 	add.w	r2, r3, #8
 8003ed8:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003edc:	f8d4 b000 	ldr.w	fp, [r4]
 8003ee0:	f8c8 2000 	str.w	r2, [r8]
 8003ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ee8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003eec:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8003ef0:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8003ef4:	930b      	str	r3, [sp, #44]	; 0x2c
 8003ef6:	f04f 32ff 	mov.w	r2, #4294967295
 8003efa:	4640      	mov	r0, r8
 8003efc:	4b9c      	ldr	r3, [pc, #624]	; (8004170 <_printf_float+0x2cc>)
 8003efe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003f00:	f7fc fd84 	bl	8000a0c <__aeabi_dcmpun>
 8003f04:	bb70      	cbnz	r0, 8003f64 <_printf_float+0xc0>
 8003f06:	f04f 32ff 	mov.w	r2, #4294967295
 8003f0a:	4640      	mov	r0, r8
 8003f0c:	4b98      	ldr	r3, [pc, #608]	; (8004170 <_printf_float+0x2cc>)
 8003f0e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003f10:	f7fc fd5e 	bl	80009d0 <__aeabi_dcmple>
 8003f14:	bb30      	cbnz	r0, 8003f64 <_printf_float+0xc0>
 8003f16:	2200      	movs	r2, #0
 8003f18:	2300      	movs	r3, #0
 8003f1a:	4640      	mov	r0, r8
 8003f1c:	4651      	mov	r1, sl
 8003f1e:	f7fc fd4d 	bl	80009bc <__aeabi_dcmplt>
 8003f22:	b110      	cbz	r0, 8003f2a <_printf_float+0x86>
 8003f24:	232d      	movs	r3, #45	; 0x2d
 8003f26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f2a:	4b92      	ldr	r3, [pc, #584]	; (8004174 <_printf_float+0x2d0>)
 8003f2c:	4892      	ldr	r0, [pc, #584]	; (8004178 <_printf_float+0x2d4>)
 8003f2e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8003f32:	bf94      	ite	ls
 8003f34:	4698      	movls	r8, r3
 8003f36:	4680      	movhi	r8, r0
 8003f38:	2303      	movs	r3, #3
 8003f3a:	f04f 0a00 	mov.w	sl, #0
 8003f3e:	6123      	str	r3, [r4, #16]
 8003f40:	f02b 0304 	bic.w	r3, fp, #4
 8003f44:	6023      	str	r3, [r4, #0]
 8003f46:	4633      	mov	r3, r6
 8003f48:	4621      	mov	r1, r4
 8003f4a:	4628      	mov	r0, r5
 8003f4c:	9700      	str	r7, [sp, #0]
 8003f4e:	aa0f      	add	r2, sp, #60	; 0x3c
 8003f50:	f000 f9d4 	bl	80042fc <_printf_common>
 8003f54:	3001      	adds	r0, #1
 8003f56:	f040 8090 	bne.w	800407a <_printf_float+0x1d6>
 8003f5a:	f04f 30ff 	mov.w	r0, #4294967295
 8003f5e:	b011      	add	sp, #68	; 0x44
 8003f60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f64:	4642      	mov	r2, r8
 8003f66:	4653      	mov	r3, sl
 8003f68:	4640      	mov	r0, r8
 8003f6a:	4651      	mov	r1, sl
 8003f6c:	f7fc fd4e 	bl	8000a0c <__aeabi_dcmpun>
 8003f70:	b148      	cbz	r0, 8003f86 <_printf_float+0xe2>
 8003f72:	f1ba 0f00 	cmp.w	sl, #0
 8003f76:	bfb8      	it	lt
 8003f78:	232d      	movlt	r3, #45	; 0x2d
 8003f7a:	4880      	ldr	r0, [pc, #512]	; (800417c <_printf_float+0x2d8>)
 8003f7c:	bfb8      	it	lt
 8003f7e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003f82:	4b7f      	ldr	r3, [pc, #508]	; (8004180 <_printf_float+0x2dc>)
 8003f84:	e7d3      	b.n	8003f2e <_printf_float+0x8a>
 8003f86:	6863      	ldr	r3, [r4, #4]
 8003f88:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8003f8c:	1c5a      	adds	r2, r3, #1
 8003f8e:	d142      	bne.n	8004016 <_printf_float+0x172>
 8003f90:	2306      	movs	r3, #6
 8003f92:	6063      	str	r3, [r4, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	9206      	str	r2, [sp, #24]
 8003f98:	aa0e      	add	r2, sp, #56	; 0x38
 8003f9a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8003f9e:	aa0d      	add	r2, sp, #52	; 0x34
 8003fa0:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8003fa4:	9203      	str	r2, [sp, #12]
 8003fa6:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8003faa:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003fae:	6023      	str	r3, [r4, #0]
 8003fb0:	6863      	ldr	r3, [r4, #4]
 8003fb2:	4642      	mov	r2, r8
 8003fb4:	9300      	str	r3, [sp, #0]
 8003fb6:	4628      	mov	r0, r5
 8003fb8:	4653      	mov	r3, sl
 8003fba:	910b      	str	r1, [sp, #44]	; 0x2c
 8003fbc:	f7ff fed4 	bl	8003d68 <__cvt>
 8003fc0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003fc2:	4680      	mov	r8, r0
 8003fc4:	2947      	cmp	r1, #71	; 0x47
 8003fc6:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003fc8:	d108      	bne.n	8003fdc <_printf_float+0x138>
 8003fca:	1cc8      	adds	r0, r1, #3
 8003fcc:	db02      	blt.n	8003fd4 <_printf_float+0x130>
 8003fce:	6863      	ldr	r3, [r4, #4]
 8003fd0:	4299      	cmp	r1, r3
 8003fd2:	dd40      	ble.n	8004056 <_printf_float+0x1b2>
 8003fd4:	f1a9 0902 	sub.w	r9, r9, #2
 8003fd8:	fa5f f989 	uxtb.w	r9, r9
 8003fdc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003fe0:	d81f      	bhi.n	8004022 <_printf_float+0x17e>
 8003fe2:	464a      	mov	r2, r9
 8003fe4:	3901      	subs	r1, #1
 8003fe6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003fea:	910d      	str	r1, [sp, #52]	; 0x34
 8003fec:	f7ff ff1b 	bl	8003e26 <__exponent>
 8003ff0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003ff2:	4682      	mov	sl, r0
 8003ff4:	1813      	adds	r3, r2, r0
 8003ff6:	2a01      	cmp	r2, #1
 8003ff8:	6123      	str	r3, [r4, #16]
 8003ffa:	dc02      	bgt.n	8004002 <_printf_float+0x15e>
 8003ffc:	6822      	ldr	r2, [r4, #0]
 8003ffe:	07d2      	lsls	r2, r2, #31
 8004000:	d501      	bpl.n	8004006 <_printf_float+0x162>
 8004002:	3301      	adds	r3, #1
 8004004:	6123      	str	r3, [r4, #16]
 8004006:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800400a:	2b00      	cmp	r3, #0
 800400c:	d09b      	beq.n	8003f46 <_printf_float+0xa2>
 800400e:	232d      	movs	r3, #45	; 0x2d
 8004010:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004014:	e797      	b.n	8003f46 <_printf_float+0xa2>
 8004016:	2947      	cmp	r1, #71	; 0x47
 8004018:	d1bc      	bne.n	8003f94 <_printf_float+0xf0>
 800401a:	2b00      	cmp	r3, #0
 800401c:	d1ba      	bne.n	8003f94 <_printf_float+0xf0>
 800401e:	2301      	movs	r3, #1
 8004020:	e7b7      	b.n	8003f92 <_printf_float+0xee>
 8004022:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004026:	d118      	bne.n	800405a <_printf_float+0x1b6>
 8004028:	2900      	cmp	r1, #0
 800402a:	6863      	ldr	r3, [r4, #4]
 800402c:	dd0b      	ble.n	8004046 <_printf_float+0x1a2>
 800402e:	6121      	str	r1, [r4, #16]
 8004030:	b913      	cbnz	r3, 8004038 <_printf_float+0x194>
 8004032:	6822      	ldr	r2, [r4, #0]
 8004034:	07d0      	lsls	r0, r2, #31
 8004036:	d502      	bpl.n	800403e <_printf_float+0x19a>
 8004038:	3301      	adds	r3, #1
 800403a:	440b      	add	r3, r1
 800403c:	6123      	str	r3, [r4, #16]
 800403e:	f04f 0a00 	mov.w	sl, #0
 8004042:	65a1      	str	r1, [r4, #88]	; 0x58
 8004044:	e7df      	b.n	8004006 <_printf_float+0x162>
 8004046:	b913      	cbnz	r3, 800404e <_printf_float+0x1aa>
 8004048:	6822      	ldr	r2, [r4, #0]
 800404a:	07d2      	lsls	r2, r2, #31
 800404c:	d501      	bpl.n	8004052 <_printf_float+0x1ae>
 800404e:	3302      	adds	r3, #2
 8004050:	e7f4      	b.n	800403c <_printf_float+0x198>
 8004052:	2301      	movs	r3, #1
 8004054:	e7f2      	b.n	800403c <_printf_float+0x198>
 8004056:	f04f 0967 	mov.w	r9, #103	; 0x67
 800405a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800405c:	4299      	cmp	r1, r3
 800405e:	db05      	blt.n	800406c <_printf_float+0x1c8>
 8004060:	6823      	ldr	r3, [r4, #0]
 8004062:	6121      	str	r1, [r4, #16]
 8004064:	07d8      	lsls	r0, r3, #31
 8004066:	d5ea      	bpl.n	800403e <_printf_float+0x19a>
 8004068:	1c4b      	adds	r3, r1, #1
 800406a:	e7e7      	b.n	800403c <_printf_float+0x198>
 800406c:	2900      	cmp	r1, #0
 800406e:	bfcc      	ite	gt
 8004070:	2201      	movgt	r2, #1
 8004072:	f1c1 0202 	rsble	r2, r1, #2
 8004076:	4413      	add	r3, r2
 8004078:	e7e0      	b.n	800403c <_printf_float+0x198>
 800407a:	6823      	ldr	r3, [r4, #0]
 800407c:	055a      	lsls	r2, r3, #21
 800407e:	d407      	bmi.n	8004090 <_printf_float+0x1ec>
 8004080:	6923      	ldr	r3, [r4, #16]
 8004082:	4642      	mov	r2, r8
 8004084:	4631      	mov	r1, r6
 8004086:	4628      	mov	r0, r5
 8004088:	47b8      	blx	r7
 800408a:	3001      	adds	r0, #1
 800408c:	d12b      	bne.n	80040e6 <_printf_float+0x242>
 800408e:	e764      	b.n	8003f5a <_printf_float+0xb6>
 8004090:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004094:	f240 80dd 	bls.w	8004252 <_printf_float+0x3ae>
 8004098:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800409c:	2200      	movs	r2, #0
 800409e:	2300      	movs	r3, #0
 80040a0:	f7fc fc82 	bl	80009a8 <__aeabi_dcmpeq>
 80040a4:	2800      	cmp	r0, #0
 80040a6:	d033      	beq.n	8004110 <_printf_float+0x26c>
 80040a8:	2301      	movs	r3, #1
 80040aa:	4631      	mov	r1, r6
 80040ac:	4628      	mov	r0, r5
 80040ae:	4a35      	ldr	r2, [pc, #212]	; (8004184 <_printf_float+0x2e0>)
 80040b0:	47b8      	blx	r7
 80040b2:	3001      	adds	r0, #1
 80040b4:	f43f af51 	beq.w	8003f5a <_printf_float+0xb6>
 80040b8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80040bc:	429a      	cmp	r2, r3
 80040be:	db02      	blt.n	80040c6 <_printf_float+0x222>
 80040c0:	6823      	ldr	r3, [r4, #0]
 80040c2:	07d8      	lsls	r0, r3, #31
 80040c4:	d50f      	bpl.n	80040e6 <_printf_float+0x242>
 80040c6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80040ca:	4631      	mov	r1, r6
 80040cc:	4628      	mov	r0, r5
 80040ce:	47b8      	blx	r7
 80040d0:	3001      	adds	r0, #1
 80040d2:	f43f af42 	beq.w	8003f5a <_printf_float+0xb6>
 80040d6:	f04f 0800 	mov.w	r8, #0
 80040da:	f104 091a 	add.w	r9, r4, #26
 80040de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80040e0:	3b01      	subs	r3, #1
 80040e2:	4543      	cmp	r3, r8
 80040e4:	dc09      	bgt.n	80040fa <_printf_float+0x256>
 80040e6:	6823      	ldr	r3, [r4, #0]
 80040e8:	079b      	lsls	r3, r3, #30
 80040ea:	f100 8102 	bmi.w	80042f2 <_printf_float+0x44e>
 80040ee:	68e0      	ldr	r0, [r4, #12]
 80040f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80040f2:	4298      	cmp	r0, r3
 80040f4:	bfb8      	it	lt
 80040f6:	4618      	movlt	r0, r3
 80040f8:	e731      	b.n	8003f5e <_printf_float+0xba>
 80040fa:	2301      	movs	r3, #1
 80040fc:	464a      	mov	r2, r9
 80040fe:	4631      	mov	r1, r6
 8004100:	4628      	mov	r0, r5
 8004102:	47b8      	blx	r7
 8004104:	3001      	adds	r0, #1
 8004106:	f43f af28 	beq.w	8003f5a <_printf_float+0xb6>
 800410a:	f108 0801 	add.w	r8, r8, #1
 800410e:	e7e6      	b.n	80040de <_printf_float+0x23a>
 8004110:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004112:	2b00      	cmp	r3, #0
 8004114:	dc38      	bgt.n	8004188 <_printf_float+0x2e4>
 8004116:	2301      	movs	r3, #1
 8004118:	4631      	mov	r1, r6
 800411a:	4628      	mov	r0, r5
 800411c:	4a19      	ldr	r2, [pc, #100]	; (8004184 <_printf_float+0x2e0>)
 800411e:	47b8      	blx	r7
 8004120:	3001      	adds	r0, #1
 8004122:	f43f af1a 	beq.w	8003f5a <_printf_float+0xb6>
 8004126:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800412a:	4313      	orrs	r3, r2
 800412c:	d102      	bne.n	8004134 <_printf_float+0x290>
 800412e:	6823      	ldr	r3, [r4, #0]
 8004130:	07d9      	lsls	r1, r3, #31
 8004132:	d5d8      	bpl.n	80040e6 <_printf_float+0x242>
 8004134:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004138:	4631      	mov	r1, r6
 800413a:	4628      	mov	r0, r5
 800413c:	47b8      	blx	r7
 800413e:	3001      	adds	r0, #1
 8004140:	f43f af0b 	beq.w	8003f5a <_printf_float+0xb6>
 8004144:	f04f 0900 	mov.w	r9, #0
 8004148:	f104 0a1a 	add.w	sl, r4, #26
 800414c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800414e:	425b      	negs	r3, r3
 8004150:	454b      	cmp	r3, r9
 8004152:	dc01      	bgt.n	8004158 <_printf_float+0x2b4>
 8004154:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004156:	e794      	b.n	8004082 <_printf_float+0x1de>
 8004158:	2301      	movs	r3, #1
 800415a:	4652      	mov	r2, sl
 800415c:	4631      	mov	r1, r6
 800415e:	4628      	mov	r0, r5
 8004160:	47b8      	blx	r7
 8004162:	3001      	adds	r0, #1
 8004164:	f43f aef9 	beq.w	8003f5a <_printf_float+0xb6>
 8004168:	f109 0901 	add.w	r9, r9, #1
 800416c:	e7ee      	b.n	800414c <_printf_float+0x2a8>
 800416e:	bf00      	nop
 8004170:	7fefffff 	.word	0x7fefffff
 8004174:	080067c4 	.word	0x080067c4
 8004178:	080067c8 	.word	0x080067c8
 800417c:	080067d0 	.word	0x080067d0
 8004180:	080067cc 	.word	0x080067cc
 8004184:	080067d4 	.word	0x080067d4
 8004188:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800418a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800418c:	429a      	cmp	r2, r3
 800418e:	bfa8      	it	ge
 8004190:	461a      	movge	r2, r3
 8004192:	2a00      	cmp	r2, #0
 8004194:	4691      	mov	r9, r2
 8004196:	dc37      	bgt.n	8004208 <_printf_float+0x364>
 8004198:	f04f 0b00 	mov.w	fp, #0
 800419c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80041a0:	f104 021a 	add.w	r2, r4, #26
 80041a4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80041a8:	ebaa 0309 	sub.w	r3, sl, r9
 80041ac:	455b      	cmp	r3, fp
 80041ae:	dc33      	bgt.n	8004218 <_printf_float+0x374>
 80041b0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80041b4:	429a      	cmp	r2, r3
 80041b6:	db3b      	blt.n	8004230 <_printf_float+0x38c>
 80041b8:	6823      	ldr	r3, [r4, #0]
 80041ba:	07da      	lsls	r2, r3, #31
 80041bc:	d438      	bmi.n	8004230 <_printf_float+0x38c>
 80041be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80041c0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80041c2:	eba3 020a 	sub.w	r2, r3, sl
 80041c6:	eba3 0901 	sub.w	r9, r3, r1
 80041ca:	4591      	cmp	r9, r2
 80041cc:	bfa8      	it	ge
 80041ce:	4691      	movge	r9, r2
 80041d0:	f1b9 0f00 	cmp.w	r9, #0
 80041d4:	dc34      	bgt.n	8004240 <_printf_float+0x39c>
 80041d6:	f04f 0800 	mov.w	r8, #0
 80041da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80041de:	f104 0a1a 	add.w	sl, r4, #26
 80041e2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80041e6:	1a9b      	subs	r3, r3, r2
 80041e8:	eba3 0309 	sub.w	r3, r3, r9
 80041ec:	4543      	cmp	r3, r8
 80041ee:	f77f af7a 	ble.w	80040e6 <_printf_float+0x242>
 80041f2:	2301      	movs	r3, #1
 80041f4:	4652      	mov	r2, sl
 80041f6:	4631      	mov	r1, r6
 80041f8:	4628      	mov	r0, r5
 80041fa:	47b8      	blx	r7
 80041fc:	3001      	adds	r0, #1
 80041fe:	f43f aeac 	beq.w	8003f5a <_printf_float+0xb6>
 8004202:	f108 0801 	add.w	r8, r8, #1
 8004206:	e7ec      	b.n	80041e2 <_printf_float+0x33e>
 8004208:	4613      	mov	r3, r2
 800420a:	4631      	mov	r1, r6
 800420c:	4642      	mov	r2, r8
 800420e:	4628      	mov	r0, r5
 8004210:	47b8      	blx	r7
 8004212:	3001      	adds	r0, #1
 8004214:	d1c0      	bne.n	8004198 <_printf_float+0x2f4>
 8004216:	e6a0      	b.n	8003f5a <_printf_float+0xb6>
 8004218:	2301      	movs	r3, #1
 800421a:	4631      	mov	r1, r6
 800421c:	4628      	mov	r0, r5
 800421e:	920b      	str	r2, [sp, #44]	; 0x2c
 8004220:	47b8      	blx	r7
 8004222:	3001      	adds	r0, #1
 8004224:	f43f ae99 	beq.w	8003f5a <_printf_float+0xb6>
 8004228:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800422a:	f10b 0b01 	add.w	fp, fp, #1
 800422e:	e7b9      	b.n	80041a4 <_printf_float+0x300>
 8004230:	4631      	mov	r1, r6
 8004232:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004236:	4628      	mov	r0, r5
 8004238:	47b8      	blx	r7
 800423a:	3001      	adds	r0, #1
 800423c:	d1bf      	bne.n	80041be <_printf_float+0x31a>
 800423e:	e68c      	b.n	8003f5a <_printf_float+0xb6>
 8004240:	464b      	mov	r3, r9
 8004242:	4631      	mov	r1, r6
 8004244:	4628      	mov	r0, r5
 8004246:	eb08 020a 	add.w	r2, r8, sl
 800424a:	47b8      	blx	r7
 800424c:	3001      	adds	r0, #1
 800424e:	d1c2      	bne.n	80041d6 <_printf_float+0x332>
 8004250:	e683      	b.n	8003f5a <_printf_float+0xb6>
 8004252:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004254:	2a01      	cmp	r2, #1
 8004256:	dc01      	bgt.n	800425c <_printf_float+0x3b8>
 8004258:	07db      	lsls	r3, r3, #31
 800425a:	d537      	bpl.n	80042cc <_printf_float+0x428>
 800425c:	2301      	movs	r3, #1
 800425e:	4642      	mov	r2, r8
 8004260:	4631      	mov	r1, r6
 8004262:	4628      	mov	r0, r5
 8004264:	47b8      	blx	r7
 8004266:	3001      	adds	r0, #1
 8004268:	f43f ae77 	beq.w	8003f5a <_printf_float+0xb6>
 800426c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004270:	4631      	mov	r1, r6
 8004272:	4628      	mov	r0, r5
 8004274:	47b8      	blx	r7
 8004276:	3001      	adds	r0, #1
 8004278:	f43f ae6f 	beq.w	8003f5a <_printf_float+0xb6>
 800427c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004280:	2200      	movs	r2, #0
 8004282:	2300      	movs	r3, #0
 8004284:	f7fc fb90 	bl	80009a8 <__aeabi_dcmpeq>
 8004288:	b9d8      	cbnz	r0, 80042c2 <_printf_float+0x41e>
 800428a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800428c:	f108 0201 	add.w	r2, r8, #1
 8004290:	3b01      	subs	r3, #1
 8004292:	4631      	mov	r1, r6
 8004294:	4628      	mov	r0, r5
 8004296:	47b8      	blx	r7
 8004298:	3001      	adds	r0, #1
 800429a:	d10e      	bne.n	80042ba <_printf_float+0x416>
 800429c:	e65d      	b.n	8003f5a <_printf_float+0xb6>
 800429e:	2301      	movs	r3, #1
 80042a0:	464a      	mov	r2, r9
 80042a2:	4631      	mov	r1, r6
 80042a4:	4628      	mov	r0, r5
 80042a6:	47b8      	blx	r7
 80042a8:	3001      	adds	r0, #1
 80042aa:	f43f ae56 	beq.w	8003f5a <_printf_float+0xb6>
 80042ae:	f108 0801 	add.w	r8, r8, #1
 80042b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80042b4:	3b01      	subs	r3, #1
 80042b6:	4543      	cmp	r3, r8
 80042b8:	dcf1      	bgt.n	800429e <_printf_float+0x3fa>
 80042ba:	4653      	mov	r3, sl
 80042bc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80042c0:	e6e0      	b.n	8004084 <_printf_float+0x1e0>
 80042c2:	f04f 0800 	mov.w	r8, #0
 80042c6:	f104 091a 	add.w	r9, r4, #26
 80042ca:	e7f2      	b.n	80042b2 <_printf_float+0x40e>
 80042cc:	2301      	movs	r3, #1
 80042ce:	4642      	mov	r2, r8
 80042d0:	e7df      	b.n	8004292 <_printf_float+0x3ee>
 80042d2:	2301      	movs	r3, #1
 80042d4:	464a      	mov	r2, r9
 80042d6:	4631      	mov	r1, r6
 80042d8:	4628      	mov	r0, r5
 80042da:	47b8      	blx	r7
 80042dc:	3001      	adds	r0, #1
 80042de:	f43f ae3c 	beq.w	8003f5a <_printf_float+0xb6>
 80042e2:	f108 0801 	add.w	r8, r8, #1
 80042e6:	68e3      	ldr	r3, [r4, #12]
 80042e8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80042ea:	1a5b      	subs	r3, r3, r1
 80042ec:	4543      	cmp	r3, r8
 80042ee:	dcf0      	bgt.n	80042d2 <_printf_float+0x42e>
 80042f0:	e6fd      	b.n	80040ee <_printf_float+0x24a>
 80042f2:	f04f 0800 	mov.w	r8, #0
 80042f6:	f104 0919 	add.w	r9, r4, #25
 80042fa:	e7f4      	b.n	80042e6 <_printf_float+0x442>

080042fc <_printf_common>:
 80042fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004300:	4616      	mov	r6, r2
 8004302:	4699      	mov	r9, r3
 8004304:	688a      	ldr	r2, [r1, #8]
 8004306:	690b      	ldr	r3, [r1, #16]
 8004308:	4607      	mov	r7, r0
 800430a:	4293      	cmp	r3, r2
 800430c:	bfb8      	it	lt
 800430e:	4613      	movlt	r3, r2
 8004310:	6033      	str	r3, [r6, #0]
 8004312:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004316:	460c      	mov	r4, r1
 8004318:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800431c:	b10a      	cbz	r2, 8004322 <_printf_common+0x26>
 800431e:	3301      	adds	r3, #1
 8004320:	6033      	str	r3, [r6, #0]
 8004322:	6823      	ldr	r3, [r4, #0]
 8004324:	0699      	lsls	r1, r3, #26
 8004326:	bf42      	ittt	mi
 8004328:	6833      	ldrmi	r3, [r6, #0]
 800432a:	3302      	addmi	r3, #2
 800432c:	6033      	strmi	r3, [r6, #0]
 800432e:	6825      	ldr	r5, [r4, #0]
 8004330:	f015 0506 	ands.w	r5, r5, #6
 8004334:	d106      	bne.n	8004344 <_printf_common+0x48>
 8004336:	f104 0a19 	add.w	sl, r4, #25
 800433a:	68e3      	ldr	r3, [r4, #12]
 800433c:	6832      	ldr	r2, [r6, #0]
 800433e:	1a9b      	subs	r3, r3, r2
 8004340:	42ab      	cmp	r3, r5
 8004342:	dc28      	bgt.n	8004396 <_printf_common+0x9a>
 8004344:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004348:	1e13      	subs	r3, r2, #0
 800434a:	6822      	ldr	r2, [r4, #0]
 800434c:	bf18      	it	ne
 800434e:	2301      	movne	r3, #1
 8004350:	0692      	lsls	r2, r2, #26
 8004352:	d42d      	bmi.n	80043b0 <_printf_common+0xb4>
 8004354:	4649      	mov	r1, r9
 8004356:	4638      	mov	r0, r7
 8004358:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800435c:	47c0      	blx	r8
 800435e:	3001      	adds	r0, #1
 8004360:	d020      	beq.n	80043a4 <_printf_common+0xa8>
 8004362:	6823      	ldr	r3, [r4, #0]
 8004364:	68e5      	ldr	r5, [r4, #12]
 8004366:	f003 0306 	and.w	r3, r3, #6
 800436a:	2b04      	cmp	r3, #4
 800436c:	bf18      	it	ne
 800436e:	2500      	movne	r5, #0
 8004370:	6832      	ldr	r2, [r6, #0]
 8004372:	f04f 0600 	mov.w	r6, #0
 8004376:	68a3      	ldr	r3, [r4, #8]
 8004378:	bf08      	it	eq
 800437a:	1aad      	subeq	r5, r5, r2
 800437c:	6922      	ldr	r2, [r4, #16]
 800437e:	bf08      	it	eq
 8004380:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004384:	4293      	cmp	r3, r2
 8004386:	bfc4      	itt	gt
 8004388:	1a9b      	subgt	r3, r3, r2
 800438a:	18ed      	addgt	r5, r5, r3
 800438c:	341a      	adds	r4, #26
 800438e:	42b5      	cmp	r5, r6
 8004390:	d11a      	bne.n	80043c8 <_printf_common+0xcc>
 8004392:	2000      	movs	r0, #0
 8004394:	e008      	b.n	80043a8 <_printf_common+0xac>
 8004396:	2301      	movs	r3, #1
 8004398:	4652      	mov	r2, sl
 800439a:	4649      	mov	r1, r9
 800439c:	4638      	mov	r0, r7
 800439e:	47c0      	blx	r8
 80043a0:	3001      	adds	r0, #1
 80043a2:	d103      	bne.n	80043ac <_printf_common+0xb0>
 80043a4:	f04f 30ff 	mov.w	r0, #4294967295
 80043a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043ac:	3501      	adds	r5, #1
 80043ae:	e7c4      	b.n	800433a <_printf_common+0x3e>
 80043b0:	2030      	movs	r0, #48	; 0x30
 80043b2:	18e1      	adds	r1, r4, r3
 80043b4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80043b8:	1c5a      	adds	r2, r3, #1
 80043ba:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80043be:	4422      	add	r2, r4
 80043c0:	3302      	adds	r3, #2
 80043c2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80043c6:	e7c5      	b.n	8004354 <_printf_common+0x58>
 80043c8:	2301      	movs	r3, #1
 80043ca:	4622      	mov	r2, r4
 80043cc:	4649      	mov	r1, r9
 80043ce:	4638      	mov	r0, r7
 80043d0:	47c0      	blx	r8
 80043d2:	3001      	adds	r0, #1
 80043d4:	d0e6      	beq.n	80043a4 <_printf_common+0xa8>
 80043d6:	3601      	adds	r6, #1
 80043d8:	e7d9      	b.n	800438e <_printf_common+0x92>
	...

080043dc <_printf_i>:
 80043dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80043e0:	7e0f      	ldrb	r7, [r1, #24]
 80043e2:	4691      	mov	r9, r2
 80043e4:	2f78      	cmp	r7, #120	; 0x78
 80043e6:	4680      	mov	r8, r0
 80043e8:	460c      	mov	r4, r1
 80043ea:	469a      	mov	sl, r3
 80043ec:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80043ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80043f2:	d807      	bhi.n	8004404 <_printf_i+0x28>
 80043f4:	2f62      	cmp	r7, #98	; 0x62
 80043f6:	d80a      	bhi.n	800440e <_printf_i+0x32>
 80043f8:	2f00      	cmp	r7, #0
 80043fa:	f000 80d9 	beq.w	80045b0 <_printf_i+0x1d4>
 80043fe:	2f58      	cmp	r7, #88	; 0x58
 8004400:	f000 80a4 	beq.w	800454c <_printf_i+0x170>
 8004404:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004408:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800440c:	e03a      	b.n	8004484 <_printf_i+0xa8>
 800440e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004412:	2b15      	cmp	r3, #21
 8004414:	d8f6      	bhi.n	8004404 <_printf_i+0x28>
 8004416:	a101      	add	r1, pc, #4	; (adr r1, 800441c <_printf_i+0x40>)
 8004418:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800441c:	08004475 	.word	0x08004475
 8004420:	08004489 	.word	0x08004489
 8004424:	08004405 	.word	0x08004405
 8004428:	08004405 	.word	0x08004405
 800442c:	08004405 	.word	0x08004405
 8004430:	08004405 	.word	0x08004405
 8004434:	08004489 	.word	0x08004489
 8004438:	08004405 	.word	0x08004405
 800443c:	08004405 	.word	0x08004405
 8004440:	08004405 	.word	0x08004405
 8004444:	08004405 	.word	0x08004405
 8004448:	08004597 	.word	0x08004597
 800444c:	080044b9 	.word	0x080044b9
 8004450:	08004579 	.word	0x08004579
 8004454:	08004405 	.word	0x08004405
 8004458:	08004405 	.word	0x08004405
 800445c:	080045b9 	.word	0x080045b9
 8004460:	08004405 	.word	0x08004405
 8004464:	080044b9 	.word	0x080044b9
 8004468:	08004405 	.word	0x08004405
 800446c:	08004405 	.word	0x08004405
 8004470:	08004581 	.word	0x08004581
 8004474:	682b      	ldr	r3, [r5, #0]
 8004476:	1d1a      	adds	r2, r3, #4
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	602a      	str	r2, [r5, #0]
 800447c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004480:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004484:	2301      	movs	r3, #1
 8004486:	e0a4      	b.n	80045d2 <_printf_i+0x1f6>
 8004488:	6820      	ldr	r0, [r4, #0]
 800448a:	6829      	ldr	r1, [r5, #0]
 800448c:	0606      	lsls	r6, r0, #24
 800448e:	f101 0304 	add.w	r3, r1, #4
 8004492:	d50a      	bpl.n	80044aa <_printf_i+0xce>
 8004494:	680e      	ldr	r6, [r1, #0]
 8004496:	602b      	str	r3, [r5, #0]
 8004498:	2e00      	cmp	r6, #0
 800449a:	da03      	bge.n	80044a4 <_printf_i+0xc8>
 800449c:	232d      	movs	r3, #45	; 0x2d
 800449e:	4276      	negs	r6, r6
 80044a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044a4:	230a      	movs	r3, #10
 80044a6:	485e      	ldr	r0, [pc, #376]	; (8004620 <_printf_i+0x244>)
 80044a8:	e019      	b.n	80044de <_printf_i+0x102>
 80044aa:	680e      	ldr	r6, [r1, #0]
 80044ac:	f010 0f40 	tst.w	r0, #64	; 0x40
 80044b0:	602b      	str	r3, [r5, #0]
 80044b2:	bf18      	it	ne
 80044b4:	b236      	sxthne	r6, r6
 80044b6:	e7ef      	b.n	8004498 <_printf_i+0xbc>
 80044b8:	682b      	ldr	r3, [r5, #0]
 80044ba:	6820      	ldr	r0, [r4, #0]
 80044bc:	1d19      	adds	r1, r3, #4
 80044be:	6029      	str	r1, [r5, #0]
 80044c0:	0601      	lsls	r1, r0, #24
 80044c2:	d501      	bpl.n	80044c8 <_printf_i+0xec>
 80044c4:	681e      	ldr	r6, [r3, #0]
 80044c6:	e002      	b.n	80044ce <_printf_i+0xf2>
 80044c8:	0646      	lsls	r6, r0, #25
 80044ca:	d5fb      	bpl.n	80044c4 <_printf_i+0xe8>
 80044cc:	881e      	ldrh	r6, [r3, #0]
 80044ce:	2f6f      	cmp	r7, #111	; 0x6f
 80044d0:	bf0c      	ite	eq
 80044d2:	2308      	moveq	r3, #8
 80044d4:	230a      	movne	r3, #10
 80044d6:	4852      	ldr	r0, [pc, #328]	; (8004620 <_printf_i+0x244>)
 80044d8:	2100      	movs	r1, #0
 80044da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80044de:	6865      	ldr	r5, [r4, #4]
 80044e0:	2d00      	cmp	r5, #0
 80044e2:	bfa8      	it	ge
 80044e4:	6821      	ldrge	r1, [r4, #0]
 80044e6:	60a5      	str	r5, [r4, #8]
 80044e8:	bfa4      	itt	ge
 80044ea:	f021 0104 	bicge.w	r1, r1, #4
 80044ee:	6021      	strge	r1, [r4, #0]
 80044f0:	b90e      	cbnz	r6, 80044f6 <_printf_i+0x11a>
 80044f2:	2d00      	cmp	r5, #0
 80044f4:	d04d      	beq.n	8004592 <_printf_i+0x1b6>
 80044f6:	4615      	mov	r5, r2
 80044f8:	fbb6 f1f3 	udiv	r1, r6, r3
 80044fc:	fb03 6711 	mls	r7, r3, r1, r6
 8004500:	5dc7      	ldrb	r7, [r0, r7]
 8004502:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004506:	4637      	mov	r7, r6
 8004508:	42bb      	cmp	r3, r7
 800450a:	460e      	mov	r6, r1
 800450c:	d9f4      	bls.n	80044f8 <_printf_i+0x11c>
 800450e:	2b08      	cmp	r3, #8
 8004510:	d10b      	bne.n	800452a <_printf_i+0x14e>
 8004512:	6823      	ldr	r3, [r4, #0]
 8004514:	07de      	lsls	r6, r3, #31
 8004516:	d508      	bpl.n	800452a <_printf_i+0x14e>
 8004518:	6923      	ldr	r3, [r4, #16]
 800451a:	6861      	ldr	r1, [r4, #4]
 800451c:	4299      	cmp	r1, r3
 800451e:	bfde      	ittt	le
 8004520:	2330      	movle	r3, #48	; 0x30
 8004522:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004526:	f105 35ff 	addle.w	r5, r5, #4294967295
 800452a:	1b52      	subs	r2, r2, r5
 800452c:	6122      	str	r2, [r4, #16]
 800452e:	464b      	mov	r3, r9
 8004530:	4621      	mov	r1, r4
 8004532:	4640      	mov	r0, r8
 8004534:	f8cd a000 	str.w	sl, [sp]
 8004538:	aa03      	add	r2, sp, #12
 800453a:	f7ff fedf 	bl	80042fc <_printf_common>
 800453e:	3001      	adds	r0, #1
 8004540:	d14c      	bne.n	80045dc <_printf_i+0x200>
 8004542:	f04f 30ff 	mov.w	r0, #4294967295
 8004546:	b004      	add	sp, #16
 8004548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800454c:	4834      	ldr	r0, [pc, #208]	; (8004620 <_printf_i+0x244>)
 800454e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004552:	6829      	ldr	r1, [r5, #0]
 8004554:	6823      	ldr	r3, [r4, #0]
 8004556:	f851 6b04 	ldr.w	r6, [r1], #4
 800455a:	6029      	str	r1, [r5, #0]
 800455c:	061d      	lsls	r5, r3, #24
 800455e:	d514      	bpl.n	800458a <_printf_i+0x1ae>
 8004560:	07df      	lsls	r7, r3, #31
 8004562:	bf44      	itt	mi
 8004564:	f043 0320 	orrmi.w	r3, r3, #32
 8004568:	6023      	strmi	r3, [r4, #0]
 800456a:	b91e      	cbnz	r6, 8004574 <_printf_i+0x198>
 800456c:	6823      	ldr	r3, [r4, #0]
 800456e:	f023 0320 	bic.w	r3, r3, #32
 8004572:	6023      	str	r3, [r4, #0]
 8004574:	2310      	movs	r3, #16
 8004576:	e7af      	b.n	80044d8 <_printf_i+0xfc>
 8004578:	6823      	ldr	r3, [r4, #0]
 800457a:	f043 0320 	orr.w	r3, r3, #32
 800457e:	6023      	str	r3, [r4, #0]
 8004580:	2378      	movs	r3, #120	; 0x78
 8004582:	4828      	ldr	r0, [pc, #160]	; (8004624 <_printf_i+0x248>)
 8004584:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004588:	e7e3      	b.n	8004552 <_printf_i+0x176>
 800458a:	0659      	lsls	r1, r3, #25
 800458c:	bf48      	it	mi
 800458e:	b2b6      	uxthmi	r6, r6
 8004590:	e7e6      	b.n	8004560 <_printf_i+0x184>
 8004592:	4615      	mov	r5, r2
 8004594:	e7bb      	b.n	800450e <_printf_i+0x132>
 8004596:	682b      	ldr	r3, [r5, #0]
 8004598:	6826      	ldr	r6, [r4, #0]
 800459a:	1d18      	adds	r0, r3, #4
 800459c:	6961      	ldr	r1, [r4, #20]
 800459e:	6028      	str	r0, [r5, #0]
 80045a0:	0635      	lsls	r5, r6, #24
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	d501      	bpl.n	80045aa <_printf_i+0x1ce>
 80045a6:	6019      	str	r1, [r3, #0]
 80045a8:	e002      	b.n	80045b0 <_printf_i+0x1d4>
 80045aa:	0670      	lsls	r0, r6, #25
 80045ac:	d5fb      	bpl.n	80045a6 <_printf_i+0x1ca>
 80045ae:	8019      	strh	r1, [r3, #0]
 80045b0:	2300      	movs	r3, #0
 80045b2:	4615      	mov	r5, r2
 80045b4:	6123      	str	r3, [r4, #16]
 80045b6:	e7ba      	b.n	800452e <_printf_i+0x152>
 80045b8:	682b      	ldr	r3, [r5, #0]
 80045ba:	2100      	movs	r1, #0
 80045bc:	1d1a      	adds	r2, r3, #4
 80045be:	602a      	str	r2, [r5, #0]
 80045c0:	681d      	ldr	r5, [r3, #0]
 80045c2:	6862      	ldr	r2, [r4, #4]
 80045c4:	4628      	mov	r0, r5
 80045c6:	f000 feb5 	bl	8005334 <memchr>
 80045ca:	b108      	cbz	r0, 80045d0 <_printf_i+0x1f4>
 80045cc:	1b40      	subs	r0, r0, r5
 80045ce:	6060      	str	r0, [r4, #4]
 80045d0:	6863      	ldr	r3, [r4, #4]
 80045d2:	6123      	str	r3, [r4, #16]
 80045d4:	2300      	movs	r3, #0
 80045d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045da:	e7a8      	b.n	800452e <_printf_i+0x152>
 80045dc:	462a      	mov	r2, r5
 80045de:	4649      	mov	r1, r9
 80045e0:	4640      	mov	r0, r8
 80045e2:	6923      	ldr	r3, [r4, #16]
 80045e4:	47d0      	blx	sl
 80045e6:	3001      	adds	r0, #1
 80045e8:	d0ab      	beq.n	8004542 <_printf_i+0x166>
 80045ea:	6823      	ldr	r3, [r4, #0]
 80045ec:	079b      	lsls	r3, r3, #30
 80045ee:	d413      	bmi.n	8004618 <_printf_i+0x23c>
 80045f0:	68e0      	ldr	r0, [r4, #12]
 80045f2:	9b03      	ldr	r3, [sp, #12]
 80045f4:	4298      	cmp	r0, r3
 80045f6:	bfb8      	it	lt
 80045f8:	4618      	movlt	r0, r3
 80045fa:	e7a4      	b.n	8004546 <_printf_i+0x16a>
 80045fc:	2301      	movs	r3, #1
 80045fe:	4632      	mov	r2, r6
 8004600:	4649      	mov	r1, r9
 8004602:	4640      	mov	r0, r8
 8004604:	47d0      	blx	sl
 8004606:	3001      	adds	r0, #1
 8004608:	d09b      	beq.n	8004542 <_printf_i+0x166>
 800460a:	3501      	adds	r5, #1
 800460c:	68e3      	ldr	r3, [r4, #12]
 800460e:	9903      	ldr	r1, [sp, #12]
 8004610:	1a5b      	subs	r3, r3, r1
 8004612:	42ab      	cmp	r3, r5
 8004614:	dcf2      	bgt.n	80045fc <_printf_i+0x220>
 8004616:	e7eb      	b.n	80045f0 <_printf_i+0x214>
 8004618:	2500      	movs	r5, #0
 800461a:	f104 0619 	add.w	r6, r4, #25
 800461e:	e7f5      	b.n	800460c <_printf_i+0x230>
 8004620:	080067d6 	.word	0x080067d6
 8004624:	080067e7 	.word	0x080067e7

08004628 <quorem>:
 8004628:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800462c:	6903      	ldr	r3, [r0, #16]
 800462e:	690c      	ldr	r4, [r1, #16]
 8004630:	4607      	mov	r7, r0
 8004632:	42a3      	cmp	r3, r4
 8004634:	f2c0 8082 	blt.w	800473c <quorem+0x114>
 8004638:	3c01      	subs	r4, #1
 800463a:	f100 0514 	add.w	r5, r0, #20
 800463e:	f101 0814 	add.w	r8, r1, #20
 8004642:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004646:	9301      	str	r3, [sp, #4]
 8004648:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800464c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004650:	3301      	adds	r3, #1
 8004652:	429a      	cmp	r2, r3
 8004654:	fbb2 f6f3 	udiv	r6, r2, r3
 8004658:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800465c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004660:	d331      	bcc.n	80046c6 <quorem+0x9e>
 8004662:	f04f 0e00 	mov.w	lr, #0
 8004666:	4640      	mov	r0, r8
 8004668:	46ac      	mov	ip, r5
 800466a:	46f2      	mov	sl, lr
 800466c:	f850 2b04 	ldr.w	r2, [r0], #4
 8004670:	b293      	uxth	r3, r2
 8004672:	fb06 e303 	mla	r3, r6, r3, lr
 8004676:	0c12      	lsrs	r2, r2, #16
 8004678:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800467c:	b29b      	uxth	r3, r3
 800467e:	fb06 e202 	mla	r2, r6, r2, lr
 8004682:	ebaa 0303 	sub.w	r3, sl, r3
 8004686:	f8dc a000 	ldr.w	sl, [ip]
 800468a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800468e:	fa1f fa8a 	uxth.w	sl, sl
 8004692:	4453      	add	r3, sl
 8004694:	f8dc a000 	ldr.w	sl, [ip]
 8004698:	b292      	uxth	r2, r2
 800469a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800469e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80046a8:	4581      	cmp	r9, r0
 80046aa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80046ae:	f84c 3b04 	str.w	r3, [ip], #4
 80046b2:	d2db      	bcs.n	800466c <quorem+0x44>
 80046b4:	f855 300b 	ldr.w	r3, [r5, fp]
 80046b8:	b92b      	cbnz	r3, 80046c6 <quorem+0x9e>
 80046ba:	9b01      	ldr	r3, [sp, #4]
 80046bc:	3b04      	subs	r3, #4
 80046be:	429d      	cmp	r5, r3
 80046c0:	461a      	mov	r2, r3
 80046c2:	d32f      	bcc.n	8004724 <quorem+0xfc>
 80046c4:	613c      	str	r4, [r7, #16]
 80046c6:	4638      	mov	r0, r7
 80046c8:	f001 f8ce 	bl	8005868 <__mcmp>
 80046cc:	2800      	cmp	r0, #0
 80046ce:	db25      	blt.n	800471c <quorem+0xf4>
 80046d0:	4628      	mov	r0, r5
 80046d2:	f04f 0c00 	mov.w	ip, #0
 80046d6:	3601      	adds	r6, #1
 80046d8:	f858 1b04 	ldr.w	r1, [r8], #4
 80046dc:	f8d0 e000 	ldr.w	lr, [r0]
 80046e0:	b28b      	uxth	r3, r1
 80046e2:	ebac 0303 	sub.w	r3, ip, r3
 80046e6:	fa1f f28e 	uxth.w	r2, lr
 80046ea:	4413      	add	r3, r2
 80046ec:	0c0a      	lsrs	r2, r1, #16
 80046ee:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80046f2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80046f6:	b29b      	uxth	r3, r3
 80046f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80046fc:	45c1      	cmp	r9, r8
 80046fe:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004702:	f840 3b04 	str.w	r3, [r0], #4
 8004706:	d2e7      	bcs.n	80046d8 <quorem+0xb0>
 8004708:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800470c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004710:	b922      	cbnz	r2, 800471c <quorem+0xf4>
 8004712:	3b04      	subs	r3, #4
 8004714:	429d      	cmp	r5, r3
 8004716:	461a      	mov	r2, r3
 8004718:	d30a      	bcc.n	8004730 <quorem+0x108>
 800471a:	613c      	str	r4, [r7, #16]
 800471c:	4630      	mov	r0, r6
 800471e:	b003      	add	sp, #12
 8004720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004724:	6812      	ldr	r2, [r2, #0]
 8004726:	3b04      	subs	r3, #4
 8004728:	2a00      	cmp	r2, #0
 800472a:	d1cb      	bne.n	80046c4 <quorem+0x9c>
 800472c:	3c01      	subs	r4, #1
 800472e:	e7c6      	b.n	80046be <quorem+0x96>
 8004730:	6812      	ldr	r2, [r2, #0]
 8004732:	3b04      	subs	r3, #4
 8004734:	2a00      	cmp	r2, #0
 8004736:	d1f0      	bne.n	800471a <quorem+0xf2>
 8004738:	3c01      	subs	r4, #1
 800473a:	e7eb      	b.n	8004714 <quorem+0xec>
 800473c:	2000      	movs	r0, #0
 800473e:	e7ee      	b.n	800471e <quorem+0xf6>

08004740 <_dtoa_r>:
 8004740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004744:	4616      	mov	r6, r2
 8004746:	461f      	mov	r7, r3
 8004748:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800474a:	b099      	sub	sp, #100	; 0x64
 800474c:	4605      	mov	r5, r0
 800474e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004752:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8004756:	b974      	cbnz	r4, 8004776 <_dtoa_r+0x36>
 8004758:	2010      	movs	r0, #16
 800475a:	f000 fde3 	bl	8005324 <malloc>
 800475e:	4602      	mov	r2, r0
 8004760:	6268      	str	r0, [r5, #36]	; 0x24
 8004762:	b920      	cbnz	r0, 800476e <_dtoa_r+0x2e>
 8004764:	21ea      	movs	r1, #234	; 0xea
 8004766:	4ba8      	ldr	r3, [pc, #672]	; (8004a08 <_dtoa_r+0x2c8>)
 8004768:	48a8      	ldr	r0, [pc, #672]	; (8004a0c <_dtoa_r+0x2cc>)
 800476a:	f001 fa81 	bl	8005c70 <__assert_func>
 800476e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004772:	6004      	str	r4, [r0, #0]
 8004774:	60c4      	str	r4, [r0, #12]
 8004776:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004778:	6819      	ldr	r1, [r3, #0]
 800477a:	b151      	cbz	r1, 8004792 <_dtoa_r+0x52>
 800477c:	685a      	ldr	r2, [r3, #4]
 800477e:	2301      	movs	r3, #1
 8004780:	4093      	lsls	r3, r2
 8004782:	604a      	str	r2, [r1, #4]
 8004784:	608b      	str	r3, [r1, #8]
 8004786:	4628      	mov	r0, r5
 8004788:	f000 fe30 	bl	80053ec <_Bfree>
 800478c:	2200      	movs	r2, #0
 800478e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004790:	601a      	str	r2, [r3, #0]
 8004792:	1e3b      	subs	r3, r7, #0
 8004794:	bfaf      	iteee	ge
 8004796:	2300      	movge	r3, #0
 8004798:	2201      	movlt	r2, #1
 800479a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800479e:	9305      	strlt	r3, [sp, #20]
 80047a0:	bfa8      	it	ge
 80047a2:	f8c8 3000 	strge.w	r3, [r8]
 80047a6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80047aa:	4b99      	ldr	r3, [pc, #612]	; (8004a10 <_dtoa_r+0x2d0>)
 80047ac:	bfb8      	it	lt
 80047ae:	f8c8 2000 	strlt.w	r2, [r8]
 80047b2:	ea33 0309 	bics.w	r3, r3, r9
 80047b6:	d119      	bne.n	80047ec <_dtoa_r+0xac>
 80047b8:	f242 730f 	movw	r3, #9999	; 0x270f
 80047bc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80047be:	6013      	str	r3, [r2, #0]
 80047c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80047c4:	4333      	orrs	r3, r6
 80047c6:	f000 857f 	beq.w	80052c8 <_dtoa_r+0xb88>
 80047ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80047cc:	b953      	cbnz	r3, 80047e4 <_dtoa_r+0xa4>
 80047ce:	4b91      	ldr	r3, [pc, #580]	; (8004a14 <_dtoa_r+0x2d4>)
 80047d0:	e022      	b.n	8004818 <_dtoa_r+0xd8>
 80047d2:	4b91      	ldr	r3, [pc, #580]	; (8004a18 <_dtoa_r+0x2d8>)
 80047d4:	9303      	str	r3, [sp, #12]
 80047d6:	3308      	adds	r3, #8
 80047d8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80047da:	6013      	str	r3, [r2, #0]
 80047dc:	9803      	ldr	r0, [sp, #12]
 80047de:	b019      	add	sp, #100	; 0x64
 80047e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047e4:	4b8b      	ldr	r3, [pc, #556]	; (8004a14 <_dtoa_r+0x2d4>)
 80047e6:	9303      	str	r3, [sp, #12]
 80047e8:	3303      	adds	r3, #3
 80047ea:	e7f5      	b.n	80047d8 <_dtoa_r+0x98>
 80047ec:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80047f0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80047f4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80047f8:	2200      	movs	r2, #0
 80047fa:	2300      	movs	r3, #0
 80047fc:	f7fc f8d4 	bl	80009a8 <__aeabi_dcmpeq>
 8004800:	4680      	mov	r8, r0
 8004802:	b158      	cbz	r0, 800481c <_dtoa_r+0xdc>
 8004804:	2301      	movs	r3, #1
 8004806:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004808:	6013      	str	r3, [r2, #0]
 800480a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800480c:	2b00      	cmp	r3, #0
 800480e:	f000 8558 	beq.w	80052c2 <_dtoa_r+0xb82>
 8004812:	4882      	ldr	r0, [pc, #520]	; (8004a1c <_dtoa_r+0x2dc>)
 8004814:	6018      	str	r0, [r3, #0]
 8004816:	1e43      	subs	r3, r0, #1
 8004818:	9303      	str	r3, [sp, #12]
 800481a:	e7df      	b.n	80047dc <_dtoa_r+0x9c>
 800481c:	ab16      	add	r3, sp, #88	; 0x58
 800481e:	9301      	str	r3, [sp, #4]
 8004820:	ab17      	add	r3, sp, #92	; 0x5c
 8004822:	9300      	str	r3, [sp, #0]
 8004824:	4628      	mov	r0, r5
 8004826:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800482a:	f001 f8c5 	bl	80059b8 <__d2b>
 800482e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004832:	4683      	mov	fp, r0
 8004834:	2c00      	cmp	r4, #0
 8004836:	d07f      	beq.n	8004938 <_dtoa_r+0x1f8>
 8004838:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800483c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800483e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004842:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004846:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800484a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800484e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8004852:	2200      	movs	r2, #0
 8004854:	4b72      	ldr	r3, [pc, #456]	; (8004a20 <_dtoa_r+0x2e0>)
 8004856:	f7fb fc87 	bl	8000168 <__aeabi_dsub>
 800485a:	a365      	add	r3, pc, #404	; (adr r3, 80049f0 <_dtoa_r+0x2b0>)
 800485c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004860:	f7fb fe3a 	bl	80004d8 <__aeabi_dmul>
 8004864:	a364      	add	r3, pc, #400	; (adr r3, 80049f8 <_dtoa_r+0x2b8>)
 8004866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800486a:	f7fb fc7f 	bl	800016c <__adddf3>
 800486e:	4606      	mov	r6, r0
 8004870:	4620      	mov	r0, r4
 8004872:	460f      	mov	r7, r1
 8004874:	f7fb fdc6 	bl	8000404 <__aeabi_i2d>
 8004878:	a361      	add	r3, pc, #388	; (adr r3, 8004a00 <_dtoa_r+0x2c0>)
 800487a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800487e:	f7fb fe2b 	bl	80004d8 <__aeabi_dmul>
 8004882:	4602      	mov	r2, r0
 8004884:	460b      	mov	r3, r1
 8004886:	4630      	mov	r0, r6
 8004888:	4639      	mov	r1, r7
 800488a:	f7fb fc6f 	bl	800016c <__adddf3>
 800488e:	4606      	mov	r6, r0
 8004890:	460f      	mov	r7, r1
 8004892:	f7fc f8d1 	bl	8000a38 <__aeabi_d2iz>
 8004896:	2200      	movs	r2, #0
 8004898:	4682      	mov	sl, r0
 800489a:	2300      	movs	r3, #0
 800489c:	4630      	mov	r0, r6
 800489e:	4639      	mov	r1, r7
 80048a0:	f7fc f88c 	bl	80009bc <__aeabi_dcmplt>
 80048a4:	b148      	cbz	r0, 80048ba <_dtoa_r+0x17a>
 80048a6:	4650      	mov	r0, sl
 80048a8:	f7fb fdac 	bl	8000404 <__aeabi_i2d>
 80048ac:	4632      	mov	r2, r6
 80048ae:	463b      	mov	r3, r7
 80048b0:	f7fc f87a 	bl	80009a8 <__aeabi_dcmpeq>
 80048b4:	b908      	cbnz	r0, 80048ba <_dtoa_r+0x17a>
 80048b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80048ba:	f1ba 0f16 	cmp.w	sl, #22
 80048be:	d858      	bhi.n	8004972 <_dtoa_r+0x232>
 80048c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80048c4:	4b57      	ldr	r3, [pc, #348]	; (8004a24 <_dtoa_r+0x2e4>)
 80048c6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80048ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ce:	f7fc f875 	bl	80009bc <__aeabi_dcmplt>
 80048d2:	2800      	cmp	r0, #0
 80048d4:	d04f      	beq.n	8004976 <_dtoa_r+0x236>
 80048d6:	2300      	movs	r3, #0
 80048d8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80048dc:	930f      	str	r3, [sp, #60]	; 0x3c
 80048de:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80048e0:	1b1c      	subs	r4, r3, r4
 80048e2:	1e63      	subs	r3, r4, #1
 80048e4:	9309      	str	r3, [sp, #36]	; 0x24
 80048e6:	bf49      	itett	mi
 80048e8:	f1c4 0301 	rsbmi	r3, r4, #1
 80048ec:	2300      	movpl	r3, #0
 80048ee:	9306      	strmi	r3, [sp, #24]
 80048f0:	2300      	movmi	r3, #0
 80048f2:	bf54      	ite	pl
 80048f4:	9306      	strpl	r3, [sp, #24]
 80048f6:	9309      	strmi	r3, [sp, #36]	; 0x24
 80048f8:	f1ba 0f00 	cmp.w	sl, #0
 80048fc:	db3d      	blt.n	800497a <_dtoa_r+0x23a>
 80048fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004900:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8004904:	4453      	add	r3, sl
 8004906:	9309      	str	r3, [sp, #36]	; 0x24
 8004908:	2300      	movs	r3, #0
 800490a:	930a      	str	r3, [sp, #40]	; 0x28
 800490c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800490e:	2b09      	cmp	r3, #9
 8004910:	f200 808c 	bhi.w	8004a2c <_dtoa_r+0x2ec>
 8004914:	2b05      	cmp	r3, #5
 8004916:	bfc4      	itt	gt
 8004918:	3b04      	subgt	r3, #4
 800491a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800491c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800491e:	bfc8      	it	gt
 8004920:	2400      	movgt	r4, #0
 8004922:	f1a3 0302 	sub.w	r3, r3, #2
 8004926:	bfd8      	it	le
 8004928:	2401      	movle	r4, #1
 800492a:	2b03      	cmp	r3, #3
 800492c:	f200 808a 	bhi.w	8004a44 <_dtoa_r+0x304>
 8004930:	e8df f003 	tbb	[pc, r3]
 8004934:	5b4d4f2d 	.word	0x5b4d4f2d
 8004938:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800493c:	441c      	add	r4, r3
 800493e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8004942:	2b20      	cmp	r3, #32
 8004944:	bfc3      	ittte	gt
 8004946:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800494a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800494e:	fa09 f303 	lslgt.w	r3, r9, r3
 8004952:	f1c3 0320 	rsble	r3, r3, #32
 8004956:	bfc6      	itte	gt
 8004958:	fa26 f000 	lsrgt.w	r0, r6, r0
 800495c:	4318      	orrgt	r0, r3
 800495e:	fa06 f003 	lslle.w	r0, r6, r3
 8004962:	f7fb fd3f 	bl	80003e4 <__aeabi_ui2d>
 8004966:	2301      	movs	r3, #1
 8004968:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800496c:	3c01      	subs	r4, #1
 800496e:	9313      	str	r3, [sp, #76]	; 0x4c
 8004970:	e76f      	b.n	8004852 <_dtoa_r+0x112>
 8004972:	2301      	movs	r3, #1
 8004974:	e7b2      	b.n	80048dc <_dtoa_r+0x19c>
 8004976:	900f      	str	r0, [sp, #60]	; 0x3c
 8004978:	e7b1      	b.n	80048de <_dtoa_r+0x19e>
 800497a:	9b06      	ldr	r3, [sp, #24]
 800497c:	eba3 030a 	sub.w	r3, r3, sl
 8004980:	9306      	str	r3, [sp, #24]
 8004982:	f1ca 0300 	rsb	r3, sl, #0
 8004986:	930a      	str	r3, [sp, #40]	; 0x28
 8004988:	2300      	movs	r3, #0
 800498a:	930e      	str	r3, [sp, #56]	; 0x38
 800498c:	e7be      	b.n	800490c <_dtoa_r+0x1cc>
 800498e:	2300      	movs	r3, #0
 8004990:	930b      	str	r3, [sp, #44]	; 0x2c
 8004992:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004994:	2b00      	cmp	r3, #0
 8004996:	dc58      	bgt.n	8004a4a <_dtoa_r+0x30a>
 8004998:	f04f 0901 	mov.w	r9, #1
 800499c:	464b      	mov	r3, r9
 800499e:	f8cd 9020 	str.w	r9, [sp, #32]
 80049a2:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 80049a6:	2200      	movs	r2, #0
 80049a8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80049aa:	6042      	str	r2, [r0, #4]
 80049ac:	2204      	movs	r2, #4
 80049ae:	f102 0614 	add.w	r6, r2, #20
 80049b2:	429e      	cmp	r6, r3
 80049b4:	6841      	ldr	r1, [r0, #4]
 80049b6:	d94e      	bls.n	8004a56 <_dtoa_r+0x316>
 80049b8:	4628      	mov	r0, r5
 80049ba:	f000 fcd7 	bl	800536c <_Balloc>
 80049be:	9003      	str	r0, [sp, #12]
 80049c0:	2800      	cmp	r0, #0
 80049c2:	d14c      	bne.n	8004a5e <_dtoa_r+0x31e>
 80049c4:	4602      	mov	r2, r0
 80049c6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80049ca:	4b17      	ldr	r3, [pc, #92]	; (8004a28 <_dtoa_r+0x2e8>)
 80049cc:	e6cc      	b.n	8004768 <_dtoa_r+0x28>
 80049ce:	2301      	movs	r3, #1
 80049d0:	e7de      	b.n	8004990 <_dtoa_r+0x250>
 80049d2:	2300      	movs	r3, #0
 80049d4:	930b      	str	r3, [sp, #44]	; 0x2c
 80049d6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80049d8:	eb0a 0903 	add.w	r9, sl, r3
 80049dc:	f109 0301 	add.w	r3, r9, #1
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	9308      	str	r3, [sp, #32]
 80049e4:	bfb8      	it	lt
 80049e6:	2301      	movlt	r3, #1
 80049e8:	e7dd      	b.n	80049a6 <_dtoa_r+0x266>
 80049ea:	2301      	movs	r3, #1
 80049ec:	e7f2      	b.n	80049d4 <_dtoa_r+0x294>
 80049ee:	bf00      	nop
 80049f0:	636f4361 	.word	0x636f4361
 80049f4:	3fd287a7 	.word	0x3fd287a7
 80049f8:	8b60c8b3 	.word	0x8b60c8b3
 80049fc:	3fc68a28 	.word	0x3fc68a28
 8004a00:	509f79fb 	.word	0x509f79fb
 8004a04:	3fd34413 	.word	0x3fd34413
 8004a08:	08006805 	.word	0x08006805
 8004a0c:	0800681c 	.word	0x0800681c
 8004a10:	7ff00000 	.word	0x7ff00000
 8004a14:	08006801 	.word	0x08006801
 8004a18:	080067f8 	.word	0x080067f8
 8004a1c:	080067d5 	.word	0x080067d5
 8004a20:	3ff80000 	.word	0x3ff80000
 8004a24:	08006910 	.word	0x08006910
 8004a28:	08006877 	.word	0x08006877
 8004a2c:	2401      	movs	r4, #1
 8004a2e:	2300      	movs	r3, #0
 8004a30:	940b      	str	r4, [sp, #44]	; 0x2c
 8004a32:	9322      	str	r3, [sp, #136]	; 0x88
 8004a34:	f04f 39ff 	mov.w	r9, #4294967295
 8004a38:	2200      	movs	r2, #0
 8004a3a:	2312      	movs	r3, #18
 8004a3c:	f8cd 9020 	str.w	r9, [sp, #32]
 8004a40:	9223      	str	r2, [sp, #140]	; 0x8c
 8004a42:	e7b0      	b.n	80049a6 <_dtoa_r+0x266>
 8004a44:	2301      	movs	r3, #1
 8004a46:	930b      	str	r3, [sp, #44]	; 0x2c
 8004a48:	e7f4      	b.n	8004a34 <_dtoa_r+0x2f4>
 8004a4a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8004a4e:	464b      	mov	r3, r9
 8004a50:	f8cd 9020 	str.w	r9, [sp, #32]
 8004a54:	e7a7      	b.n	80049a6 <_dtoa_r+0x266>
 8004a56:	3101      	adds	r1, #1
 8004a58:	6041      	str	r1, [r0, #4]
 8004a5a:	0052      	lsls	r2, r2, #1
 8004a5c:	e7a7      	b.n	80049ae <_dtoa_r+0x26e>
 8004a5e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004a60:	9a03      	ldr	r2, [sp, #12]
 8004a62:	601a      	str	r2, [r3, #0]
 8004a64:	9b08      	ldr	r3, [sp, #32]
 8004a66:	2b0e      	cmp	r3, #14
 8004a68:	f200 80a8 	bhi.w	8004bbc <_dtoa_r+0x47c>
 8004a6c:	2c00      	cmp	r4, #0
 8004a6e:	f000 80a5 	beq.w	8004bbc <_dtoa_r+0x47c>
 8004a72:	f1ba 0f00 	cmp.w	sl, #0
 8004a76:	dd34      	ble.n	8004ae2 <_dtoa_r+0x3a2>
 8004a78:	4a9a      	ldr	r2, [pc, #616]	; (8004ce4 <_dtoa_r+0x5a4>)
 8004a7a:	f00a 030f 	and.w	r3, sl, #15
 8004a7e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004a82:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8004a86:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004a8a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004a8e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8004a92:	d016      	beq.n	8004ac2 <_dtoa_r+0x382>
 8004a94:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004a98:	4b93      	ldr	r3, [pc, #588]	; (8004ce8 <_dtoa_r+0x5a8>)
 8004a9a:	2703      	movs	r7, #3
 8004a9c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004aa0:	f7fb fe44 	bl	800072c <__aeabi_ddiv>
 8004aa4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004aa8:	f004 040f 	and.w	r4, r4, #15
 8004aac:	4e8e      	ldr	r6, [pc, #568]	; (8004ce8 <_dtoa_r+0x5a8>)
 8004aae:	b954      	cbnz	r4, 8004ac6 <_dtoa_r+0x386>
 8004ab0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004ab4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004ab8:	f7fb fe38 	bl	800072c <__aeabi_ddiv>
 8004abc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004ac0:	e029      	b.n	8004b16 <_dtoa_r+0x3d6>
 8004ac2:	2702      	movs	r7, #2
 8004ac4:	e7f2      	b.n	8004aac <_dtoa_r+0x36c>
 8004ac6:	07e1      	lsls	r1, r4, #31
 8004ac8:	d508      	bpl.n	8004adc <_dtoa_r+0x39c>
 8004aca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004ace:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004ad2:	f7fb fd01 	bl	80004d8 <__aeabi_dmul>
 8004ad6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004ada:	3701      	adds	r7, #1
 8004adc:	1064      	asrs	r4, r4, #1
 8004ade:	3608      	adds	r6, #8
 8004ae0:	e7e5      	b.n	8004aae <_dtoa_r+0x36e>
 8004ae2:	f000 80a5 	beq.w	8004c30 <_dtoa_r+0x4f0>
 8004ae6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004aea:	f1ca 0400 	rsb	r4, sl, #0
 8004aee:	4b7d      	ldr	r3, [pc, #500]	; (8004ce4 <_dtoa_r+0x5a4>)
 8004af0:	f004 020f 	and.w	r2, r4, #15
 8004af4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004afc:	f7fb fcec 	bl	80004d8 <__aeabi_dmul>
 8004b00:	2702      	movs	r7, #2
 8004b02:	2300      	movs	r3, #0
 8004b04:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004b08:	4e77      	ldr	r6, [pc, #476]	; (8004ce8 <_dtoa_r+0x5a8>)
 8004b0a:	1124      	asrs	r4, r4, #4
 8004b0c:	2c00      	cmp	r4, #0
 8004b0e:	f040 8084 	bne.w	8004c1a <_dtoa_r+0x4da>
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d1d2      	bne.n	8004abc <_dtoa_r+0x37c>
 8004b16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	f000 808b 	beq.w	8004c34 <_dtoa_r+0x4f4>
 8004b1e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004b22:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004b26:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	4b6f      	ldr	r3, [pc, #444]	; (8004cec <_dtoa_r+0x5ac>)
 8004b2e:	f7fb ff45 	bl	80009bc <__aeabi_dcmplt>
 8004b32:	2800      	cmp	r0, #0
 8004b34:	d07e      	beq.n	8004c34 <_dtoa_r+0x4f4>
 8004b36:	9b08      	ldr	r3, [sp, #32]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d07b      	beq.n	8004c34 <_dtoa_r+0x4f4>
 8004b3c:	f1b9 0f00 	cmp.w	r9, #0
 8004b40:	dd38      	ble.n	8004bb4 <_dtoa_r+0x474>
 8004b42:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004b46:	2200      	movs	r2, #0
 8004b48:	4b69      	ldr	r3, [pc, #420]	; (8004cf0 <_dtoa_r+0x5b0>)
 8004b4a:	f7fb fcc5 	bl	80004d8 <__aeabi_dmul>
 8004b4e:	464c      	mov	r4, r9
 8004b50:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004b54:	f10a 38ff 	add.w	r8, sl, #4294967295
 8004b58:	3701      	adds	r7, #1
 8004b5a:	4638      	mov	r0, r7
 8004b5c:	f7fb fc52 	bl	8000404 <__aeabi_i2d>
 8004b60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004b64:	f7fb fcb8 	bl	80004d8 <__aeabi_dmul>
 8004b68:	2200      	movs	r2, #0
 8004b6a:	4b62      	ldr	r3, [pc, #392]	; (8004cf4 <_dtoa_r+0x5b4>)
 8004b6c:	f7fb fafe 	bl	800016c <__adddf3>
 8004b70:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8004b74:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004b78:	9611      	str	r6, [sp, #68]	; 0x44
 8004b7a:	2c00      	cmp	r4, #0
 8004b7c:	d15d      	bne.n	8004c3a <_dtoa_r+0x4fa>
 8004b7e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004b82:	2200      	movs	r2, #0
 8004b84:	4b5c      	ldr	r3, [pc, #368]	; (8004cf8 <_dtoa_r+0x5b8>)
 8004b86:	f7fb faef 	bl	8000168 <__aeabi_dsub>
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	460b      	mov	r3, r1
 8004b8e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004b92:	4633      	mov	r3, r6
 8004b94:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004b96:	f7fb ff2f 	bl	80009f8 <__aeabi_dcmpgt>
 8004b9a:	2800      	cmp	r0, #0
 8004b9c:	f040 829c 	bne.w	80050d8 <_dtoa_r+0x998>
 8004ba0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004ba4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004ba6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004baa:	f7fb ff07 	bl	80009bc <__aeabi_dcmplt>
 8004bae:	2800      	cmp	r0, #0
 8004bb0:	f040 8290 	bne.w	80050d4 <_dtoa_r+0x994>
 8004bb4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8004bb8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004bbc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	f2c0 8152 	blt.w	8004e68 <_dtoa_r+0x728>
 8004bc4:	f1ba 0f0e 	cmp.w	sl, #14
 8004bc8:	f300 814e 	bgt.w	8004e68 <_dtoa_r+0x728>
 8004bcc:	4b45      	ldr	r3, [pc, #276]	; (8004ce4 <_dtoa_r+0x5a4>)
 8004bce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004bd2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004bd6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8004bda:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	f280 80db 	bge.w	8004d98 <_dtoa_r+0x658>
 8004be2:	9b08      	ldr	r3, [sp, #32]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	f300 80d7 	bgt.w	8004d98 <_dtoa_r+0x658>
 8004bea:	f040 8272 	bne.w	80050d2 <_dtoa_r+0x992>
 8004bee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	4b40      	ldr	r3, [pc, #256]	; (8004cf8 <_dtoa_r+0x5b8>)
 8004bf6:	f7fb fc6f 	bl	80004d8 <__aeabi_dmul>
 8004bfa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004bfe:	f7fb fef1 	bl	80009e4 <__aeabi_dcmpge>
 8004c02:	9c08      	ldr	r4, [sp, #32]
 8004c04:	4626      	mov	r6, r4
 8004c06:	2800      	cmp	r0, #0
 8004c08:	f040 8248 	bne.w	800509c <_dtoa_r+0x95c>
 8004c0c:	2331      	movs	r3, #49	; 0x31
 8004c0e:	9f03      	ldr	r7, [sp, #12]
 8004c10:	f10a 0a01 	add.w	sl, sl, #1
 8004c14:	f807 3b01 	strb.w	r3, [r7], #1
 8004c18:	e244      	b.n	80050a4 <_dtoa_r+0x964>
 8004c1a:	07e2      	lsls	r2, r4, #31
 8004c1c:	d505      	bpl.n	8004c2a <_dtoa_r+0x4ea>
 8004c1e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004c22:	f7fb fc59 	bl	80004d8 <__aeabi_dmul>
 8004c26:	2301      	movs	r3, #1
 8004c28:	3701      	adds	r7, #1
 8004c2a:	1064      	asrs	r4, r4, #1
 8004c2c:	3608      	adds	r6, #8
 8004c2e:	e76d      	b.n	8004b0c <_dtoa_r+0x3cc>
 8004c30:	2702      	movs	r7, #2
 8004c32:	e770      	b.n	8004b16 <_dtoa_r+0x3d6>
 8004c34:	46d0      	mov	r8, sl
 8004c36:	9c08      	ldr	r4, [sp, #32]
 8004c38:	e78f      	b.n	8004b5a <_dtoa_r+0x41a>
 8004c3a:	9903      	ldr	r1, [sp, #12]
 8004c3c:	4b29      	ldr	r3, [pc, #164]	; (8004ce4 <_dtoa_r+0x5a4>)
 8004c3e:	4421      	add	r1, r4
 8004c40:	9112      	str	r1, [sp, #72]	; 0x48
 8004c42:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004c44:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004c48:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8004c4c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004c50:	2900      	cmp	r1, #0
 8004c52:	d055      	beq.n	8004d00 <_dtoa_r+0x5c0>
 8004c54:	2000      	movs	r0, #0
 8004c56:	4929      	ldr	r1, [pc, #164]	; (8004cfc <_dtoa_r+0x5bc>)
 8004c58:	f7fb fd68 	bl	800072c <__aeabi_ddiv>
 8004c5c:	463b      	mov	r3, r7
 8004c5e:	4632      	mov	r2, r6
 8004c60:	f7fb fa82 	bl	8000168 <__aeabi_dsub>
 8004c64:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004c68:	9f03      	ldr	r7, [sp, #12]
 8004c6a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004c6e:	f7fb fee3 	bl	8000a38 <__aeabi_d2iz>
 8004c72:	4604      	mov	r4, r0
 8004c74:	f7fb fbc6 	bl	8000404 <__aeabi_i2d>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	460b      	mov	r3, r1
 8004c7c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004c80:	f7fb fa72 	bl	8000168 <__aeabi_dsub>
 8004c84:	4602      	mov	r2, r0
 8004c86:	460b      	mov	r3, r1
 8004c88:	3430      	adds	r4, #48	; 0x30
 8004c8a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004c8e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004c92:	f807 4b01 	strb.w	r4, [r7], #1
 8004c96:	f7fb fe91 	bl	80009bc <__aeabi_dcmplt>
 8004c9a:	2800      	cmp	r0, #0
 8004c9c:	d174      	bne.n	8004d88 <_dtoa_r+0x648>
 8004c9e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004ca2:	2000      	movs	r0, #0
 8004ca4:	4911      	ldr	r1, [pc, #68]	; (8004cec <_dtoa_r+0x5ac>)
 8004ca6:	f7fb fa5f 	bl	8000168 <__aeabi_dsub>
 8004caa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004cae:	f7fb fe85 	bl	80009bc <__aeabi_dcmplt>
 8004cb2:	2800      	cmp	r0, #0
 8004cb4:	f040 80b7 	bne.w	8004e26 <_dtoa_r+0x6e6>
 8004cb8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004cba:	429f      	cmp	r7, r3
 8004cbc:	f43f af7a 	beq.w	8004bb4 <_dtoa_r+0x474>
 8004cc0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	4b0a      	ldr	r3, [pc, #40]	; (8004cf0 <_dtoa_r+0x5b0>)
 8004cc8:	f7fb fc06 	bl	80004d8 <__aeabi_dmul>
 8004ccc:	2200      	movs	r2, #0
 8004cce:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004cd2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004cd6:	4b06      	ldr	r3, [pc, #24]	; (8004cf0 <_dtoa_r+0x5b0>)
 8004cd8:	f7fb fbfe 	bl	80004d8 <__aeabi_dmul>
 8004cdc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004ce0:	e7c3      	b.n	8004c6a <_dtoa_r+0x52a>
 8004ce2:	bf00      	nop
 8004ce4:	08006910 	.word	0x08006910
 8004ce8:	080068e8 	.word	0x080068e8
 8004cec:	3ff00000 	.word	0x3ff00000
 8004cf0:	40240000 	.word	0x40240000
 8004cf4:	401c0000 	.word	0x401c0000
 8004cf8:	40140000 	.word	0x40140000
 8004cfc:	3fe00000 	.word	0x3fe00000
 8004d00:	4630      	mov	r0, r6
 8004d02:	4639      	mov	r1, r7
 8004d04:	f7fb fbe8 	bl	80004d8 <__aeabi_dmul>
 8004d08:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004d0a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004d0e:	9c03      	ldr	r4, [sp, #12]
 8004d10:	9314      	str	r3, [sp, #80]	; 0x50
 8004d12:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004d16:	f7fb fe8f 	bl	8000a38 <__aeabi_d2iz>
 8004d1a:	9015      	str	r0, [sp, #84]	; 0x54
 8004d1c:	f7fb fb72 	bl	8000404 <__aeabi_i2d>
 8004d20:	4602      	mov	r2, r0
 8004d22:	460b      	mov	r3, r1
 8004d24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004d28:	f7fb fa1e 	bl	8000168 <__aeabi_dsub>
 8004d2c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004d2e:	4606      	mov	r6, r0
 8004d30:	3330      	adds	r3, #48	; 0x30
 8004d32:	f804 3b01 	strb.w	r3, [r4], #1
 8004d36:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004d38:	460f      	mov	r7, r1
 8004d3a:	429c      	cmp	r4, r3
 8004d3c:	f04f 0200 	mov.w	r2, #0
 8004d40:	d124      	bne.n	8004d8c <_dtoa_r+0x64c>
 8004d42:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004d46:	4bb0      	ldr	r3, [pc, #704]	; (8005008 <_dtoa_r+0x8c8>)
 8004d48:	f7fb fa10 	bl	800016c <__adddf3>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	460b      	mov	r3, r1
 8004d50:	4630      	mov	r0, r6
 8004d52:	4639      	mov	r1, r7
 8004d54:	f7fb fe50 	bl	80009f8 <__aeabi_dcmpgt>
 8004d58:	2800      	cmp	r0, #0
 8004d5a:	d163      	bne.n	8004e24 <_dtoa_r+0x6e4>
 8004d5c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004d60:	2000      	movs	r0, #0
 8004d62:	49a9      	ldr	r1, [pc, #676]	; (8005008 <_dtoa_r+0x8c8>)
 8004d64:	f7fb fa00 	bl	8000168 <__aeabi_dsub>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	460b      	mov	r3, r1
 8004d6c:	4630      	mov	r0, r6
 8004d6e:	4639      	mov	r1, r7
 8004d70:	f7fb fe24 	bl	80009bc <__aeabi_dcmplt>
 8004d74:	2800      	cmp	r0, #0
 8004d76:	f43f af1d 	beq.w	8004bb4 <_dtoa_r+0x474>
 8004d7a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004d7c:	1e7b      	subs	r3, r7, #1
 8004d7e:	9314      	str	r3, [sp, #80]	; 0x50
 8004d80:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8004d84:	2b30      	cmp	r3, #48	; 0x30
 8004d86:	d0f8      	beq.n	8004d7a <_dtoa_r+0x63a>
 8004d88:	46c2      	mov	sl, r8
 8004d8a:	e03b      	b.n	8004e04 <_dtoa_r+0x6c4>
 8004d8c:	4b9f      	ldr	r3, [pc, #636]	; (800500c <_dtoa_r+0x8cc>)
 8004d8e:	f7fb fba3 	bl	80004d8 <__aeabi_dmul>
 8004d92:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004d96:	e7bc      	b.n	8004d12 <_dtoa_r+0x5d2>
 8004d98:	9f03      	ldr	r7, [sp, #12]
 8004d9a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8004d9e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004da2:	4640      	mov	r0, r8
 8004da4:	4649      	mov	r1, r9
 8004da6:	f7fb fcc1 	bl	800072c <__aeabi_ddiv>
 8004daa:	f7fb fe45 	bl	8000a38 <__aeabi_d2iz>
 8004dae:	4604      	mov	r4, r0
 8004db0:	f7fb fb28 	bl	8000404 <__aeabi_i2d>
 8004db4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004db8:	f7fb fb8e 	bl	80004d8 <__aeabi_dmul>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	460b      	mov	r3, r1
 8004dc0:	4640      	mov	r0, r8
 8004dc2:	4649      	mov	r1, r9
 8004dc4:	f7fb f9d0 	bl	8000168 <__aeabi_dsub>
 8004dc8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8004dcc:	f807 6b01 	strb.w	r6, [r7], #1
 8004dd0:	9e03      	ldr	r6, [sp, #12]
 8004dd2:	f8dd c020 	ldr.w	ip, [sp, #32]
 8004dd6:	1bbe      	subs	r6, r7, r6
 8004dd8:	45b4      	cmp	ip, r6
 8004dda:	4602      	mov	r2, r0
 8004ddc:	460b      	mov	r3, r1
 8004dde:	d136      	bne.n	8004e4e <_dtoa_r+0x70e>
 8004de0:	f7fb f9c4 	bl	800016c <__adddf3>
 8004de4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004de8:	4680      	mov	r8, r0
 8004dea:	4689      	mov	r9, r1
 8004dec:	f7fb fe04 	bl	80009f8 <__aeabi_dcmpgt>
 8004df0:	bb58      	cbnz	r0, 8004e4a <_dtoa_r+0x70a>
 8004df2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004df6:	4640      	mov	r0, r8
 8004df8:	4649      	mov	r1, r9
 8004dfa:	f7fb fdd5 	bl	80009a8 <__aeabi_dcmpeq>
 8004dfe:	b108      	cbz	r0, 8004e04 <_dtoa_r+0x6c4>
 8004e00:	07e1      	lsls	r1, r4, #31
 8004e02:	d422      	bmi.n	8004e4a <_dtoa_r+0x70a>
 8004e04:	4628      	mov	r0, r5
 8004e06:	4659      	mov	r1, fp
 8004e08:	f000 faf0 	bl	80053ec <_Bfree>
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	703b      	strb	r3, [r7, #0]
 8004e10:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8004e12:	f10a 0001 	add.w	r0, sl, #1
 8004e16:	6018      	str	r0, [r3, #0]
 8004e18:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	f43f acde 	beq.w	80047dc <_dtoa_r+0x9c>
 8004e20:	601f      	str	r7, [r3, #0]
 8004e22:	e4db      	b.n	80047dc <_dtoa_r+0x9c>
 8004e24:	4627      	mov	r7, r4
 8004e26:	463b      	mov	r3, r7
 8004e28:	461f      	mov	r7, r3
 8004e2a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004e2e:	2a39      	cmp	r2, #57	; 0x39
 8004e30:	d107      	bne.n	8004e42 <_dtoa_r+0x702>
 8004e32:	9a03      	ldr	r2, [sp, #12]
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d1f7      	bne.n	8004e28 <_dtoa_r+0x6e8>
 8004e38:	2230      	movs	r2, #48	; 0x30
 8004e3a:	9903      	ldr	r1, [sp, #12]
 8004e3c:	f108 0801 	add.w	r8, r8, #1
 8004e40:	700a      	strb	r2, [r1, #0]
 8004e42:	781a      	ldrb	r2, [r3, #0]
 8004e44:	3201      	adds	r2, #1
 8004e46:	701a      	strb	r2, [r3, #0]
 8004e48:	e79e      	b.n	8004d88 <_dtoa_r+0x648>
 8004e4a:	46d0      	mov	r8, sl
 8004e4c:	e7eb      	b.n	8004e26 <_dtoa_r+0x6e6>
 8004e4e:	2200      	movs	r2, #0
 8004e50:	4b6e      	ldr	r3, [pc, #440]	; (800500c <_dtoa_r+0x8cc>)
 8004e52:	f7fb fb41 	bl	80004d8 <__aeabi_dmul>
 8004e56:	2200      	movs	r2, #0
 8004e58:	2300      	movs	r3, #0
 8004e5a:	4680      	mov	r8, r0
 8004e5c:	4689      	mov	r9, r1
 8004e5e:	f7fb fda3 	bl	80009a8 <__aeabi_dcmpeq>
 8004e62:	2800      	cmp	r0, #0
 8004e64:	d09b      	beq.n	8004d9e <_dtoa_r+0x65e>
 8004e66:	e7cd      	b.n	8004e04 <_dtoa_r+0x6c4>
 8004e68:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004e6a:	2a00      	cmp	r2, #0
 8004e6c:	f000 80d0 	beq.w	8005010 <_dtoa_r+0x8d0>
 8004e70:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004e72:	2a01      	cmp	r2, #1
 8004e74:	f300 80ae 	bgt.w	8004fd4 <_dtoa_r+0x894>
 8004e78:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004e7a:	2a00      	cmp	r2, #0
 8004e7c:	f000 80a6 	beq.w	8004fcc <_dtoa_r+0x88c>
 8004e80:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004e84:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004e86:	9f06      	ldr	r7, [sp, #24]
 8004e88:	9a06      	ldr	r2, [sp, #24]
 8004e8a:	2101      	movs	r1, #1
 8004e8c:	441a      	add	r2, r3
 8004e8e:	9206      	str	r2, [sp, #24]
 8004e90:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004e92:	4628      	mov	r0, r5
 8004e94:	441a      	add	r2, r3
 8004e96:	9209      	str	r2, [sp, #36]	; 0x24
 8004e98:	f000 fb5e 	bl	8005558 <__i2b>
 8004e9c:	4606      	mov	r6, r0
 8004e9e:	2f00      	cmp	r7, #0
 8004ea0:	dd0c      	ble.n	8004ebc <_dtoa_r+0x77c>
 8004ea2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	dd09      	ble.n	8004ebc <_dtoa_r+0x77c>
 8004ea8:	42bb      	cmp	r3, r7
 8004eaa:	bfa8      	it	ge
 8004eac:	463b      	movge	r3, r7
 8004eae:	9a06      	ldr	r2, [sp, #24]
 8004eb0:	1aff      	subs	r7, r7, r3
 8004eb2:	1ad2      	subs	r2, r2, r3
 8004eb4:	9206      	str	r2, [sp, #24]
 8004eb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004eb8:	1ad3      	subs	r3, r2, r3
 8004eba:	9309      	str	r3, [sp, #36]	; 0x24
 8004ebc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ebe:	b1f3      	cbz	r3, 8004efe <_dtoa_r+0x7be>
 8004ec0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	f000 80a8 	beq.w	8005018 <_dtoa_r+0x8d8>
 8004ec8:	2c00      	cmp	r4, #0
 8004eca:	dd10      	ble.n	8004eee <_dtoa_r+0x7ae>
 8004ecc:	4631      	mov	r1, r6
 8004ece:	4622      	mov	r2, r4
 8004ed0:	4628      	mov	r0, r5
 8004ed2:	f000 fbff 	bl	80056d4 <__pow5mult>
 8004ed6:	465a      	mov	r2, fp
 8004ed8:	4601      	mov	r1, r0
 8004eda:	4606      	mov	r6, r0
 8004edc:	4628      	mov	r0, r5
 8004ede:	f000 fb51 	bl	8005584 <__multiply>
 8004ee2:	4680      	mov	r8, r0
 8004ee4:	4659      	mov	r1, fp
 8004ee6:	4628      	mov	r0, r5
 8004ee8:	f000 fa80 	bl	80053ec <_Bfree>
 8004eec:	46c3      	mov	fp, r8
 8004eee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ef0:	1b1a      	subs	r2, r3, r4
 8004ef2:	d004      	beq.n	8004efe <_dtoa_r+0x7be>
 8004ef4:	4659      	mov	r1, fp
 8004ef6:	4628      	mov	r0, r5
 8004ef8:	f000 fbec 	bl	80056d4 <__pow5mult>
 8004efc:	4683      	mov	fp, r0
 8004efe:	2101      	movs	r1, #1
 8004f00:	4628      	mov	r0, r5
 8004f02:	f000 fb29 	bl	8005558 <__i2b>
 8004f06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004f08:	4604      	mov	r4, r0
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	f340 8086 	ble.w	800501c <_dtoa_r+0x8dc>
 8004f10:	461a      	mov	r2, r3
 8004f12:	4601      	mov	r1, r0
 8004f14:	4628      	mov	r0, r5
 8004f16:	f000 fbdd 	bl	80056d4 <__pow5mult>
 8004f1a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004f1c:	4604      	mov	r4, r0
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	dd7f      	ble.n	8005022 <_dtoa_r+0x8e2>
 8004f22:	f04f 0800 	mov.w	r8, #0
 8004f26:	6923      	ldr	r3, [r4, #16]
 8004f28:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004f2c:	6918      	ldr	r0, [r3, #16]
 8004f2e:	f000 fac5 	bl	80054bc <__hi0bits>
 8004f32:	f1c0 0020 	rsb	r0, r0, #32
 8004f36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f38:	4418      	add	r0, r3
 8004f3a:	f010 001f 	ands.w	r0, r0, #31
 8004f3e:	f000 8092 	beq.w	8005066 <_dtoa_r+0x926>
 8004f42:	f1c0 0320 	rsb	r3, r0, #32
 8004f46:	2b04      	cmp	r3, #4
 8004f48:	f340 808a 	ble.w	8005060 <_dtoa_r+0x920>
 8004f4c:	f1c0 001c 	rsb	r0, r0, #28
 8004f50:	9b06      	ldr	r3, [sp, #24]
 8004f52:	4407      	add	r7, r0
 8004f54:	4403      	add	r3, r0
 8004f56:	9306      	str	r3, [sp, #24]
 8004f58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f5a:	4403      	add	r3, r0
 8004f5c:	9309      	str	r3, [sp, #36]	; 0x24
 8004f5e:	9b06      	ldr	r3, [sp, #24]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	dd05      	ble.n	8004f70 <_dtoa_r+0x830>
 8004f64:	4659      	mov	r1, fp
 8004f66:	461a      	mov	r2, r3
 8004f68:	4628      	mov	r0, r5
 8004f6a:	f000 fc0d 	bl	8005788 <__lshift>
 8004f6e:	4683      	mov	fp, r0
 8004f70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	dd05      	ble.n	8004f82 <_dtoa_r+0x842>
 8004f76:	4621      	mov	r1, r4
 8004f78:	461a      	mov	r2, r3
 8004f7a:	4628      	mov	r0, r5
 8004f7c:	f000 fc04 	bl	8005788 <__lshift>
 8004f80:	4604      	mov	r4, r0
 8004f82:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d070      	beq.n	800506a <_dtoa_r+0x92a>
 8004f88:	4621      	mov	r1, r4
 8004f8a:	4658      	mov	r0, fp
 8004f8c:	f000 fc6c 	bl	8005868 <__mcmp>
 8004f90:	2800      	cmp	r0, #0
 8004f92:	da6a      	bge.n	800506a <_dtoa_r+0x92a>
 8004f94:	2300      	movs	r3, #0
 8004f96:	4659      	mov	r1, fp
 8004f98:	220a      	movs	r2, #10
 8004f9a:	4628      	mov	r0, r5
 8004f9c:	f000 fa48 	bl	8005430 <__multadd>
 8004fa0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004fa2:	4683      	mov	fp, r0
 8004fa4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	f000 8194 	beq.w	80052d6 <_dtoa_r+0xb96>
 8004fae:	4631      	mov	r1, r6
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	220a      	movs	r2, #10
 8004fb4:	4628      	mov	r0, r5
 8004fb6:	f000 fa3b 	bl	8005430 <__multadd>
 8004fba:	f1b9 0f00 	cmp.w	r9, #0
 8004fbe:	4606      	mov	r6, r0
 8004fc0:	f300 8093 	bgt.w	80050ea <_dtoa_r+0x9aa>
 8004fc4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004fc6:	2b02      	cmp	r3, #2
 8004fc8:	dc57      	bgt.n	800507a <_dtoa_r+0x93a>
 8004fca:	e08e      	b.n	80050ea <_dtoa_r+0x9aa>
 8004fcc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004fce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004fd2:	e757      	b.n	8004e84 <_dtoa_r+0x744>
 8004fd4:	9b08      	ldr	r3, [sp, #32]
 8004fd6:	1e5c      	subs	r4, r3, #1
 8004fd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004fda:	42a3      	cmp	r3, r4
 8004fdc:	bfb7      	itett	lt
 8004fde:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8004fe0:	1b1c      	subge	r4, r3, r4
 8004fe2:	1ae2      	sublt	r2, r4, r3
 8004fe4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8004fe6:	bfbe      	ittt	lt
 8004fe8:	940a      	strlt	r4, [sp, #40]	; 0x28
 8004fea:	189b      	addlt	r3, r3, r2
 8004fec:	930e      	strlt	r3, [sp, #56]	; 0x38
 8004fee:	9b08      	ldr	r3, [sp, #32]
 8004ff0:	bfb8      	it	lt
 8004ff2:	2400      	movlt	r4, #0
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	bfbb      	ittet	lt
 8004ff8:	9b06      	ldrlt	r3, [sp, #24]
 8004ffa:	9a08      	ldrlt	r2, [sp, #32]
 8004ffc:	9f06      	ldrge	r7, [sp, #24]
 8004ffe:	1a9f      	sublt	r7, r3, r2
 8005000:	bfac      	ite	ge
 8005002:	9b08      	ldrge	r3, [sp, #32]
 8005004:	2300      	movlt	r3, #0
 8005006:	e73f      	b.n	8004e88 <_dtoa_r+0x748>
 8005008:	3fe00000 	.word	0x3fe00000
 800500c:	40240000 	.word	0x40240000
 8005010:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005012:	9f06      	ldr	r7, [sp, #24]
 8005014:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005016:	e742      	b.n	8004e9e <_dtoa_r+0x75e>
 8005018:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800501a:	e76b      	b.n	8004ef4 <_dtoa_r+0x7b4>
 800501c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800501e:	2b01      	cmp	r3, #1
 8005020:	dc19      	bgt.n	8005056 <_dtoa_r+0x916>
 8005022:	9b04      	ldr	r3, [sp, #16]
 8005024:	b9bb      	cbnz	r3, 8005056 <_dtoa_r+0x916>
 8005026:	9b05      	ldr	r3, [sp, #20]
 8005028:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800502c:	b99b      	cbnz	r3, 8005056 <_dtoa_r+0x916>
 800502e:	9b05      	ldr	r3, [sp, #20]
 8005030:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005034:	0d1b      	lsrs	r3, r3, #20
 8005036:	051b      	lsls	r3, r3, #20
 8005038:	b183      	cbz	r3, 800505c <_dtoa_r+0x91c>
 800503a:	f04f 0801 	mov.w	r8, #1
 800503e:	9b06      	ldr	r3, [sp, #24]
 8005040:	3301      	adds	r3, #1
 8005042:	9306      	str	r3, [sp, #24]
 8005044:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005046:	3301      	adds	r3, #1
 8005048:	9309      	str	r3, [sp, #36]	; 0x24
 800504a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800504c:	2b00      	cmp	r3, #0
 800504e:	f47f af6a 	bne.w	8004f26 <_dtoa_r+0x7e6>
 8005052:	2001      	movs	r0, #1
 8005054:	e76f      	b.n	8004f36 <_dtoa_r+0x7f6>
 8005056:	f04f 0800 	mov.w	r8, #0
 800505a:	e7f6      	b.n	800504a <_dtoa_r+0x90a>
 800505c:	4698      	mov	r8, r3
 800505e:	e7f4      	b.n	800504a <_dtoa_r+0x90a>
 8005060:	f43f af7d 	beq.w	8004f5e <_dtoa_r+0x81e>
 8005064:	4618      	mov	r0, r3
 8005066:	301c      	adds	r0, #28
 8005068:	e772      	b.n	8004f50 <_dtoa_r+0x810>
 800506a:	9b08      	ldr	r3, [sp, #32]
 800506c:	2b00      	cmp	r3, #0
 800506e:	dc36      	bgt.n	80050de <_dtoa_r+0x99e>
 8005070:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005072:	2b02      	cmp	r3, #2
 8005074:	dd33      	ble.n	80050de <_dtoa_r+0x99e>
 8005076:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800507a:	f1b9 0f00 	cmp.w	r9, #0
 800507e:	d10d      	bne.n	800509c <_dtoa_r+0x95c>
 8005080:	4621      	mov	r1, r4
 8005082:	464b      	mov	r3, r9
 8005084:	2205      	movs	r2, #5
 8005086:	4628      	mov	r0, r5
 8005088:	f000 f9d2 	bl	8005430 <__multadd>
 800508c:	4601      	mov	r1, r0
 800508e:	4604      	mov	r4, r0
 8005090:	4658      	mov	r0, fp
 8005092:	f000 fbe9 	bl	8005868 <__mcmp>
 8005096:	2800      	cmp	r0, #0
 8005098:	f73f adb8 	bgt.w	8004c0c <_dtoa_r+0x4cc>
 800509c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800509e:	9f03      	ldr	r7, [sp, #12]
 80050a0:	ea6f 0a03 	mvn.w	sl, r3
 80050a4:	f04f 0800 	mov.w	r8, #0
 80050a8:	4621      	mov	r1, r4
 80050aa:	4628      	mov	r0, r5
 80050ac:	f000 f99e 	bl	80053ec <_Bfree>
 80050b0:	2e00      	cmp	r6, #0
 80050b2:	f43f aea7 	beq.w	8004e04 <_dtoa_r+0x6c4>
 80050b6:	f1b8 0f00 	cmp.w	r8, #0
 80050ba:	d005      	beq.n	80050c8 <_dtoa_r+0x988>
 80050bc:	45b0      	cmp	r8, r6
 80050be:	d003      	beq.n	80050c8 <_dtoa_r+0x988>
 80050c0:	4641      	mov	r1, r8
 80050c2:	4628      	mov	r0, r5
 80050c4:	f000 f992 	bl	80053ec <_Bfree>
 80050c8:	4631      	mov	r1, r6
 80050ca:	4628      	mov	r0, r5
 80050cc:	f000 f98e 	bl	80053ec <_Bfree>
 80050d0:	e698      	b.n	8004e04 <_dtoa_r+0x6c4>
 80050d2:	2400      	movs	r4, #0
 80050d4:	4626      	mov	r6, r4
 80050d6:	e7e1      	b.n	800509c <_dtoa_r+0x95c>
 80050d8:	46c2      	mov	sl, r8
 80050da:	4626      	mov	r6, r4
 80050dc:	e596      	b.n	8004c0c <_dtoa_r+0x4cc>
 80050de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80050e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	f000 80fd 	beq.w	80052e4 <_dtoa_r+0xba4>
 80050ea:	2f00      	cmp	r7, #0
 80050ec:	dd05      	ble.n	80050fa <_dtoa_r+0x9ba>
 80050ee:	4631      	mov	r1, r6
 80050f0:	463a      	mov	r2, r7
 80050f2:	4628      	mov	r0, r5
 80050f4:	f000 fb48 	bl	8005788 <__lshift>
 80050f8:	4606      	mov	r6, r0
 80050fa:	f1b8 0f00 	cmp.w	r8, #0
 80050fe:	d05c      	beq.n	80051ba <_dtoa_r+0xa7a>
 8005100:	4628      	mov	r0, r5
 8005102:	6871      	ldr	r1, [r6, #4]
 8005104:	f000 f932 	bl	800536c <_Balloc>
 8005108:	4607      	mov	r7, r0
 800510a:	b928      	cbnz	r0, 8005118 <_dtoa_r+0x9d8>
 800510c:	4602      	mov	r2, r0
 800510e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005112:	4b7f      	ldr	r3, [pc, #508]	; (8005310 <_dtoa_r+0xbd0>)
 8005114:	f7ff bb28 	b.w	8004768 <_dtoa_r+0x28>
 8005118:	6932      	ldr	r2, [r6, #16]
 800511a:	f106 010c 	add.w	r1, r6, #12
 800511e:	3202      	adds	r2, #2
 8005120:	0092      	lsls	r2, r2, #2
 8005122:	300c      	adds	r0, #12
 8005124:	f000 f914 	bl	8005350 <memcpy>
 8005128:	2201      	movs	r2, #1
 800512a:	4639      	mov	r1, r7
 800512c:	4628      	mov	r0, r5
 800512e:	f000 fb2b 	bl	8005788 <__lshift>
 8005132:	46b0      	mov	r8, r6
 8005134:	4606      	mov	r6, r0
 8005136:	9b03      	ldr	r3, [sp, #12]
 8005138:	3301      	adds	r3, #1
 800513a:	9308      	str	r3, [sp, #32]
 800513c:	9b03      	ldr	r3, [sp, #12]
 800513e:	444b      	add	r3, r9
 8005140:	930a      	str	r3, [sp, #40]	; 0x28
 8005142:	9b04      	ldr	r3, [sp, #16]
 8005144:	f003 0301 	and.w	r3, r3, #1
 8005148:	9309      	str	r3, [sp, #36]	; 0x24
 800514a:	9b08      	ldr	r3, [sp, #32]
 800514c:	4621      	mov	r1, r4
 800514e:	3b01      	subs	r3, #1
 8005150:	4658      	mov	r0, fp
 8005152:	9304      	str	r3, [sp, #16]
 8005154:	f7ff fa68 	bl	8004628 <quorem>
 8005158:	4603      	mov	r3, r0
 800515a:	4641      	mov	r1, r8
 800515c:	3330      	adds	r3, #48	; 0x30
 800515e:	9006      	str	r0, [sp, #24]
 8005160:	4658      	mov	r0, fp
 8005162:	930b      	str	r3, [sp, #44]	; 0x2c
 8005164:	f000 fb80 	bl	8005868 <__mcmp>
 8005168:	4632      	mov	r2, r6
 800516a:	4681      	mov	r9, r0
 800516c:	4621      	mov	r1, r4
 800516e:	4628      	mov	r0, r5
 8005170:	f000 fb96 	bl	80058a0 <__mdiff>
 8005174:	68c2      	ldr	r2, [r0, #12]
 8005176:	4607      	mov	r7, r0
 8005178:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800517a:	bb02      	cbnz	r2, 80051be <_dtoa_r+0xa7e>
 800517c:	4601      	mov	r1, r0
 800517e:	4658      	mov	r0, fp
 8005180:	f000 fb72 	bl	8005868 <__mcmp>
 8005184:	4602      	mov	r2, r0
 8005186:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005188:	4639      	mov	r1, r7
 800518a:	4628      	mov	r0, r5
 800518c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8005190:	f000 f92c 	bl	80053ec <_Bfree>
 8005194:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005196:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005198:	9f08      	ldr	r7, [sp, #32]
 800519a:	ea43 0102 	orr.w	r1, r3, r2
 800519e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051a0:	430b      	orrs	r3, r1
 80051a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80051a4:	d10d      	bne.n	80051c2 <_dtoa_r+0xa82>
 80051a6:	2b39      	cmp	r3, #57	; 0x39
 80051a8:	d029      	beq.n	80051fe <_dtoa_r+0xabe>
 80051aa:	f1b9 0f00 	cmp.w	r9, #0
 80051ae:	dd01      	ble.n	80051b4 <_dtoa_r+0xa74>
 80051b0:	9b06      	ldr	r3, [sp, #24]
 80051b2:	3331      	adds	r3, #49	; 0x31
 80051b4:	9a04      	ldr	r2, [sp, #16]
 80051b6:	7013      	strb	r3, [r2, #0]
 80051b8:	e776      	b.n	80050a8 <_dtoa_r+0x968>
 80051ba:	4630      	mov	r0, r6
 80051bc:	e7b9      	b.n	8005132 <_dtoa_r+0x9f2>
 80051be:	2201      	movs	r2, #1
 80051c0:	e7e2      	b.n	8005188 <_dtoa_r+0xa48>
 80051c2:	f1b9 0f00 	cmp.w	r9, #0
 80051c6:	db06      	blt.n	80051d6 <_dtoa_r+0xa96>
 80051c8:	9922      	ldr	r1, [sp, #136]	; 0x88
 80051ca:	ea41 0909 	orr.w	r9, r1, r9
 80051ce:	9909      	ldr	r1, [sp, #36]	; 0x24
 80051d0:	ea59 0101 	orrs.w	r1, r9, r1
 80051d4:	d120      	bne.n	8005218 <_dtoa_r+0xad8>
 80051d6:	2a00      	cmp	r2, #0
 80051d8:	ddec      	ble.n	80051b4 <_dtoa_r+0xa74>
 80051da:	4659      	mov	r1, fp
 80051dc:	2201      	movs	r2, #1
 80051de:	4628      	mov	r0, r5
 80051e0:	9308      	str	r3, [sp, #32]
 80051e2:	f000 fad1 	bl	8005788 <__lshift>
 80051e6:	4621      	mov	r1, r4
 80051e8:	4683      	mov	fp, r0
 80051ea:	f000 fb3d 	bl	8005868 <__mcmp>
 80051ee:	2800      	cmp	r0, #0
 80051f0:	9b08      	ldr	r3, [sp, #32]
 80051f2:	dc02      	bgt.n	80051fa <_dtoa_r+0xaba>
 80051f4:	d1de      	bne.n	80051b4 <_dtoa_r+0xa74>
 80051f6:	07da      	lsls	r2, r3, #31
 80051f8:	d5dc      	bpl.n	80051b4 <_dtoa_r+0xa74>
 80051fa:	2b39      	cmp	r3, #57	; 0x39
 80051fc:	d1d8      	bne.n	80051b0 <_dtoa_r+0xa70>
 80051fe:	2339      	movs	r3, #57	; 0x39
 8005200:	9a04      	ldr	r2, [sp, #16]
 8005202:	7013      	strb	r3, [r2, #0]
 8005204:	463b      	mov	r3, r7
 8005206:	461f      	mov	r7, r3
 8005208:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800520c:	3b01      	subs	r3, #1
 800520e:	2a39      	cmp	r2, #57	; 0x39
 8005210:	d050      	beq.n	80052b4 <_dtoa_r+0xb74>
 8005212:	3201      	adds	r2, #1
 8005214:	701a      	strb	r2, [r3, #0]
 8005216:	e747      	b.n	80050a8 <_dtoa_r+0x968>
 8005218:	2a00      	cmp	r2, #0
 800521a:	dd03      	ble.n	8005224 <_dtoa_r+0xae4>
 800521c:	2b39      	cmp	r3, #57	; 0x39
 800521e:	d0ee      	beq.n	80051fe <_dtoa_r+0xabe>
 8005220:	3301      	adds	r3, #1
 8005222:	e7c7      	b.n	80051b4 <_dtoa_r+0xa74>
 8005224:	9a08      	ldr	r2, [sp, #32]
 8005226:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005228:	f802 3c01 	strb.w	r3, [r2, #-1]
 800522c:	428a      	cmp	r2, r1
 800522e:	d02a      	beq.n	8005286 <_dtoa_r+0xb46>
 8005230:	4659      	mov	r1, fp
 8005232:	2300      	movs	r3, #0
 8005234:	220a      	movs	r2, #10
 8005236:	4628      	mov	r0, r5
 8005238:	f000 f8fa 	bl	8005430 <__multadd>
 800523c:	45b0      	cmp	r8, r6
 800523e:	4683      	mov	fp, r0
 8005240:	f04f 0300 	mov.w	r3, #0
 8005244:	f04f 020a 	mov.w	r2, #10
 8005248:	4641      	mov	r1, r8
 800524a:	4628      	mov	r0, r5
 800524c:	d107      	bne.n	800525e <_dtoa_r+0xb1e>
 800524e:	f000 f8ef 	bl	8005430 <__multadd>
 8005252:	4680      	mov	r8, r0
 8005254:	4606      	mov	r6, r0
 8005256:	9b08      	ldr	r3, [sp, #32]
 8005258:	3301      	adds	r3, #1
 800525a:	9308      	str	r3, [sp, #32]
 800525c:	e775      	b.n	800514a <_dtoa_r+0xa0a>
 800525e:	f000 f8e7 	bl	8005430 <__multadd>
 8005262:	4631      	mov	r1, r6
 8005264:	4680      	mov	r8, r0
 8005266:	2300      	movs	r3, #0
 8005268:	220a      	movs	r2, #10
 800526a:	4628      	mov	r0, r5
 800526c:	f000 f8e0 	bl	8005430 <__multadd>
 8005270:	4606      	mov	r6, r0
 8005272:	e7f0      	b.n	8005256 <_dtoa_r+0xb16>
 8005274:	f1b9 0f00 	cmp.w	r9, #0
 8005278:	bfcc      	ite	gt
 800527a:	464f      	movgt	r7, r9
 800527c:	2701      	movle	r7, #1
 800527e:	f04f 0800 	mov.w	r8, #0
 8005282:	9a03      	ldr	r2, [sp, #12]
 8005284:	4417      	add	r7, r2
 8005286:	4659      	mov	r1, fp
 8005288:	2201      	movs	r2, #1
 800528a:	4628      	mov	r0, r5
 800528c:	9308      	str	r3, [sp, #32]
 800528e:	f000 fa7b 	bl	8005788 <__lshift>
 8005292:	4621      	mov	r1, r4
 8005294:	4683      	mov	fp, r0
 8005296:	f000 fae7 	bl	8005868 <__mcmp>
 800529a:	2800      	cmp	r0, #0
 800529c:	dcb2      	bgt.n	8005204 <_dtoa_r+0xac4>
 800529e:	d102      	bne.n	80052a6 <_dtoa_r+0xb66>
 80052a0:	9b08      	ldr	r3, [sp, #32]
 80052a2:	07db      	lsls	r3, r3, #31
 80052a4:	d4ae      	bmi.n	8005204 <_dtoa_r+0xac4>
 80052a6:	463b      	mov	r3, r7
 80052a8:	461f      	mov	r7, r3
 80052aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80052ae:	2a30      	cmp	r2, #48	; 0x30
 80052b0:	d0fa      	beq.n	80052a8 <_dtoa_r+0xb68>
 80052b2:	e6f9      	b.n	80050a8 <_dtoa_r+0x968>
 80052b4:	9a03      	ldr	r2, [sp, #12]
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d1a5      	bne.n	8005206 <_dtoa_r+0xac6>
 80052ba:	2331      	movs	r3, #49	; 0x31
 80052bc:	f10a 0a01 	add.w	sl, sl, #1
 80052c0:	e779      	b.n	80051b6 <_dtoa_r+0xa76>
 80052c2:	4b14      	ldr	r3, [pc, #80]	; (8005314 <_dtoa_r+0xbd4>)
 80052c4:	f7ff baa8 	b.w	8004818 <_dtoa_r+0xd8>
 80052c8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	f47f aa81 	bne.w	80047d2 <_dtoa_r+0x92>
 80052d0:	4b11      	ldr	r3, [pc, #68]	; (8005318 <_dtoa_r+0xbd8>)
 80052d2:	f7ff baa1 	b.w	8004818 <_dtoa_r+0xd8>
 80052d6:	f1b9 0f00 	cmp.w	r9, #0
 80052da:	dc03      	bgt.n	80052e4 <_dtoa_r+0xba4>
 80052dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80052de:	2b02      	cmp	r3, #2
 80052e0:	f73f aecb 	bgt.w	800507a <_dtoa_r+0x93a>
 80052e4:	9f03      	ldr	r7, [sp, #12]
 80052e6:	4621      	mov	r1, r4
 80052e8:	4658      	mov	r0, fp
 80052ea:	f7ff f99d 	bl	8004628 <quorem>
 80052ee:	9a03      	ldr	r2, [sp, #12]
 80052f0:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80052f4:	f807 3b01 	strb.w	r3, [r7], #1
 80052f8:	1aba      	subs	r2, r7, r2
 80052fa:	4591      	cmp	r9, r2
 80052fc:	ddba      	ble.n	8005274 <_dtoa_r+0xb34>
 80052fe:	4659      	mov	r1, fp
 8005300:	2300      	movs	r3, #0
 8005302:	220a      	movs	r2, #10
 8005304:	4628      	mov	r0, r5
 8005306:	f000 f893 	bl	8005430 <__multadd>
 800530a:	4683      	mov	fp, r0
 800530c:	e7eb      	b.n	80052e6 <_dtoa_r+0xba6>
 800530e:	bf00      	nop
 8005310:	08006877 	.word	0x08006877
 8005314:	080067d4 	.word	0x080067d4
 8005318:	080067f8 	.word	0x080067f8

0800531c <_localeconv_r>:
 800531c:	4800      	ldr	r0, [pc, #0]	; (8005320 <_localeconv_r+0x4>)
 800531e:	4770      	bx	lr
 8005320:	20000174 	.word	0x20000174

08005324 <malloc>:
 8005324:	4b02      	ldr	r3, [pc, #8]	; (8005330 <malloc+0xc>)
 8005326:	4601      	mov	r1, r0
 8005328:	6818      	ldr	r0, [r3, #0]
 800532a:	f000 bc1d 	b.w	8005b68 <_malloc_r>
 800532e:	bf00      	nop
 8005330:	20000020 	.word	0x20000020

08005334 <memchr>:
 8005334:	4603      	mov	r3, r0
 8005336:	b510      	push	{r4, lr}
 8005338:	b2c9      	uxtb	r1, r1
 800533a:	4402      	add	r2, r0
 800533c:	4293      	cmp	r3, r2
 800533e:	4618      	mov	r0, r3
 8005340:	d101      	bne.n	8005346 <memchr+0x12>
 8005342:	2000      	movs	r0, #0
 8005344:	e003      	b.n	800534e <memchr+0x1a>
 8005346:	7804      	ldrb	r4, [r0, #0]
 8005348:	3301      	adds	r3, #1
 800534a:	428c      	cmp	r4, r1
 800534c:	d1f6      	bne.n	800533c <memchr+0x8>
 800534e:	bd10      	pop	{r4, pc}

08005350 <memcpy>:
 8005350:	440a      	add	r2, r1
 8005352:	4291      	cmp	r1, r2
 8005354:	f100 33ff 	add.w	r3, r0, #4294967295
 8005358:	d100      	bne.n	800535c <memcpy+0xc>
 800535a:	4770      	bx	lr
 800535c:	b510      	push	{r4, lr}
 800535e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005362:	4291      	cmp	r1, r2
 8005364:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005368:	d1f9      	bne.n	800535e <memcpy+0xe>
 800536a:	bd10      	pop	{r4, pc}

0800536c <_Balloc>:
 800536c:	b570      	push	{r4, r5, r6, lr}
 800536e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005370:	4604      	mov	r4, r0
 8005372:	460d      	mov	r5, r1
 8005374:	b976      	cbnz	r6, 8005394 <_Balloc+0x28>
 8005376:	2010      	movs	r0, #16
 8005378:	f7ff ffd4 	bl	8005324 <malloc>
 800537c:	4602      	mov	r2, r0
 800537e:	6260      	str	r0, [r4, #36]	; 0x24
 8005380:	b920      	cbnz	r0, 800538c <_Balloc+0x20>
 8005382:	2166      	movs	r1, #102	; 0x66
 8005384:	4b17      	ldr	r3, [pc, #92]	; (80053e4 <_Balloc+0x78>)
 8005386:	4818      	ldr	r0, [pc, #96]	; (80053e8 <_Balloc+0x7c>)
 8005388:	f000 fc72 	bl	8005c70 <__assert_func>
 800538c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005390:	6006      	str	r6, [r0, #0]
 8005392:	60c6      	str	r6, [r0, #12]
 8005394:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005396:	68f3      	ldr	r3, [r6, #12]
 8005398:	b183      	cbz	r3, 80053bc <_Balloc+0x50>
 800539a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800539c:	68db      	ldr	r3, [r3, #12]
 800539e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80053a2:	b9b8      	cbnz	r0, 80053d4 <_Balloc+0x68>
 80053a4:	2101      	movs	r1, #1
 80053a6:	fa01 f605 	lsl.w	r6, r1, r5
 80053aa:	1d72      	adds	r2, r6, #5
 80053ac:	4620      	mov	r0, r4
 80053ae:	0092      	lsls	r2, r2, #2
 80053b0:	f000 fb5e 	bl	8005a70 <_calloc_r>
 80053b4:	b160      	cbz	r0, 80053d0 <_Balloc+0x64>
 80053b6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80053ba:	e00e      	b.n	80053da <_Balloc+0x6e>
 80053bc:	2221      	movs	r2, #33	; 0x21
 80053be:	2104      	movs	r1, #4
 80053c0:	4620      	mov	r0, r4
 80053c2:	f000 fb55 	bl	8005a70 <_calloc_r>
 80053c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80053c8:	60f0      	str	r0, [r6, #12]
 80053ca:	68db      	ldr	r3, [r3, #12]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d1e4      	bne.n	800539a <_Balloc+0x2e>
 80053d0:	2000      	movs	r0, #0
 80053d2:	bd70      	pop	{r4, r5, r6, pc}
 80053d4:	6802      	ldr	r2, [r0, #0]
 80053d6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80053da:	2300      	movs	r3, #0
 80053dc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80053e0:	e7f7      	b.n	80053d2 <_Balloc+0x66>
 80053e2:	bf00      	nop
 80053e4:	08006805 	.word	0x08006805
 80053e8:	08006888 	.word	0x08006888

080053ec <_Bfree>:
 80053ec:	b570      	push	{r4, r5, r6, lr}
 80053ee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80053f0:	4605      	mov	r5, r0
 80053f2:	460c      	mov	r4, r1
 80053f4:	b976      	cbnz	r6, 8005414 <_Bfree+0x28>
 80053f6:	2010      	movs	r0, #16
 80053f8:	f7ff ff94 	bl	8005324 <malloc>
 80053fc:	4602      	mov	r2, r0
 80053fe:	6268      	str	r0, [r5, #36]	; 0x24
 8005400:	b920      	cbnz	r0, 800540c <_Bfree+0x20>
 8005402:	218a      	movs	r1, #138	; 0x8a
 8005404:	4b08      	ldr	r3, [pc, #32]	; (8005428 <_Bfree+0x3c>)
 8005406:	4809      	ldr	r0, [pc, #36]	; (800542c <_Bfree+0x40>)
 8005408:	f000 fc32 	bl	8005c70 <__assert_func>
 800540c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005410:	6006      	str	r6, [r0, #0]
 8005412:	60c6      	str	r6, [r0, #12]
 8005414:	b13c      	cbz	r4, 8005426 <_Bfree+0x3a>
 8005416:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005418:	6862      	ldr	r2, [r4, #4]
 800541a:	68db      	ldr	r3, [r3, #12]
 800541c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005420:	6021      	str	r1, [r4, #0]
 8005422:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005426:	bd70      	pop	{r4, r5, r6, pc}
 8005428:	08006805 	.word	0x08006805
 800542c:	08006888 	.word	0x08006888

08005430 <__multadd>:
 8005430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005434:	4607      	mov	r7, r0
 8005436:	460c      	mov	r4, r1
 8005438:	461e      	mov	r6, r3
 800543a:	2000      	movs	r0, #0
 800543c:	690d      	ldr	r5, [r1, #16]
 800543e:	f101 0c14 	add.w	ip, r1, #20
 8005442:	f8dc 3000 	ldr.w	r3, [ip]
 8005446:	3001      	adds	r0, #1
 8005448:	b299      	uxth	r1, r3
 800544a:	fb02 6101 	mla	r1, r2, r1, r6
 800544e:	0c1e      	lsrs	r6, r3, #16
 8005450:	0c0b      	lsrs	r3, r1, #16
 8005452:	fb02 3306 	mla	r3, r2, r6, r3
 8005456:	b289      	uxth	r1, r1
 8005458:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800545c:	4285      	cmp	r5, r0
 800545e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005462:	f84c 1b04 	str.w	r1, [ip], #4
 8005466:	dcec      	bgt.n	8005442 <__multadd+0x12>
 8005468:	b30e      	cbz	r6, 80054ae <__multadd+0x7e>
 800546a:	68a3      	ldr	r3, [r4, #8]
 800546c:	42ab      	cmp	r3, r5
 800546e:	dc19      	bgt.n	80054a4 <__multadd+0x74>
 8005470:	6861      	ldr	r1, [r4, #4]
 8005472:	4638      	mov	r0, r7
 8005474:	3101      	adds	r1, #1
 8005476:	f7ff ff79 	bl	800536c <_Balloc>
 800547a:	4680      	mov	r8, r0
 800547c:	b928      	cbnz	r0, 800548a <__multadd+0x5a>
 800547e:	4602      	mov	r2, r0
 8005480:	21b5      	movs	r1, #181	; 0xb5
 8005482:	4b0c      	ldr	r3, [pc, #48]	; (80054b4 <__multadd+0x84>)
 8005484:	480c      	ldr	r0, [pc, #48]	; (80054b8 <__multadd+0x88>)
 8005486:	f000 fbf3 	bl	8005c70 <__assert_func>
 800548a:	6922      	ldr	r2, [r4, #16]
 800548c:	f104 010c 	add.w	r1, r4, #12
 8005490:	3202      	adds	r2, #2
 8005492:	0092      	lsls	r2, r2, #2
 8005494:	300c      	adds	r0, #12
 8005496:	f7ff ff5b 	bl	8005350 <memcpy>
 800549a:	4621      	mov	r1, r4
 800549c:	4638      	mov	r0, r7
 800549e:	f7ff ffa5 	bl	80053ec <_Bfree>
 80054a2:	4644      	mov	r4, r8
 80054a4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80054a8:	3501      	adds	r5, #1
 80054aa:	615e      	str	r6, [r3, #20]
 80054ac:	6125      	str	r5, [r4, #16]
 80054ae:	4620      	mov	r0, r4
 80054b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054b4:	08006877 	.word	0x08006877
 80054b8:	08006888 	.word	0x08006888

080054bc <__hi0bits>:
 80054bc:	0c02      	lsrs	r2, r0, #16
 80054be:	0412      	lsls	r2, r2, #16
 80054c0:	4603      	mov	r3, r0
 80054c2:	b9ca      	cbnz	r2, 80054f8 <__hi0bits+0x3c>
 80054c4:	0403      	lsls	r3, r0, #16
 80054c6:	2010      	movs	r0, #16
 80054c8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80054cc:	bf04      	itt	eq
 80054ce:	021b      	lsleq	r3, r3, #8
 80054d0:	3008      	addeq	r0, #8
 80054d2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80054d6:	bf04      	itt	eq
 80054d8:	011b      	lsleq	r3, r3, #4
 80054da:	3004      	addeq	r0, #4
 80054dc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80054e0:	bf04      	itt	eq
 80054e2:	009b      	lsleq	r3, r3, #2
 80054e4:	3002      	addeq	r0, #2
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	db05      	blt.n	80054f6 <__hi0bits+0x3a>
 80054ea:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80054ee:	f100 0001 	add.w	r0, r0, #1
 80054f2:	bf08      	it	eq
 80054f4:	2020      	moveq	r0, #32
 80054f6:	4770      	bx	lr
 80054f8:	2000      	movs	r0, #0
 80054fa:	e7e5      	b.n	80054c8 <__hi0bits+0xc>

080054fc <__lo0bits>:
 80054fc:	6803      	ldr	r3, [r0, #0]
 80054fe:	4602      	mov	r2, r0
 8005500:	f013 0007 	ands.w	r0, r3, #7
 8005504:	d00b      	beq.n	800551e <__lo0bits+0x22>
 8005506:	07d9      	lsls	r1, r3, #31
 8005508:	d421      	bmi.n	800554e <__lo0bits+0x52>
 800550a:	0798      	lsls	r0, r3, #30
 800550c:	bf49      	itett	mi
 800550e:	085b      	lsrmi	r3, r3, #1
 8005510:	089b      	lsrpl	r3, r3, #2
 8005512:	2001      	movmi	r0, #1
 8005514:	6013      	strmi	r3, [r2, #0]
 8005516:	bf5c      	itt	pl
 8005518:	2002      	movpl	r0, #2
 800551a:	6013      	strpl	r3, [r2, #0]
 800551c:	4770      	bx	lr
 800551e:	b299      	uxth	r1, r3
 8005520:	b909      	cbnz	r1, 8005526 <__lo0bits+0x2a>
 8005522:	2010      	movs	r0, #16
 8005524:	0c1b      	lsrs	r3, r3, #16
 8005526:	b2d9      	uxtb	r1, r3
 8005528:	b909      	cbnz	r1, 800552e <__lo0bits+0x32>
 800552a:	3008      	adds	r0, #8
 800552c:	0a1b      	lsrs	r3, r3, #8
 800552e:	0719      	lsls	r1, r3, #28
 8005530:	bf04      	itt	eq
 8005532:	091b      	lsreq	r3, r3, #4
 8005534:	3004      	addeq	r0, #4
 8005536:	0799      	lsls	r1, r3, #30
 8005538:	bf04      	itt	eq
 800553a:	089b      	lsreq	r3, r3, #2
 800553c:	3002      	addeq	r0, #2
 800553e:	07d9      	lsls	r1, r3, #31
 8005540:	d403      	bmi.n	800554a <__lo0bits+0x4e>
 8005542:	085b      	lsrs	r3, r3, #1
 8005544:	f100 0001 	add.w	r0, r0, #1
 8005548:	d003      	beq.n	8005552 <__lo0bits+0x56>
 800554a:	6013      	str	r3, [r2, #0]
 800554c:	4770      	bx	lr
 800554e:	2000      	movs	r0, #0
 8005550:	4770      	bx	lr
 8005552:	2020      	movs	r0, #32
 8005554:	4770      	bx	lr
	...

08005558 <__i2b>:
 8005558:	b510      	push	{r4, lr}
 800555a:	460c      	mov	r4, r1
 800555c:	2101      	movs	r1, #1
 800555e:	f7ff ff05 	bl	800536c <_Balloc>
 8005562:	4602      	mov	r2, r0
 8005564:	b928      	cbnz	r0, 8005572 <__i2b+0x1a>
 8005566:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800556a:	4b04      	ldr	r3, [pc, #16]	; (800557c <__i2b+0x24>)
 800556c:	4804      	ldr	r0, [pc, #16]	; (8005580 <__i2b+0x28>)
 800556e:	f000 fb7f 	bl	8005c70 <__assert_func>
 8005572:	2301      	movs	r3, #1
 8005574:	6144      	str	r4, [r0, #20]
 8005576:	6103      	str	r3, [r0, #16]
 8005578:	bd10      	pop	{r4, pc}
 800557a:	bf00      	nop
 800557c:	08006877 	.word	0x08006877
 8005580:	08006888 	.word	0x08006888

08005584 <__multiply>:
 8005584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005588:	4691      	mov	r9, r2
 800558a:	690a      	ldr	r2, [r1, #16]
 800558c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005590:	460c      	mov	r4, r1
 8005592:	429a      	cmp	r2, r3
 8005594:	bfbe      	ittt	lt
 8005596:	460b      	movlt	r3, r1
 8005598:	464c      	movlt	r4, r9
 800559a:	4699      	movlt	r9, r3
 800559c:	6927      	ldr	r7, [r4, #16]
 800559e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80055a2:	68a3      	ldr	r3, [r4, #8]
 80055a4:	6861      	ldr	r1, [r4, #4]
 80055a6:	eb07 060a 	add.w	r6, r7, sl
 80055aa:	42b3      	cmp	r3, r6
 80055ac:	b085      	sub	sp, #20
 80055ae:	bfb8      	it	lt
 80055b0:	3101      	addlt	r1, #1
 80055b2:	f7ff fedb 	bl	800536c <_Balloc>
 80055b6:	b930      	cbnz	r0, 80055c6 <__multiply+0x42>
 80055b8:	4602      	mov	r2, r0
 80055ba:	f240 115d 	movw	r1, #349	; 0x15d
 80055be:	4b43      	ldr	r3, [pc, #268]	; (80056cc <__multiply+0x148>)
 80055c0:	4843      	ldr	r0, [pc, #268]	; (80056d0 <__multiply+0x14c>)
 80055c2:	f000 fb55 	bl	8005c70 <__assert_func>
 80055c6:	f100 0514 	add.w	r5, r0, #20
 80055ca:	462b      	mov	r3, r5
 80055cc:	2200      	movs	r2, #0
 80055ce:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80055d2:	4543      	cmp	r3, r8
 80055d4:	d321      	bcc.n	800561a <__multiply+0x96>
 80055d6:	f104 0314 	add.w	r3, r4, #20
 80055da:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80055de:	f109 0314 	add.w	r3, r9, #20
 80055e2:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80055e6:	9202      	str	r2, [sp, #8]
 80055e8:	1b3a      	subs	r2, r7, r4
 80055ea:	3a15      	subs	r2, #21
 80055ec:	f022 0203 	bic.w	r2, r2, #3
 80055f0:	3204      	adds	r2, #4
 80055f2:	f104 0115 	add.w	r1, r4, #21
 80055f6:	428f      	cmp	r7, r1
 80055f8:	bf38      	it	cc
 80055fa:	2204      	movcc	r2, #4
 80055fc:	9201      	str	r2, [sp, #4]
 80055fe:	9a02      	ldr	r2, [sp, #8]
 8005600:	9303      	str	r3, [sp, #12]
 8005602:	429a      	cmp	r2, r3
 8005604:	d80c      	bhi.n	8005620 <__multiply+0x9c>
 8005606:	2e00      	cmp	r6, #0
 8005608:	dd03      	ble.n	8005612 <__multiply+0x8e>
 800560a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800560e:	2b00      	cmp	r3, #0
 8005610:	d059      	beq.n	80056c6 <__multiply+0x142>
 8005612:	6106      	str	r6, [r0, #16]
 8005614:	b005      	add	sp, #20
 8005616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800561a:	f843 2b04 	str.w	r2, [r3], #4
 800561e:	e7d8      	b.n	80055d2 <__multiply+0x4e>
 8005620:	f8b3 a000 	ldrh.w	sl, [r3]
 8005624:	f1ba 0f00 	cmp.w	sl, #0
 8005628:	d023      	beq.n	8005672 <__multiply+0xee>
 800562a:	46a9      	mov	r9, r5
 800562c:	f04f 0c00 	mov.w	ip, #0
 8005630:	f104 0e14 	add.w	lr, r4, #20
 8005634:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005638:	f8d9 1000 	ldr.w	r1, [r9]
 800563c:	fa1f fb82 	uxth.w	fp, r2
 8005640:	b289      	uxth	r1, r1
 8005642:	fb0a 110b 	mla	r1, sl, fp, r1
 8005646:	4461      	add	r1, ip
 8005648:	f8d9 c000 	ldr.w	ip, [r9]
 800564c:	0c12      	lsrs	r2, r2, #16
 800564e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005652:	fb0a c202 	mla	r2, sl, r2, ip
 8005656:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800565a:	b289      	uxth	r1, r1
 800565c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005660:	4577      	cmp	r7, lr
 8005662:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005666:	f849 1b04 	str.w	r1, [r9], #4
 800566a:	d8e3      	bhi.n	8005634 <__multiply+0xb0>
 800566c:	9a01      	ldr	r2, [sp, #4]
 800566e:	f845 c002 	str.w	ip, [r5, r2]
 8005672:	9a03      	ldr	r2, [sp, #12]
 8005674:	3304      	adds	r3, #4
 8005676:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800567a:	f1b9 0f00 	cmp.w	r9, #0
 800567e:	d020      	beq.n	80056c2 <__multiply+0x13e>
 8005680:	46ae      	mov	lr, r5
 8005682:	f04f 0a00 	mov.w	sl, #0
 8005686:	6829      	ldr	r1, [r5, #0]
 8005688:	f104 0c14 	add.w	ip, r4, #20
 800568c:	f8bc b000 	ldrh.w	fp, [ip]
 8005690:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005694:	b289      	uxth	r1, r1
 8005696:	fb09 220b 	mla	r2, r9, fp, r2
 800569a:	4492      	add	sl, r2
 800569c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80056a0:	f84e 1b04 	str.w	r1, [lr], #4
 80056a4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80056a8:	f8be 1000 	ldrh.w	r1, [lr]
 80056ac:	0c12      	lsrs	r2, r2, #16
 80056ae:	fb09 1102 	mla	r1, r9, r2, r1
 80056b2:	4567      	cmp	r7, ip
 80056b4:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80056b8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80056bc:	d8e6      	bhi.n	800568c <__multiply+0x108>
 80056be:	9a01      	ldr	r2, [sp, #4]
 80056c0:	50a9      	str	r1, [r5, r2]
 80056c2:	3504      	adds	r5, #4
 80056c4:	e79b      	b.n	80055fe <__multiply+0x7a>
 80056c6:	3e01      	subs	r6, #1
 80056c8:	e79d      	b.n	8005606 <__multiply+0x82>
 80056ca:	bf00      	nop
 80056cc:	08006877 	.word	0x08006877
 80056d0:	08006888 	.word	0x08006888

080056d4 <__pow5mult>:
 80056d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056d8:	4615      	mov	r5, r2
 80056da:	f012 0203 	ands.w	r2, r2, #3
 80056de:	4606      	mov	r6, r0
 80056e0:	460f      	mov	r7, r1
 80056e2:	d007      	beq.n	80056f4 <__pow5mult+0x20>
 80056e4:	4c25      	ldr	r4, [pc, #148]	; (800577c <__pow5mult+0xa8>)
 80056e6:	3a01      	subs	r2, #1
 80056e8:	2300      	movs	r3, #0
 80056ea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80056ee:	f7ff fe9f 	bl	8005430 <__multadd>
 80056f2:	4607      	mov	r7, r0
 80056f4:	10ad      	asrs	r5, r5, #2
 80056f6:	d03d      	beq.n	8005774 <__pow5mult+0xa0>
 80056f8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80056fa:	b97c      	cbnz	r4, 800571c <__pow5mult+0x48>
 80056fc:	2010      	movs	r0, #16
 80056fe:	f7ff fe11 	bl	8005324 <malloc>
 8005702:	4602      	mov	r2, r0
 8005704:	6270      	str	r0, [r6, #36]	; 0x24
 8005706:	b928      	cbnz	r0, 8005714 <__pow5mult+0x40>
 8005708:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800570c:	4b1c      	ldr	r3, [pc, #112]	; (8005780 <__pow5mult+0xac>)
 800570e:	481d      	ldr	r0, [pc, #116]	; (8005784 <__pow5mult+0xb0>)
 8005710:	f000 faae 	bl	8005c70 <__assert_func>
 8005714:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005718:	6004      	str	r4, [r0, #0]
 800571a:	60c4      	str	r4, [r0, #12]
 800571c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005720:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005724:	b94c      	cbnz	r4, 800573a <__pow5mult+0x66>
 8005726:	f240 2171 	movw	r1, #625	; 0x271
 800572a:	4630      	mov	r0, r6
 800572c:	f7ff ff14 	bl	8005558 <__i2b>
 8005730:	2300      	movs	r3, #0
 8005732:	4604      	mov	r4, r0
 8005734:	f8c8 0008 	str.w	r0, [r8, #8]
 8005738:	6003      	str	r3, [r0, #0]
 800573a:	f04f 0900 	mov.w	r9, #0
 800573e:	07eb      	lsls	r3, r5, #31
 8005740:	d50a      	bpl.n	8005758 <__pow5mult+0x84>
 8005742:	4639      	mov	r1, r7
 8005744:	4622      	mov	r2, r4
 8005746:	4630      	mov	r0, r6
 8005748:	f7ff ff1c 	bl	8005584 <__multiply>
 800574c:	4680      	mov	r8, r0
 800574e:	4639      	mov	r1, r7
 8005750:	4630      	mov	r0, r6
 8005752:	f7ff fe4b 	bl	80053ec <_Bfree>
 8005756:	4647      	mov	r7, r8
 8005758:	106d      	asrs	r5, r5, #1
 800575a:	d00b      	beq.n	8005774 <__pow5mult+0xa0>
 800575c:	6820      	ldr	r0, [r4, #0]
 800575e:	b938      	cbnz	r0, 8005770 <__pow5mult+0x9c>
 8005760:	4622      	mov	r2, r4
 8005762:	4621      	mov	r1, r4
 8005764:	4630      	mov	r0, r6
 8005766:	f7ff ff0d 	bl	8005584 <__multiply>
 800576a:	6020      	str	r0, [r4, #0]
 800576c:	f8c0 9000 	str.w	r9, [r0]
 8005770:	4604      	mov	r4, r0
 8005772:	e7e4      	b.n	800573e <__pow5mult+0x6a>
 8005774:	4638      	mov	r0, r7
 8005776:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800577a:	bf00      	nop
 800577c:	080069d8 	.word	0x080069d8
 8005780:	08006805 	.word	0x08006805
 8005784:	08006888 	.word	0x08006888

08005788 <__lshift>:
 8005788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800578c:	460c      	mov	r4, r1
 800578e:	4607      	mov	r7, r0
 8005790:	4691      	mov	r9, r2
 8005792:	6923      	ldr	r3, [r4, #16]
 8005794:	6849      	ldr	r1, [r1, #4]
 8005796:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800579a:	68a3      	ldr	r3, [r4, #8]
 800579c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80057a0:	f108 0601 	add.w	r6, r8, #1
 80057a4:	42b3      	cmp	r3, r6
 80057a6:	db0b      	blt.n	80057c0 <__lshift+0x38>
 80057a8:	4638      	mov	r0, r7
 80057aa:	f7ff fddf 	bl	800536c <_Balloc>
 80057ae:	4605      	mov	r5, r0
 80057b0:	b948      	cbnz	r0, 80057c6 <__lshift+0x3e>
 80057b2:	4602      	mov	r2, r0
 80057b4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80057b8:	4b29      	ldr	r3, [pc, #164]	; (8005860 <__lshift+0xd8>)
 80057ba:	482a      	ldr	r0, [pc, #168]	; (8005864 <__lshift+0xdc>)
 80057bc:	f000 fa58 	bl	8005c70 <__assert_func>
 80057c0:	3101      	adds	r1, #1
 80057c2:	005b      	lsls	r3, r3, #1
 80057c4:	e7ee      	b.n	80057a4 <__lshift+0x1c>
 80057c6:	2300      	movs	r3, #0
 80057c8:	f100 0114 	add.w	r1, r0, #20
 80057cc:	f100 0210 	add.w	r2, r0, #16
 80057d0:	4618      	mov	r0, r3
 80057d2:	4553      	cmp	r3, sl
 80057d4:	db37      	blt.n	8005846 <__lshift+0xbe>
 80057d6:	6920      	ldr	r0, [r4, #16]
 80057d8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80057dc:	f104 0314 	add.w	r3, r4, #20
 80057e0:	f019 091f 	ands.w	r9, r9, #31
 80057e4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80057e8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80057ec:	d02f      	beq.n	800584e <__lshift+0xc6>
 80057ee:	468a      	mov	sl, r1
 80057f0:	f04f 0c00 	mov.w	ip, #0
 80057f4:	f1c9 0e20 	rsb	lr, r9, #32
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	fa02 f209 	lsl.w	r2, r2, r9
 80057fe:	ea42 020c 	orr.w	r2, r2, ip
 8005802:	f84a 2b04 	str.w	r2, [sl], #4
 8005806:	f853 2b04 	ldr.w	r2, [r3], #4
 800580a:	4298      	cmp	r0, r3
 800580c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8005810:	d8f2      	bhi.n	80057f8 <__lshift+0x70>
 8005812:	1b03      	subs	r3, r0, r4
 8005814:	3b15      	subs	r3, #21
 8005816:	f023 0303 	bic.w	r3, r3, #3
 800581a:	3304      	adds	r3, #4
 800581c:	f104 0215 	add.w	r2, r4, #21
 8005820:	4290      	cmp	r0, r2
 8005822:	bf38      	it	cc
 8005824:	2304      	movcc	r3, #4
 8005826:	f841 c003 	str.w	ip, [r1, r3]
 800582a:	f1bc 0f00 	cmp.w	ip, #0
 800582e:	d001      	beq.n	8005834 <__lshift+0xac>
 8005830:	f108 0602 	add.w	r6, r8, #2
 8005834:	3e01      	subs	r6, #1
 8005836:	4638      	mov	r0, r7
 8005838:	4621      	mov	r1, r4
 800583a:	612e      	str	r6, [r5, #16]
 800583c:	f7ff fdd6 	bl	80053ec <_Bfree>
 8005840:	4628      	mov	r0, r5
 8005842:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005846:	f842 0f04 	str.w	r0, [r2, #4]!
 800584a:	3301      	adds	r3, #1
 800584c:	e7c1      	b.n	80057d2 <__lshift+0x4a>
 800584e:	3904      	subs	r1, #4
 8005850:	f853 2b04 	ldr.w	r2, [r3], #4
 8005854:	4298      	cmp	r0, r3
 8005856:	f841 2f04 	str.w	r2, [r1, #4]!
 800585a:	d8f9      	bhi.n	8005850 <__lshift+0xc8>
 800585c:	e7ea      	b.n	8005834 <__lshift+0xac>
 800585e:	bf00      	nop
 8005860:	08006877 	.word	0x08006877
 8005864:	08006888 	.word	0x08006888

08005868 <__mcmp>:
 8005868:	4603      	mov	r3, r0
 800586a:	690a      	ldr	r2, [r1, #16]
 800586c:	6900      	ldr	r0, [r0, #16]
 800586e:	b530      	push	{r4, r5, lr}
 8005870:	1a80      	subs	r0, r0, r2
 8005872:	d10d      	bne.n	8005890 <__mcmp+0x28>
 8005874:	3314      	adds	r3, #20
 8005876:	3114      	adds	r1, #20
 8005878:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800587c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005880:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005884:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005888:	4295      	cmp	r5, r2
 800588a:	d002      	beq.n	8005892 <__mcmp+0x2a>
 800588c:	d304      	bcc.n	8005898 <__mcmp+0x30>
 800588e:	2001      	movs	r0, #1
 8005890:	bd30      	pop	{r4, r5, pc}
 8005892:	42a3      	cmp	r3, r4
 8005894:	d3f4      	bcc.n	8005880 <__mcmp+0x18>
 8005896:	e7fb      	b.n	8005890 <__mcmp+0x28>
 8005898:	f04f 30ff 	mov.w	r0, #4294967295
 800589c:	e7f8      	b.n	8005890 <__mcmp+0x28>
	...

080058a0 <__mdiff>:
 80058a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058a4:	460d      	mov	r5, r1
 80058a6:	4607      	mov	r7, r0
 80058a8:	4611      	mov	r1, r2
 80058aa:	4628      	mov	r0, r5
 80058ac:	4614      	mov	r4, r2
 80058ae:	f7ff ffdb 	bl	8005868 <__mcmp>
 80058b2:	1e06      	subs	r6, r0, #0
 80058b4:	d111      	bne.n	80058da <__mdiff+0x3a>
 80058b6:	4631      	mov	r1, r6
 80058b8:	4638      	mov	r0, r7
 80058ba:	f7ff fd57 	bl	800536c <_Balloc>
 80058be:	4602      	mov	r2, r0
 80058c0:	b928      	cbnz	r0, 80058ce <__mdiff+0x2e>
 80058c2:	f240 2132 	movw	r1, #562	; 0x232
 80058c6:	4b3a      	ldr	r3, [pc, #232]	; (80059b0 <__mdiff+0x110>)
 80058c8:	483a      	ldr	r0, [pc, #232]	; (80059b4 <__mdiff+0x114>)
 80058ca:	f000 f9d1 	bl	8005c70 <__assert_func>
 80058ce:	2301      	movs	r3, #1
 80058d0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80058d4:	4610      	mov	r0, r2
 80058d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058da:	bfa4      	itt	ge
 80058dc:	4623      	movge	r3, r4
 80058de:	462c      	movge	r4, r5
 80058e0:	4638      	mov	r0, r7
 80058e2:	6861      	ldr	r1, [r4, #4]
 80058e4:	bfa6      	itte	ge
 80058e6:	461d      	movge	r5, r3
 80058e8:	2600      	movge	r6, #0
 80058ea:	2601      	movlt	r6, #1
 80058ec:	f7ff fd3e 	bl	800536c <_Balloc>
 80058f0:	4602      	mov	r2, r0
 80058f2:	b918      	cbnz	r0, 80058fc <__mdiff+0x5c>
 80058f4:	f44f 7110 	mov.w	r1, #576	; 0x240
 80058f8:	4b2d      	ldr	r3, [pc, #180]	; (80059b0 <__mdiff+0x110>)
 80058fa:	e7e5      	b.n	80058c8 <__mdiff+0x28>
 80058fc:	f102 0814 	add.w	r8, r2, #20
 8005900:	46c2      	mov	sl, r8
 8005902:	f04f 0c00 	mov.w	ip, #0
 8005906:	6927      	ldr	r7, [r4, #16]
 8005908:	60c6      	str	r6, [r0, #12]
 800590a:	692e      	ldr	r6, [r5, #16]
 800590c:	f104 0014 	add.w	r0, r4, #20
 8005910:	f105 0914 	add.w	r9, r5, #20
 8005914:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8005918:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800591c:	3410      	adds	r4, #16
 800591e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8005922:	f859 3b04 	ldr.w	r3, [r9], #4
 8005926:	fa1f f18b 	uxth.w	r1, fp
 800592a:	448c      	add	ip, r1
 800592c:	b299      	uxth	r1, r3
 800592e:	0c1b      	lsrs	r3, r3, #16
 8005930:	ebac 0101 	sub.w	r1, ip, r1
 8005934:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005938:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800593c:	b289      	uxth	r1, r1
 800593e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8005942:	454e      	cmp	r6, r9
 8005944:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005948:	f84a 3b04 	str.w	r3, [sl], #4
 800594c:	d8e7      	bhi.n	800591e <__mdiff+0x7e>
 800594e:	1b73      	subs	r3, r6, r5
 8005950:	3b15      	subs	r3, #21
 8005952:	f023 0303 	bic.w	r3, r3, #3
 8005956:	3515      	adds	r5, #21
 8005958:	3304      	adds	r3, #4
 800595a:	42ae      	cmp	r6, r5
 800595c:	bf38      	it	cc
 800595e:	2304      	movcc	r3, #4
 8005960:	4418      	add	r0, r3
 8005962:	4443      	add	r3, r8
 8005964:	461e      	mov	r6, r3
 8005966:	4605      	mov	r5, r0
 8005968:	4575      	cmp	r5, lr
 800596a:	d30e      	bcc.n	800598a <__mdiff+0xea>
 800596c:	f10e 0103 	add.w	r1, lr, #3
 8005970:	1a09      	subs	r1, r1, r0
 8005972:	f021 0103 	bic.w	r1, r1, #3
 8005976:	3803      	subs	r0, #3
 8005978:	4586      	cmp	lr, r0
 800597a:	bf38      	it	cc
 800597c:	2100      	movcc	r1, #0
 800597e:	4419      	add	r1, r3
 8005980:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8005984:	b18b      	cbz	r3, 80059aa <__mdiff+0x10a>
 8005986:	6117      	str	r7, [r2, #16]
 8005988:	e7a4      	b.n	80058d4 <__mdiff+0x34>
 800598a:	f855 8b04 	ldr.w	r8, [r5], #4
 800598e:	fa1f f188 	uxth.w	r1, r8
 8005992:	4461      	add	r1, ip
 8005994:	140c      	asrs	r4, r1, #16
 8005996:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800599a:	b289      	uxth	r1, r1
 800599c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80059a0:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80059a4:	f846 1b04 	str.w	r1, [r6], #4
 80059a8:	e7de      	b.n	8005968 <__mdiff+0xc8>
 80059aa:	3f01      	subs	r7, #1
 80059ac:	e7e8      	b.n	8005980 <__mdiff+0xe0>
 80059ae:	bf00      	nop
 80059b0:	08006877 	.word	0x08006877
 80059b4:	08006888 	.word	0x08006888

080059b8 <__d2b>:
 80059b8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80059bc:	2101      	movs	r1, #1
 80059be:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80059c2:	4690      	mov	r8, r2
 80059c4:	461d      	mov	r5, r3
 80059c6:	f7ff fcd1 	bl	800536c <_Balloc>
 80059ca:	4604      	mov	r4, r0
 80059cc:	b930      	cbnz	r0, 80059dc <__d2b+0x24>
 80059ce:	4602      	mov	r2, r0
 80059d0:	f240 310a 	movw	r1, #778	; 0x30a
 80059d4:	4b24      	ldr	r3, [pc, #144]	; (8005a68 <__d2b+0xb0>)
 80059d6:	4825      	ldr	r0, [pc, #148]	; (8005a6c <__d2b+0xb4>)
 80059d8:	f000 f94a 	bl	8005c70 <__assert_func>
 80059dc:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80059e0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80059e4:	bb2d      	cbnz	r5, 8005a32 <__d2b+0x7a>
 80059e6:	9301      	str	r3, [sp, #4]
 80059e8:	f1b8 0300 	subs.w	r3, r8, #0
 80059ec:	d026      	beq.n	8005a3c <__d2b+0x84>
 80059ee:	4668      	mov	r0, sp
 80059f0:	9300      	str	r3, [sp, #0]
 80059f2:	f7ff fd83 	bl	80054fc <__lo0bits>
 80059f6:	9900      	ldr	r1, [sp, #0]
 80059f8:	b1f0      	cbz	r0, 8005a38 <__d2b+0x80>
 80059fa:	9a01      	ldr	r2, [sp, #4]
 80059fc:	f1c0 0320 	rsb	r3, r0, #32
 8005a00:	fa02 f303 	lsl.w	r3, r2, r3
 8005a04:	430b      	orrs	r3, r1
 8005a06:	40c2      	lsrs	r2, r0
 8005a08:	6163      	str	r3, [r4, #20]
 8005a0a:	9201      	str	r2, [sp, #4]
 8005a0c:	9b01      	ldr	r3, [sp, #4]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	bf14      	ite	ne
 8005a12:	2102      	movne	r1, #2
 8005a14:	2101      	moveq	r1, #1
 8005a16:	61a3      	str	r3, [r4, #24]
 8005a18:	6121      	str	r1, [r4, #16]
 8005a1a:	b1c5      	cbz	r5, 8005a4e <__d2b+0x96>
 8005a1c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005a20:	4405      	add	r5, r0
 8005a22:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005a26:	603d      	str	r5, [r7, #0]
 8005a28:	6030      	str	r0, [r6, #0]
 8005a2a:	4620      	mov	r0, r4
 8005a2c:	b002      	add	sp, #8
 8005a2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a36:	e7d6      	b.n	80059e6 <__d2b+0x2e>
 8005a38:	6161      	str	r1, [r4, #20]
 8005a3a:	e7e7      	b.n	8005a0c <__d2b+0x54>
 8005a3c:	a801      	add	r0, sp, #4
 8005a3e:	f7ff fd5d 	bl	80054fc <__lo0bits>
 8005a42:	2101      	movs	r1, #1
 8005a44:	9b01      	ldr	r3, [sp, #4]
 8005a46:	6121      	str	r1, [r4, #16]
 8005a48:	6163      	str	r3, [r4, #20]
 8005a4a:	3020      	adds	r0, #32
 8005a4c:	e7e5      	b.n	8005a1a <__d2b+0x62>
 8005a4e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8005a52:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005a56:	6038      	str	r0, [r7, #0]
 8005a58:	6918      	ldr	r0, [r3, #16]
 8005a5a:	f7ff fd2f 	bl	80054bc <__hi0bits>
 8005a5e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8005a62:	6031      	str	r1, [r6, #0]
 8005a64:	e7e1      	b.n	8005a2a <__d2b+0x72>
 8005a66:	bf00      	nop
 8005a68:	08006877 	.word	0x08006877
 8005a6c:	08006888 	.word	0x08006888

08005a70 <_calloc_r>:
 8005a70:	b570      	push	{r4, r5, r6, lr}
 8005a72:	fba1 5402 	umull	r5, r4, r1, r2
 8005a76:	b934      	cbnz	r4, 8005a86 <_calloc_r+0x16>
 8005a78:	4629      	mov	r1, r5
 8005a7a:	f000 f875 	bl	8005b68 <_malloc_r>
 8005a7e:	4606      	mov	r6, r0
 8005a80:	b928      	cbnz	r0, 8005a8e <_calloc_r+0x1e>
 8005a82:	4630      	mov	r0, r6
 8005a84:	bd70      	pop	{r4, r5, r6, pc}
 8005a86:	220c      	movs	r2, #12
 8005a88:	2600      	movs	r6, #0
 8005a8a:	6002      	str	r2, [r0, #0]
 8005a8c:	e7f9      	b.n	8005a82 <_calloc_r+0x12>
 8005a8e:	462a      	mov	r2, r5
 8005a90:	4621      	mov	r1, r4
 8005a92:	f7fe f961 	bl	8003d58 <memset>
 8005a96:	e7f4      	b.n	8005a82 <_calloc_r+0x12>

08005a98 <_free_r>:
 8005a98:	b538      	push	{r3, r4, r5, lr}
 8005a9a:	4605      	mov	r5, r0
 8005a9c:	2900      	cmp	r1, #0
 8005a9e:	d040      	beq.n	8005b22 <_free_r+0x8a>
 8005aa0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005aa4:	1f0c      	subs	r4, r1, #4
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	bfb8      	it	lt
 8005aaa:	18e4      	addlt	r4, r4, r3
 8005aac:	f000 f922 	bl	8005cf4 <__malloc_lock>
 8005ab0:	4a1c      	ldr	r2, [pc, #112]	; (8005b24 <_free_r+0x8c>)
 8005ab2:	6813      	ldr	r3, [r2, #0]
 8005ab4:	b933      	cbnz	r3, 8005ac4 <_free_r+0x2c>
 8005ab6:	6063      	str	r3, [r4, #4]
 8005ab8:	6014      	str	r4, [r2, #0]
 8005aba:	4628      	mov	r0, r5
 8005abc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ac0:	f000 b91e 	b.w	8005d00 <__malloc_unlock>
 8005ac4:	42a3      	cmp	r3, r4
 8005ac6:	d908      	bls.n	8005ada <_free_r+0x42>
 8005ac8:	6820      	ldr	r0, [r4, #0]
 8005aca:	1821      	adds	r1, r4, r0
 8005acc:	428b      	cmp	r3, r1
 8005ace:	bf01      	itttt	eq
 8005ad0:	6819      	ldreq	r1, [r3, #0]
 8005ad2:	685b      	ldreq	r3, [r3, #4]
 8005ad4:	1809      	addeq	r1, r1, r0
 8005ad6:	6021      	streq	r1, [r4, #0]
 8005ad8:	e7ed      	b.n	8005ab6 <_free_r+0x1e>
 8005ada:	461a      	mov	r2, r3
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	b10b      	cbz	r3, 8005ae4 <_free_r+0x4c>
 8005ae0:	42a3      	cmp	r3, r4
 8005ae2:	d9fa      	bls.n	8005ada <_free_r+0x42>
 8005ae4:	6811      	ldr	r1, [r2, #0]
 8005ae6:	1850      	adds	r0, r2, r1
 8005ae8:	42a0      	cmp	r0, r4
 8005aea:	d10b      	bne.n	8005b04 <_free_r+0x6c>
 8005aec:	6820      	ldr	r0, [r4, #0]
 8005aee:	4401      	add	r1, r0
 8005af0:	1850      	adds	r0, r2, r1
 8005af2:	4283      	cmp	r3, r0
 8005af4:	6011      	str	r1, [r2, #0]
 8005af6:	d1e0      	bne.n	8005aba <_free_r+0x22>
 8005af8:	6818      	ldr	r0, [r3, #0]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	4401      	add	r1, r0
 8005afe:	6011      	str	r1, [r2, #0]
 8005b00:	6053      	str	r3, [r2, #4]
 8005b02:	e7da      	b.n	8005aba <_free_r+0x22>
 8005b04:	d902      	bls.n	8005b0c <_free_r+0x74>
 8005b06:	230c      	movs	r3, #12
 8005b08:	602b      	str	r3, [r5, #0]
 8005b0a:	e7d6      	b.n	8005aba <_free_r+0x22>
 8005b0c:	6820      	ldr	r0, [r4, #0]
 8005b0e:	1821      	adds	r1, r4, r0
 8005b10:	428b      	cmp	r3, r1
 8005b12:	bf01      	itttt	eq
 8005b14:	6819      	ldreq	r1, [r3, #0]
 8005b16:	685b      	ldreq	r3, [r3, #4]
 8005b18:	1809      	addeq	r1, r1, r0
 8005b1a:	6021      	streq	r1, [r4, #0]
 8005b1c:	6063      	str	r3, [r4, #4]
 8005b1e:	6054      	str	r4, [r2, #4]
 8005b20:	e7cb      	b.n	8005aba <_free_r+0x22>
 8005b22:	bd38      	pop	{r3, r4, r5, pc}
 8005b24:	20000388 	.word	0x20000388

08005b28 <sbrk_aligned>:
 8005b28:	b570      	push	{r4, r5, r6, lr}
 8005b2a:	4e0e      	ldr	r6, [pc, #56]	; (8005b64 <sbrk_aligned+0x3c>)
 8005b2c:	460c      	mov	r4, r1
 8005b2e:	6831      	ldr	r1, [r6, #0]
 8005b30:	4605      	mov	r5, r0
 8005b32:	b911      	cbnz	r1, 8005b3a <sbrk_aligned+0x12>
 8005b34:	f000 f88c 	bl	8005c50 <_sbrk_r>
 8005b38:	6030      	str	r0, [r6, #0]
 8005b3a:	4621      	mov	r1, r4
 8005b3c:	4628      	mov	r0, r5
 8005b3e:	f000 f887 	bl	8005c50 <_sbrk_r>
 8005b42:	1c43      	adds	r3, r0, #1
 8005b44:	d00a      	beq.n	8005b5c <sbrk_aligned+0x34>
 8005b46:	1cc4      	adds	r4, r0, #3
 8005b48:	f024 0403 	bic.w	r4, r4, #3
 8005b4c:	42a0      	cmp	r0, r4
 8005b4e:	d007      	beq.n	8005b60 <sbrk_aligned+0x38>
 8005b50:	1a21      	subs	r1, r4, r0
 8005b52:	4628      	mov	r0, r5
 8005b54:	f000 f87c 	bl	8005c50 <_sbrk_r>
 8005b58:	3001      	adds	r0, #1
 8005b5a:	d101      	bne.n	8005b60 <sbrk_aligned+0x38>
 8005b5c:	f04f 34ff 	mov.w	r4, #4294967295
 8005b60:	4620      	mov	r0, r4
 8005b62:	bd70      	pop	{r4, r5, r6, pc}
 8005b64:	2000038c 	.word	0x2000038c

08005b68 <_malloc_r>:
 8005b68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b6c:	1ccd      	adds	r5, r1, #3
 8005b6e:	f025 0503 	bic.w	r5, r5, #3
 8005b72:	3508      	adds	r5, #8
 8005b74:	2d0c      	cmp	r5, #12
 8005b76:	bf38      	it	cc
 8005b78:	250c      	movcc	r5, #12
 8005b7a:	2d00      	cmp	r5, #0
 8005b7c:	4607      	mov	r7, r0
 8005b7e:	db01      	blt.n	8005b84 <_malloc_r+0x1c>
 8005b80:	42a9      	cmp	r1, r5
 8005b82:	d905      	bls.n	8005b90 <_malloc_r+0x28>
 8005b84:	230c      	movs	r3, #12
 8005b86:	2600      	movs	r6, #0
 8005b88:	603b      	str	r3, [r7, #0]
 8005b8a:	4630      	mov	r0, r6
 8005b8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b90:	4e2e      	ldr	r6, [pc, #184]	; (8005c4c <_malloc_r+0xe4>)
 8005b92:	f000 f8af 	bl	8005cf4 <__malloc_lock>
 8005b96:	6833      	ldr	r3, [r6, #0]
 8005b98:	461c      	mov	r4, r3
 8005b9a:	bb34      	cbnz	r4, 8005bea <_malloc_r+0x82>
 8005b9c:	4629      	mov	r1, r5
 8005b9e:	4638      	mov	r0, r7
 8005ba0:	f7ff ffc2 	bl	8005b28 <sbrk_aligned>
 8005ba4:	1c43      	adds	r3, r0, #1
 8005ba6:	4604      	mov	r4, r0
 8005ba8:	d14d      	bne.n	8005c46 <_malloc_r+0xde>
 8005baa:	6834      	ldr	r4, [r6, #0]
 8005bac:	4626      	mov	r6, r4
 8005bae:	2e00      	cmp	r6, #0
 8005bb0:	d140      	bne.n	8005c34 <_malloc_r+0xcc>
 8005bb2:	6823      	ldr	r3, [r4, #0]
 8005bb4:	4631      	mov	r1, r6
 8005bb6:	4638      	mov	r0, r7
 8005bb8:	eb04 0803 	add.w	r8, r4, r3
 8005bbc:	f000 f848 	bl	8005c50 <_sbrk_r>
 8005bc0:	4580      	cmp	r8, r0
 8005bc2:	d13a      	bne.n	8005c3a <_malloc_r+0xd2>
 8005bc4:	6821      	ldr	r1, [r4, #0]
 8005bc6:	3503      	adds	r5, #3
 8005bc8:	1a6d      	subs	r5, r5, r1
 8005bca:	f025 0503 	bic.w	r5, r5, #3
 8005bce:	3508      	adds	r5, #8
 8005bd0:	2d0c      	cmp	r5, #12
 8005bd2:	bf38      	it	cc
 8005bd4:	250c      	movcc	r5, #12
 8005bd6:	4638      	mov	r0, r7
 8005bd8:	4629      	mov	r1, r5
 8005bda:	f7ff ffa5 	bl	8005b28 <sbrk_aligned>
 8005bde:	3001      	adds	r0, #1
 8005be0:	d02b      	beq.n	8005c3a <_malloc_r+0xd2>
 8005be2:	6823      	ldr	r3, [r4, #0]
 8005be4:	442b      	add	r3, r5
 8005be6:	6023      	str	r3, [r4, #0]
 8005be8:	e00e      	b.n	8005c08 <_malloc_r+0xa0>
 8005bea:	6822      	ldr	r2, [r4, #0]
 8005bec:	1b52      	subs	r2, r2, r5
 8005bee:	d41e      	bmi.n	8005c2e <_malloc_r+0xc6>
 8005bf0:	2a0b      	cmp	r2, #11
 8005bf2:	d916      	bls.n	8005c22 <_malloc_r+0xba>
 8005bf4:	1961      	adds	r1, r4, r5
 8005bf6:	42a3      	cmp	r3, r4
 8005bf8:	6025      	str	r5, [r4, #0]
 8005bfa:	bf18      	it	ne
 8005bfc:	6059      	strne	r1, [r3, #4]
 8005bfe:	6863      	ldr	r3, [r4, #4]
 8005c00:	bf08      	it	eq
 8005c02:	6031      	streq	r1, [r6, #0]
 8005c04:	5162      	str	r2, [r4, r5]
 8005c06:	604b      	str	r3, [r1, #4]
 8005c08:	4638      	mov	r0, r7
 8005c0a:	f104 060b 	add.w	r6, r4, #11
 8005c0e:	f000 f877 	bl	8005d00 <__malloc_unlock>
 8005c12:	f026 0607 	bic.w	r6, r6, #7
 8005c16:	1d23      	adds	r3, r4, #4
 8005c18:	1af2      	subs	r2, r6, r3
 8005c1a:	d0b6      	beq.n	8005b8a <_malloc_r+0x22>
 8005c1c:	1b9b      	subs	r3, r3, r6
 8005c1e:	50a3      	str	r3, [r4, r2]
 8005c20:	e7b3      	b.n	8005b8a <_malloc_r+0x22>
 8005c22:	6862      	ldr	r2, [r4, #4]
 8005c24:	42a3      	cmp	r3, r4
 8005c26:	bf0c      	ite	eq
 8005c28:	6032      	streq	r2, [r6, #0]
 8005c2a:	605a      	strne	r2, [r3, #4]
 8005c2c:	e7ec      	b.n	8005c08 <_malloc_r+0xa0>
 8005c2e:	4623      	mov	r3, r4
 8005c30:	6864      	ldr	r4, [r4, #4]
 8005c32:	e7b2      	b.n	8005b9a <_malloc_r+0x32>
 8005c34:	4634      	mov	r4, r6
 8005c36:	6876      	ldr	r6, [r6, #4]
 8005c38:	e7b9      	b.n	8005bae <_malloc_r+0x46>
 8005c3a:	230c      	movs	r3, #12
 8005c3c:	4638      	mov	r0, r7
 8005c3e:	603b      	str	r3, [r7, #0]
 8005c40:	f000 f85e 	bl	8005d00 <__malloc_unlock>
 8005c44:	e7a1      	b.n	8005b8a <_malloc_r+0x22>
 8005c46:	6025      	str	r5, [r4, #0]
 8005c48:	e7de      	b.n	8005c08 <_malloc_r+0xa0>
 8005c4a:	bf00      	nop
 8005c4c:	20000388 	.word	0x20000388

08005c50 <_sbrk_r>:
 8005c50:	b538      	push	{r3, r4, r5, lr}
 8005c52:	2300      	movs	r3, #0
 8005c54:	4d05      	ldr	r5, [pc, #20]	; (8005c6c <_sbrk_r+0x1c>)
 8005c56:	4604      	mov	r4, r0
 8005c58:	4608      	mov	r0, r1
 8005c5a:	602b      	str	r3, [r5, #0]
 8005c5c:	f7fb ff08 	bl	8001a70 <_sbrk>
 8005c60:	1c43      	adds	r3, r0, #1
 8005c62:	d102      	bne.n	8005c6a <_sbrk_r+0x1a>
 8005c64:	682b      	ldr	r3, [r5, #0]
 8005c66:	b103      	cbz	r3, 8005c6a <_sbrk_r+0x1a>
 8005c68:	6023      	str	r3, [r4, #0]
 8005c6a:	bd38      	pop	{r3, r4, r5, pc}
 8005c6c:	20000390 	.word	0x20000390

08005c70 <__assert_func>:
 8005c70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005c72:	4614      	mov	r4, r2
 8005c74:	461a      	mov	r2, r3
 8005c76:	4b09      	ldr	r3, [pc, #36]	; (8005c9c <__assert_func+0x2c>)
 8005c78:	4605      	mov	r5, r0
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	68d8      	ldr	r0, [r3, #12]
 8005c7e:	b14c      	cbz	r4, 8005c94 <__assert_func+0x24>
 8005c80:	4b07      	ldr	r3, [pc, #28]	; (8005ca0 <__assert_func+0x30>)
 8005c82:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005c86:	9100      	str	r1, [sp, #0]
 8005c88:	462b      	mov	r3, r5
 8005c8a:	4906      	ldr	r1, [pc, #24]	; (8005ca4 <__assert_func+0x34>)
 8005c8c:	f000 f80e 	bl	8005cac <fiprintf>
 8005c90:	f000 fa62 	bl	8006158 <abort>
 8005c94:	4b04      	ldr	r3, [pc, #16]	; (8005ca8 <__assert_func+0x38>)
 8005c96:	461c      	mov	r4, r3
 8005c98:	e7f3      	b.n	8005c82 <__assert_func+0x12>
 8005c9a:	bf00      	nop
 8005c9c:	20000020 	.word	0x20000020
 8005ca0:	080069e4 	.word	0x080069e4
 8005ca4:	080069f1 	.word	0x080069f1
 8005ca8:	08006a1f 	.word	0x08006a1f

08005cac <fiprintf>:
 8005cac:	b40e      	push	{r1, r2, r3}
 8005cae:	b503      	push	{r0, r1, lr}
 8005cb0:	4601      	mov	r1, r0
 8005cb2:	ab03      	add	r3, sp, #12
 8005cb4:	4805      	ldr	r0, [pc, #20]	; (8005ccc <fiprintf+0x20>)
 8005cb6:	f853 2b04 	ldr.w	r2, [r3], #4
 8005cba:	6800      	ldr	r0, [r0, #0]
 8005cbc:	9301      	str	r3, [sp, #4]
 8005cbe:	f000 f84d 	bl	8005d5c <_vfiprintf_r>
 8005cc2:	b002      	add	sp, #8
 8005cc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8005cc8:	b003      	add	sp, #12
 8005cca:	4770      	bx	lr
 8005ccc:	20000020 	.word	0x20000020

08005cd0 <__ascii_mbtowc>:
 8005cd0:	b082      	sub	sp, #8
 8005cd2:	b901      	cbnz	r1, 8005cd6 <__ascii_mbtowc+0x6>
 8005cd4:	a901      	add	r1, sp, #4
 8005cd6:	b142      	cbz	r2, 8005cea <__ascii_mbtowc+0x1a>
 8005cd8:	b14b      	cbz	r3, 8005cee <__ascii_mbtowc+0x1e>
 8005cda:	7813      	ldrb	r3, [r2, #0]
 8005cdc:	600b      	str	r3, [r1, #0]
 8005cde:	7812      	ldrb	r2, [r2, #0]
 8005ce0:	1e10      	subs	r0, r2, #0
 8005ce2:	bf18      	it	ne
 8005ce4:	2001      	movne	r0, #1
 8005ce6:	b002      	add	sp, #8
 8005ce8:	4770      	bx	lr
 8005cea:	4610      	mov	r0, r2
 8005cec:	e7fb      	b.n	8005ce6 <__ascii_mbtowc+0x16>
 8005cee:	f06f 0001 	mvn.w	r0, #1
 8005cf2:	e7f8      	b.n	8005ce6 <__ascii_mbtowc+0x16>

08005cf4 <__malloc_lock>:
 8005cf4:	4801      	ldr	r0, [pc, #4]	; (8005cfc <__malloc_lock+0x8>)
 8005cf6:	f000 bbeb 	b.w	80064d0 <__retarget_lock_acquire_recursive>
 8005cfa:	bf00      	nop
 8005cfc:	20000394 	.word	0x20000394

08005d00 <__malloc_unlock>:
 8005d00:	4801      	ldr	r0, [pc, #4]	; (8005d08 <__malloc_unlock+0x8>)
 8005d02:	f000 bbe6 	b.w	80064d2 <__retarget_lock_release_recursive>
 8005d06:	bf00      	nop
 8005d08:	20000394 	.word	0x20000394

08005d0c <__sfputc_r>:
 8005d0c:	6893      	ldr	r3, [r2, #8]
 8005d0e:	b410      	push	{r4}
 8005d10:	3b01      	subs	r3, #1
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	6093      	str	r3, [r2, #8]
 8005d16:	da07      	bge.n	8005d28 <__sfputc_r+0x1c>
 8005d18:	6994      	ldr	r4, [r2, #24]
 8005d1a:	42a3      	cmp	r3, r4
 8005d1c:	db01      	blt.n	8005d22 <__sfputc_r+0x16>
 8005d1e:	290a      	cmp	r1, #10
 8005d20:	d102      	bne.n	8005d28 <__sfputc_r+0x1c>
 8005d22:	bc10      	pop	{r4}
 8005d24:	f000 b94a 	b.w	8005fbc <__swbuf_r>
 8005d28:	6813      	ldr	r3, [r2, #0]
 8005d2a:	1c58      	adds	r0, r3, #1
 8005d2c:	6010      	str	r0, [r2, #0]
 8005d2e:	7019      	strb	r1, [r3, #0]
 8005d30:	4608      	mov	r0, r1
 8005d32:	bc10      	pop	{r4}
 8005d34:	4770      	bx	lr

08005d36 <__sfputs_r>:
 8005d36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d38:	4606      	mov	r6, r0
 8005d3a:	460f      	mov	r7, r1
 8005d3c:	4614      	mov	r4, r2
 8005d3e:	18d5      	adds	r5, r2, r3
 8005d40:	42ac      	cmp	r4, r5
 8005d42:	d101      	bne.n	8005d48 <__sfputs_r+0x12>
 8005d44:	2000      	movs	r0, #0
 8005d46:	e007      	b.n	8005d58 <__sfputs_r+0x22>
 8005d48:	463a      	mov	r2, r7
 8005d4a:	4630      	mov	r0, r6
 8005d4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d50:	f7ff ffdc 	bl	8005d0c <__sfputc_r>
 8005d54:	1c43      	adds	r3, r0, #1
 8005d56:	d1f3      	bne.n	8005d40 <__sfputs_r+0xa>
 8005d58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005d5c <_vfiprintf_r>:
 8005d5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d60:	460d      	mov	r5, r1
 8005d62:	4614      	mov	r4, r2
 8005d64:	4698      	mov	r8, r3
 8005d66:	4606      	mov	r6, r0
 8005d68:	b09d      	sub	sp, #116	; 0x74
 8005d6a:	b118      	cbz	r0, 8005d74 <_vfiprintf_r+0x18>
 8005d6c:	6983      	ldr	r3, [r0, #24]
 8005d6e:	b90b      	cbnz	r3, 8005d74 <_vfiprintf_r+0x18>
 8005d70:	f000 fb10 	bl	8006394 <__sinit>
 8005d74:	4b89      	ldr	r3, [pc, #548]	; (8005f9c <_vfiprintf_r+0x240>)
 8005d76:	429d      	cmp	r5, r3
 8005d78:	d11b      	bne.n	8005db2 <_vfiprintf_r+0x56>
 8005d7a:	6875      	ldr	r5, [r6, #4]
 8005d7c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005d7e:	07d9      	lsls	r1, r3, #31
 8005d80:	d405      	bmi.n	8005d8e <_vfiprintf_r+0x32>
 8005d82:	89ab      	ldrh	r3, [r5, #12]
 8005d84:	059a      	lsls	r2, r3, #22
 8005d86:	d402      	bmi.n	8005d8e <_vfiprintf_r+0x32>
 8005d88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005d8a:	f000 fba1 	bl	80064d0 <__retarget_lock_acquire_recursive>
 8005d8e:	89ab      	ldrh	r3, [r5, #12]
 8005d90:	071b      	lsls	r3, r3, #28
 8005d92:	d501      	bpl.n	8005d98 <_vfiprintf_r+0x3c>
 8005d94:	692b      	ldr	r3, [r5, #16]
 8005d96:	b9eb      	cbnz	r3, 8005dd4 <_vfiprintf_r+0x78>
 8005d98:	4629      	mov	r1, r5
 8005d9a:	4630      	mov	r0, r6
 8005d9c:	f000 f96e 	bl	800607c <__swsetup_r>
 8005da0:	b1c0      	cbz	r0, 8005dd4 <_vfiprintf_r+0x78>
 8005da2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005da4:	07dc      	lsls	r4, r3, #31
 8005da6:	d50e      	bpl.n	8005dc6 <_vfiprintf_r+0x6a>
 8005da8:	f04f 30ff 	mov.w	r0, #4294967295
 8005dac:	b01d      	add	sp, #116	; 0x74
 8005dae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005db2:	4b7b      	ldr	r3, [pc, #492]	; (8005fa0 <_vfiprintf_r+0x244>)
 8005db4:	429d      	cmp	r5, r3
 8005db6:	d101      	bne.n	8005dbc <_vfiprintf_r+0x60>
 8005db8:	68b5      	ldr	r5, [r6, #8]
 8005dba:	e7df      	b.n	8005d7c <_vfiprintf_r+0x20>
 8005dbc:	4b79      	ldr	r3, [pc, #484]	; (8005fa4 <_vfiprintf_r+0x248>)
 8005dbe:	429d      	cmp	r5, r3
 8005dc0:	bf08      	it	eq
 8005dc2:	68f5      	ldreq	r5, [r6, #12]
 8005dc4:	e7da      	b.n	8005d7c <_vfiprintf_r+0x20>
 8005dc6:	89ab      	ldrh	r3, [r5, #12]
 8005dc8:	0598      	lsls	r0, r3, #22
 8005dca:	d4ed      	bmi.n	8005da8 <_vfiprintf_r+0x4c>
 8005dcc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005dce:	f000 fb80 	bl	80064d2 <__retarget_lock_release_recursive>
 8005dd2:	e7e9      	b.n	8005da8 <_vfiprintf_r+0x4c>
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	9309      	str	r3, [sp, #36]	; 0x24
 8005dd8:	2320      	movs	r3, #32
 8005dda:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005dde:	2330      	movs	r3, #48	; 0x30
 8005de0:	f04f 0901 	mov.w	r9, #1
 8005de4:	f8cd 800c 	str.w	r8, [sp, #12]
 8005de8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8005fa8 <_vfiprintf_r+0x24c>
 8005dec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005df0:	4623      	mov	r3, r4
 8005df2:	469a      	mov	sl, r3
 8005df4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005df8:	b10a      	cbz	r2, 8005dfe <_vfiprintf_r+0xa2>
 8005dfa:	2a25      	cmp	r2, #37	; 0x25
 8005dfc:	d1f9      	bne.n	8005df2 <_vfiprintf_r+0x96>
 8005dfe:	ebba 0b04 	subs.w	fp, sl, r4
 8005e02:	d00b      	beq.n	8005e1c <_vfiprintf_r+0xc0>
 8005e04:	465b      	mov	r3, fp
 8005e06:	4622      	mov	r2, r4
 8005e08:	4629      	mov	r1, r5
 8005e0a:	4630      	mov	r0, r6
 8005e0c:	f7ff ff93 	bl	8005d36 <__sfputs_r>
 8005e10:	3001      	adds	r0, #1
 8005e12:	f000 80aa 	beq.w	8005f6a <_vfiprintf_r+0x20e>
 8005e16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005e18:	445a      	add	r2, fp
 8005e1a:	9209      	str	r2, [sp, #36]	; 0x24
 8005e1c:	f89a 3000 	ldrb.w	r3, [sl]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	f000 80a2 	beq.w	8005f6a <_vfiprintf_r+0x20e>
 8005e26:	2300      	movs	r3, #0
 8005e28:	f04f 32ff 	mov.w	r2, #4294967295
 8005e2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e30:	f10a 0a01 	add.w	sl, sl, #1
 8005e34:	9304      	str	r3, [sp, #16]
 8005e36:	9307      	str	r3, [sp, #28]
 8005e38:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005e3c:	931a      	str	r3, [sp, #104]	; 0x68
 8005e3e:	4654      	mov	r4, sl
 8005e40:	2205      	movs	r2, #5
 8005e42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e46:	4858      	ldr	r0, [pc, #352]	; (8005fa8 <_vfiprintf_r+0x24c>)
 8005e48:	f7ff fa74 	bl	8005334 <memchr>
 8005e4c:	9a04      	ldr	r2, [sp, #16]
 8005e4e:	b9d8      	cbnz	r0, 8005e88 <_vfiprintf_r+0x12c>
 8005e50:	06d1      	lsls	r1, r2, #27
 8005e52:	bf44      	itt	mi
 8005e54:	2320      	movmi	r3, #32
 8005e56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e5a:	0713      	lsls	r3, r2, #28
 8005e5c:	bf44      	itt	mi
 8005e5e:	232b      	movmi	r3, #43	; 0x2b
 8005e60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e64:	f89a 3000 	ldrb.w	r3, [sl]
 8005e68:	2b2a      	cmp	r3, #42	; 0x2a
 8005e6a:	d015      	beq.n	8005e98 <_vfiprintf_r+0x13c>
 8005e6c:	4654      	mov	r4, sl
 8005e6e:	2000      	movs	r0, #0
 8005e70:	f04f 0c0a 	mov.w	ip, #10
 8005e74:	9a07      	ldr	r2, [sp, #28]
 8005e76:	4621      	mov	r1, r4
 8005e78:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e7c:	3b30      	subs	r3, #48	; 0x30
 8005e7e:	2b09      	cmp	r3, #9
 8005e80:	d94e      	bls.n	8005f20 <_vfiprintf_r+0x1c4>
 8005e82:	b1b0      	cbz	r0, 8005eb2 <_vfiprintf_r+0x156>
 8005e84:	9207      	str	r2, [sp, #28]
 8005e86:	e014      	b.n	8005eb2 <_vfiprintf_r+0x156>
 8005e88:	eba0 0308 	sub.w	r3, r0, r8
 8005e8c:	fa09 f303 	lsl.w	r3, r9, r3
 8005e90:	4313      	orrs	r3, r2
 8005e92:	46a2      	mov	sl, r4
 8005e94:	9304      	str	r3, [sp, #16]
 8005e96:	e7d2      	b.n	8005e3e <_vfiprintf_r+0xe2>
 8005e98:	9b03      	ldr	r3, [sp, #12]
 8005e9a:	1d19      	adds	r1, r3, #4
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	9103      	str	r1, [sp, #12]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	bfbb      	ittet	lt
 8005ea4:	425b      	neglt	r3, r3
 8005ea6:	f042 0202 	orrlt.w	r2, r2, #2
 8005eaa:	9307      	strge	r3, [sp, #28]
 8005eac:	9307      	strlt	r3, [sp, #28]
 8005eae:	bfb8      	it	lt
 8005eb0:	9204      	strlt	r2, [sp, #16]
 8005eb2:	7823      	ldrb	r3, [r4, #0]
 8005eb4:	2b2e      	cmp	r3, #46	; 0x2e
 8005eb6:	d10c      	bne.n	8005ed2 <_vfiprintf_r+0x176>
 8005eb8:	7863      	ldrb	r3, [r4, #1]
 8005eba:	2b2a      	cmp	r3, #42	; 0x2a
 8005ebc:	d135      	bne.n	8005f2a <_vfiprintf_r+0x1ce>
 8005ebe:	9b03      	ldr	r3, [sp, #12]
 8005ec0:	3402      	adds	r4, #2
 8005ec2:	1d1a      	adds	r2, r3, #4
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	9203      	str	r2, [sp, #12]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	bfb8      	it	lt
 8005ecc:	f04f 33ff 	movlt.w	r3, #4294967295
 8005ed0:	9305      	str	r3, [sp, #20]
 8005ed2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8005fac <_vfiprintf_r+0x250>
 8005ed6:	2203      	movs	r2, #3
 8005ed8:	4650      	mov	r0, sl
 8005eda:	7821      	ldrb	r1, [r4, #0]
 8005edc:	f7ff fa2a 	bl	8005334 <memchr>
 8005ee0:	b140      	cbz	r0, 8005ef4 <_vfiprintf_r+0x198>
 8005ee2:	2340      	movs	r3, #64	; 0x40
 8005ee4:	eba0 000a 	sub.w	r0, r0, sl
 8005ee8:	fa03 f000 	lsl.w	r0, r3, r0
 8005eec:	9b04      	ldr	r3, [sp, #16]
 8005eee:	3401      	adds	r4, #1
 8005ef0:	4303      	orrs	r3, r0
 8005ef2:	9304      	str	r3, [sp, #16]
 8005ef4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ef8:	2206      	movs	r2, #6
 8005efa:	482d      	ldr	r0, [pc, #180]	; (8005fb0 <_vfiprintf_r+0x254>)
 8005efc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005f00:	f7ff fa18 	bl	8005334 <memchr>
 8005f04:	2800      	cmp	r0, #0
 8005f06:	d03f      	beq.n	8005f88 <_vfiprintf_r+0x22c>
 8005f08:	4b2a      	ldr	r3, [pc, #168]	; (8005fb4 <_vfiprintf_r+0x258>)
 8005f0a:	bb1b      	cbnz	r3, 8005f54 <_vfiprintf_r+0x1f8>
 8005f0c:	9b03      	ldr	r3, [sp, #12]
 8005f0e:	3307      	adds	r3, #7
 8005f10:	f023 0307 	bic.w	r3, r3, #7
 8005f14:	3308      	adds	r3, #8
 8005f16:	9303      	str	r3, [sp, #12]
 8005f18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f1a:	443b      	add	r3, r7
 8005f1c:	9309      	str	r3, [sp, #36]	; 0x24
 8005f1e:	e767      	b.n	8005df0 <_vfiprintf_r+0x94>
 8005f20:	460c      	mov	r4, r1
 8005f22:	2001      	movs	r0, #1
 8005f24:	fb0c 3202 	mla	r2, ip, r2, r3
 8005f28:	e7a5      	b.n	8005e76 <_vfiprintf_r+0x11a>
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	f04f 0c0a 	mov.w	ip, #10
 8005f30:	4619      	mov	r1, r3
 8005f32:	3401      	adds	r4, #1
 8005f34:	9305      	str	r3, [sp, #20]
 8005f36:	4620      	mov	r0, r4
 8005f38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f3c:	3a30      	subs	r2, #48	; 0x30
 8005f3e:	2a09      	cmp	r2, #9
 8005f40:	d903      	bls.n	8005f4a <_vfiprintf_r+0x1ee>
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d0c5      	beq.n	8005ed2 <_vfiprintf_r+0x176>
 8005f46:	9105      	str	r1, [sp, #20]
 8005f48:	e7c3      	b.n	8005ed2 <_vfiprintf_r+0x176>
 8005f4a:	4604      	mov	r4, r0
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005f52:	e7f0      	b.n	8005f36 <_vfiprintf_r+0x1da>
 8005f54:	ab03      	add	r3, sp, #12
 8005f56:	9300      	str	r3, [sp, #0]
 8005f58:	462a      	mov	r2, r5
 8005f5a:	4630      	mov	r0, r6
 8005f5c:	4b16      	ldr	r3, [pc, #88]	; (8005fb8 <_vfiprintf_r+0x25c>)
 8005f5e:	a904      	add	r1, sp, #16
 8005f60:	f7fd ffa0 	bl	8003ea4 <_printf_float>
 8005f64:	4607      	mov	r7, r0
 8005f66:	1c78      	adds	r0, r7, #1
 8005f68:	d1d6      	bne.n	8005f18 <_vfiprintf_r+0x1bc>
 8005f6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005f6c:	07d9      	lsls	r1, r3, #31
 8005f6e:	d405      	bmi.n	8005f7c <_vfiprintf_r+0x220>
 8005f70:	89ab      	ldrh	r3, [r5, #12]
 8005f72:	059a      	lsls	r2, r3, #22
 8005f74:	d402      	bmi.n	8005f7c <_vfiprintf_r+0x220>
 8005f76:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005f78:	f000 faab 	bl	80064d2 <__retarget_lock_release_recursive>
 8005f7c:	89ab      	ldrh	r3, [r5, #12]
 8005f7e:	065b      	lsls	r3, r3, #25
 8005f80:	f53f af12 	bmi.w	8005da8 <_vfiprintf_r+0x4c>
 8005f84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005f86:	e711      	b.n	8005dac <_vfiprintf_r+0x50>
 8005f88:	ab03      	add	r3, sp, #12
 8005f8a:	9300      	str	r3, [sp, #0]
 8005f8c:	462a      	mov	r2, r5
 8005f8e:	4630      	mov	r0, r6
 8005f90:	4b09      	ldr	r3, [pc, #36]	; (8005fb8 <_vfiprintf_r+0x25c>)
 8005f92:	a904      	add	r1, sp, #16
 8005f94:	f7fe fa22 	bl	80043dc <_printf_i>
 8005f98:	e7e4      	b.n	8005f64 <_vfiprintf_r+0x208>
 8005f9a:	bf00      	nop
 8005f9c:	08006b5c 	.word	0x08006b5c
 8005fa0:	08006b7c 	.word	0x08006b7c
 8005fa4:	08006b3c 	.word	0x08006b3c
 8005fa8:	08006a2a 	.word	0x08006a2a
 8005fac:	08006a30 	.word	0x08006a30
 8005fb0:	08006a34 	.word	0x08006a34
 8005fb4:	08003ea5 	.word	0x08003ea5
 8005fb8:	08005d37 	.word	0x08005d37

08005fbc <__swbuf_r>:
 8005fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fbe:	460e      	mov	r6, r1
 8005fc0:	4614      	mov	r4, r2
 8005fc2:	4605      	mov	r5, r0
 8005fc4:	b118      	cbz	r0, 8005fce <__swbuf_r+0x12>
 8005fc6:	6983      	ldr	r3, [r0, #24]
 8005fc8:	b90b      	cbnz	r3, 8005fce <__swbuf_r+0x12>
 8005fca:	f000 f9e3 	bl	8006394 <__sinit>
 8005fce:	4b21      	ldr	r3, [pc, #132]	; (8006054 <__swbuf_r+0x98>)
 8005fd0:	429c      	cmp	r4, r3
 8005fd2:	d12b      	bne.n	800602c <__swbuf_r+0x70>
 8005fd4:	686c      	ldr	r4, [r5, #4]
 8005fd6:	69a3      	ldr	r3, [r4, #24]
 8005fd8:	60a3      	str	r3, [r4, #8]
 8005fda:	89a3      	ldrh	r3, [r4, #12]
 8005fdc:	071a      	lsls	r2, r3, #28
 8005fde:	d52f      	bpl.n	8006040 <__swbuf_r+0x84>
 8005fe0:	6923      	ldr	r3, [r4, #16]
 8005fe2:	b36b      	cbz	r3, 8006040 <__swbuf_r+0x84>
 8005fe4:	6923      	ldr	r3, [r4, #16]
 8005fe6:	6820      	ldr	r0, [r4, #0]
 8005fe8:	b2f6      	uxtb	r6, r6
 8005fea:	1ac0      	subs	r0, r0, r3
 8005fec:	6963      	ldr	r3, [r4, #20]
 8005fee:	4637      	mov	r7, r6
 8005ff0:	4283      	cmp	r3, r0
 8005ff2:	dc04      	bgt.n	8005ffe <__swbuf_r+0x42>
 8005ff4:	4621      	mov	r1, r4
 8005ff6:	4628      	mov	r0, r5
 8005ff8:	f000 f938 	bl	800626c <_fflush_r>
 8005ffc:	bb30      	cbnz	r0, 800604c <__swbuf_r+0x90>
 8005ffe:	68a3      	ldr	r3, [r4, #8]
 8006000:	3001      	adds	r0, #1
 8006002:	3b01      	subs	r3, #1
 8006004:	60a3      	str	r3, [r4, #8]
 8006006:	6823      	ldr	r3, [r4, #0]
 8006008:	1c5a      	adds	r2, r3, #1
 800600a:	6022      	str	r2, [r4, #0]
 800600c:	701e      	strb	r6, [r3, #0]
 800600e:	6963      	ldr	r3, [r4, #20]
 8006010:	4283      	cmp	r3, r0
 8006012:	d004      	beq.n	800601e <__swbuf_r+0x62>
 8006014:	89a3      	ldrh	r3, [r4, #12]
 8006016:	07db      	lsls	r3, r3, #31
 8006018:	d506      	bpl.n	8006028 <__swbuf_r+0x6c>
 800601a:	2e0a      	cmp	r6, #10
 800601c:	d104      	bne.n	8006028 <__swbuf_r+0x6c>
 800601e:	4621      	mov	r1, r4
 8006020:	4628      	mov	r0, r5
 8006022:	f000 f923 	bl	800626c <_fflush_r>
 8006026:	b988      	cbnz	r0, 800604c <__swbuf_r+0x90>
 8006028:	4638      	mov	r0, r7
 800602a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800602c:	4b0a      	ldr	r3, [pc, #40]	; (8006058 <__swbuf_r+0x9c>)
 800602e:	429c      	cmp	r4, r3
 8006030:	d101      	bne.n	8006036 <__swbuf_r+0x7a>
 8006032:	68ac      	ldr	r4, [r5, #8]
 8006034:	e7cf      	b.n	8005fd6 <__swbuf_r+0x1a>
 8006036:	4b09      	ldr	r3, [pc, #36]	; (800605c <__swbuf_r+0xa0>)
 8006038:	429c      	cmp	r4, r3
 800603a:	bf08      	it	eq
 800603c:	68ec      	ldreq	r4, [r5, #12]
 800603e:	e7ca      	b.n	8005fd6 <__swbuf_r+0x1a>
 8006040:	4621      	mov	r1, r4
 8006042:	4628      	mov	r0, r5
 8006044:	f000 f81a 	bl	800607c <__swsetup_r>
 8006048:	2800      	cmp	r0, #0
 800604a:	d0cb      	beq.n	8005fe4 <__swbuf_r+0x28>
 800604c:	f04f 37ff 	mov.w	r7, #4294967295
 8006050:	e7ea      	b.n	8006028 <__swbuf_r+0x6c>
 8006052:	bf00      	nop
 8006054:	08006b5c 	.word	0x08006b5c
 8006058:	08006b7c 	.word	0x08006b7c
 800605c:	08006b3c 	.word	0x08006b3c

08006060 <__ascii_wctomb>:
 8006060:	4603      	mov	r3, r0
 8006062:	4608      	mov	r0, r1
 8006064:	b141      	cbz	r1, 8006078 <__ascii_wctomb+0x18>
 8006066:	2aff      	cmp	r2, #255	; 0xff
 8006068:	d904      	bls.n	8006074 <__ascii_wctomb+0x14>
 800606a:	228a      	movs	r2, #138	; 0x8a
 800606c:	f04f 30ff 	mov.w	r0, #4294967295
 8006070:	601a      	str	r2, [r3, #0]
 8006072:	4770      	bx	lr
 8006074:	2001      	movs	r0, #1
 8006076:	700a      	strb	r2, [r1, #0]
 8006078:	4770      	bx	lr
	...

0800607c <__swsetup_r>:
 800607c:	4b32      	ldr	r3, [pc, #200]	; (8006148 <__swsetup_r+0xcc>)
 800607e:	b570      	push	{r4, r5, r6, lr}
 8006080:	681d      	ldr	r5, [r3, #0]
 8006082:	4606      	mov	r6, r0
 8006084:	460c      	mov	r4, r1
 8006086:	b125      	cbz	r5, 8006092 <__swsetup_r+0x16>
 8006088:	69ab      	ldr	r3, [r5, #24]
 800608a:	b913      	cbnz	r3, 8006092 <__swsetup_r+0x16>
 800608c:	4628      	mov	r0, r5
 800608e:	f000 f981 	bl	8006394 <__sinit>
 8006092:	4b2e      	ldr	r3, [pc, #184]	; (800614c <__swsetup_r+0xd0>)
 8006094:	429c      	cmp	r4, r3
 8006096:	d10f      	bne.n	80060b8 <__swsetup_r+0x3c>
 8006098:	686c      	ldr	r4, [r5, #4]
 800609a:	89a3      	ldrh	r3, [r4, #12]
 800609c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80060a0:	0719      	lsls	r1, r3, #28
 80060a2:	d42c      	bmi.n	80060fe <__swsetup_r+0x82>
 80060a4:	06dd      	lsls	r5, r3, #27
 80060a6:	d411      	bmi.n	80060cc <__swsetup_r+0x50>
 80060a8:	2309      	movs	r3, #9
 80060aa:	6033      	str	r3, [r6, #0]
 80060ac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80060b0:	f04f 30ff 	mov.w	r0, #4294967295
 80060b4:	81a3      	strh	r3, [r4, #12]
 80060b6:	e03e      	b.n	8006136 <__swsetup_r+0xba>
 80060b8:	4b25      	ldr	r3, [pc, #148]	; (8006150 <__swsetup_r+0xd4>)
 80060ba:	429c      	cmp	r4, r3
 80060bc:	d101      	bne.n	80060c2 <__swsetup_r+0x46>
 80060be:	68ac      	ldr	r4, [r5, #8]
 80060c0:	e7eb      	b.n	800609a <__swsetup_r+0x1e>
 80060c2:	4b24      	ldr	r3, [pc, #144]	; (8006154 <__swsetup_r+0xd8>)
 80060c4:	429c      	cmp	r4, r3
 80060c6:	bf08      	it	eq
 80060c8:	68ec      	ldreq	r4, [r5, #12]
 80060ca:	e7e6      	b.n	800609a <__swsetup_r+0x1e>
 80060cc:	0758      	lsls	r0, r3, #29
 80060ce:	d512      	bpl.n	80060f6 <__swsetup_r+0x7a>
 80060d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80060d2:	b141      	cbz	r1, 80060e6 <__swsetup_r+0x6a>
 80060d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80060d8:	4299      	cmp	r1, r3
 80060da:	d002      	beq.n	80060e2 <__swsetup_r+0x66>
 80060dc:	4630      	mov	r0, r6
 80060de:	f7ff fcdb 	bl	8005a98 <_free_r>
 80060e2:	2300      	movs	r3, #0
 80060e4:	6363      	str	r3, [r4, #52]	; 0x34
 80060e6:	89a3      	ldrh	r3, [r4, #12]
 80060e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80060ec:	81a3      	strh	r3, [r4, #12]
 80060ee:	2300      	movs	r3, #0
 80060f0:	6063      	str	r3, [r4, #4]
 80060f2:	6923      	ldr	r3, [r4, #16]
 80060f4:	6023      	str	r3, [r4, #0]
 80060f6:	89a3      	ldrh	r3, [r4, #12]
 80060f8:	f043 0308 	orr.w	r3, r3, #8
 80060fc:	81a3      	strh	r3, [r4, #12]
 80060fe:	6923      	ldr	r3, [r4, #16]
 8006100:	b94b      	cbnz	r3, 8006116 <__swsetup_r+0x9a>
 8006102:	89a3      	ldrh	r3, [r4, #12]
 8006104:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006108:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800610c:	d003      	beq.n	8006116 <__swsetup_r+0x9a>
 800610e:	4621      	mov	r1, r4
 8006110:	4630      	mov	r0, r6
 8006112:	f000 fa05 	bl	8006520 <__smakebuf_r>
 8006116:	89a0      	ldrh	r0, [r4, #12]
 8006118:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800611c:	f010 0301 	ands.w	r3, r0, #1
 8006120:	d00a      	beq.n	8006138 <__swsetup_r+0xbc>
 8006122:	2300      	movs	r3, #0
 8006124:	60a3      	str	r3, [r4, #8]
 8006126:	6963      	ldr	r3, [r4, #20]
 8006128:	425b      	negs	r3, r3
 800612a:	61a3      	str	r3, [r4, #24]
 800612c:	6923      	ldr	r3, [r4, #16]
 800612e:	b943      	cbnz	r3, 8006142 <__swsetup_r+0xc6>
 8006130:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006134:	d1ba      	bne.n	80060ac <__swsetup_r+0x30>
 8006136:	bd70      	pop	{r4, r5, r6, pc}
 8006138:	0781      	lsls	r1, r0, #30
 800613a:	bf58      	it	pl
 800613c:	6963      	ldrpl	r3, [r4, #20]
 800613e:	60a3      	str	r3, [r4, #8]
 8006140:	e7f4      	b.n	800612c <__swsetup_r+0xb0>
 8006142:	2000      	movs	r0, #0
 8006144:	e7f7      	b.n	8006136 <__swsetup_r+0xba>
 8006146:	bf00      	nop
 8006148:	20000020 	.word	0x20000020
 800614c:	08006b5c 	.word	0x08006b5c
 8006150:	08006b7c 	.word	0x08006b7c
 8006154:	08006b3c 	.word	0x08006b3c

08006158 <abort>:
 8006158:	2006      	movs	r0, #6
 800615a:	b508      	push	{r3, lr}
 800615c:	f000 fa48 	bl	80065f0 <raise>
 8006160:	2001      	movs	r0, #1
 8006162:	f7fb fc12 	bl	800198a <_exit>
	...

08006168 <__sflush_r>:
 8006168:	898a      	ldrh	r2, [r1, #12]
 800616a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800616c:	4605      	mov	r5, r0
 800616e:	0710      	lsls	r0, r2, #28
 8006170:	460c      	mov	r4, r1
 8006172:	d457      	bmi.n	8006224 <__sflush_r+0xbc>
 8006174:	684b      	ldr	r3, [r1, #4]
 8006176:	2b00      	cmp	r3, #0
 8006178:	dc04      	bgt.n	8006184 <__sflush_r+0x1c>
 800617a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800617c:	2b00      	cmp	r3, #0
 800617e:	dc01      	bgt.n	8006184 <__sflush_r+0x1c>
 8006180:	2000      	movs	r0, #0
 8006182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006184:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006186:	2e00      	cmp	r6, #0
 8006188:	d0fa      	beq.n	8006180 <__sflush_r+0x18>
 800618a:	2300      	movs	r3, #0
 800618c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006190:	682f      	ldr	r7, [r5, #0]
 8006192:	602b      	str	r3, [r5, #0]
 8006194:	d032      	beq.n	80061fc <__sflush_r+0x94>
 8006196:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006198:	89a3      	ldrh	r3, [r4, #12]
 800619a:	075a      	lsls	r2, r3, #29
 800619c:	d505      	bpl.n	80061aa <__sflush_r+0x42>
 800619e:	6863      	ldr	r3, [r4, #4]
 80061a0:	1ac0      	subs	r0, r0, r3
 80061a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80061a4:	b10b      	cbz	r3, 80061aa <__sflush_r+0x42>
 80061a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80061a8:	1ac0      	subs	r0, r0, r3
 80061aa:	2300      	movs	r3, #0
 80061ac:	4602      	mov	r2, r0
 80061ae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80061b0:	4628      	mov	r0, r5
 80061b2:	6a21      	ldr	r1, [r4, #32]
 80061b4:	47b0      	blx	r6
 80061b6:	1c43      	adds	r3, r0, #1
 80061b8:	89a3      	ldrh	r3, [r4, #12]
 80061ba:	d106      	bne.n	80061ca <__sflush_r+0x62>
 80061bc:	6829      	ldr	r1, [r5, #0]
 80061be:	291d      	cmp	r1, #29
 80061c0:	d82c      	bhi.n	800621c <__sflush_r+0xb4>
 80061c2:	4a29      	ldr	r2, [pc, #164]	; (8006268 <__sflush_r+0x100>)
 80061c4:	40ca      	lsrs	r2, r1
 80061c6:	07d6      	lsls	r6, r2, #31
 80061c8:	d528      	bpl.n	800621c <__sflush_r+0xb4>
 80061ca:	2200      	movs	r2, #0
 80061cc:	6062      	str	r2, [r4, #4]
 80061ce:	6922      	ldr	r2, [r4, #16]
 80061d0:	04d9      	lsls	r1, r3, #19
 80061d2:	6022      	str	r2, [r4, #0]
 80061d4:	d504      	bpl.n	80061e0 <__sflush_r+0x78>
 80061d6:	1c42      	adds	r2, r0, #1
 80061d8:	d101      	bne.n	80061de <__sflush_r+0x76>
 80061da:	682b      	ldr	r3, [r5, #0]
 80061dc:	b903      	cbnz	r3, 80061e0 <__sflush_r+0x78>
 80061de:	6560      	str	r0, [r4, #84]	; 0x54
 80061e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80061e2:	602f      	str	r7, [r5, #0]
 80061e4:	2900      	cmp	r1, #0
 80061e6:	d0cb      	beq.n	8006180 <__sflush_r+0x18>
 80061e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80061ec:	4299      	cmp	r1, r3
 80061ee:	d002      	beq.n	80061f6 <__sflush_r+0x8e>
 80061f0:	4628      	mov	r0, r5
 80061f2:	f7ff fc51 	bl	8005a98 <_free_r>
 80061f6:	2000      	movs	r0, #0
 80061f8:	6360      	str	r0, [r4, #52]	; 0x34
 80061fa:	e7c2      	b.n	8006182 <__sflush_r+0x1a>
 80061fc:	6a21      	ldr	r1, [r4, #32]
 80061fe:	2301      	movs	r3, #1
 8006200:	4628      	mov	r0, r5
 8006202:	47b0      	blx	r6
 8006204:	1c41      	adds	r1, r0, #1
 8006206:	d1c7      	bne.n	8006198 <__sflush_r+0x30>
 8006208:	682b      	ldr	r3, [r5, #0]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d0c4      	beq.n	8006198 <__sflush_r+0x30>
 800620e:	2b1d      	cmp	r3, #29
 8006210:	d001      	beq.n	8006216 <__sflush_r+0xae>
 8006212:	2b16      	cmp	r3, #22
 8006214:	d101      	bne.n	800621a <__sflush_r+0xb2>
 8006216:	602f      	str	r7, [r5, #0]
 8006218:	e7b2      	b.n	8006180 <__sflush_r+0x18>
 800621a:	89a3      	ldrh	r3, [r4, #12]
 800621c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006220:	81a3      	strh	r3, [r4, #12]
 8006222:	e7ae      	b.n	8006182 <__sflush_r+0x1a>
 8006224:	690f      	ldr	r7, [r1, #16]
 8006226:	2f00      	cmp	r7, #0
 8006228:	d0aa      	beq.n	8006180 <__sflush_r+0x18>
 800622a:	0793      	lsls	r3, r2, #30
 800622c:	bf18      	it	ne
 800622e:	2300      	movne	r3, #0
 8006230:	680e      	ldr	r6, [r1, #0]
 8006232:	bf08      	it	eq
 8006234:	694b      	ldreq	r3, [r1, #20]
 8006236:	1bf6      	subs	r6, r6, r7
 8006238:	600f      	str	r7, [r1, #0]
 800623a:	608b      	str	r3, [r1, #8]
 800623c:	2e00      	cmp	r6, #0
 800623e:	dd9f      	ble.n	8006180 <__sflush_r+0x18>
 8006240:	4633      	mov	r3, r6
 8006242:	463a      	mov	r2, r7
 8006244:	4628      	mov	r0, r5
 8006246:	6a21      	ldr	r1, [r4, #32]
 8006248:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800624c:	47e0      	blx	ip
 800624e:	2800      	cmp	r0, #0
 8006250:	dc06      	bgt.n	8006260 <__sflush_r+0xf8>
 8006252:	89a3      	ldrh	r3, [r4, #12]
 8006254:	f04f 30ff 	mov.w	r0, #4294967295
 8006258:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800625c:	81a3      	strh	r3, [r4, #12]
 800625e:	e790      	b.n	8006182 <__sflush_r+0x1a>
 8006260:	4407      	add	r7, r0
 8006262:	1a36      	subs	r6, r6, r0
 8006264:	e7ea      	b.n	800623c <__sflush_r+0xd4>
 8006266:	bf00      	nop
 8006268:	20400001 	.word	0x20400001

0800626c <_fflush_r>:
 800626c:	b538      	push	{r3, r4, r5, lr}
 800626e:	690b      	ldr	r3, [r1, #16]
 8006270:	4605      	mov	r5, r0
 8006272:	460c      	mov	r4, r1
 8006274:	b913      	cbnz	r3, 800627c <_fflush_r+0x10>
 8006276:	2500      	movs	r5, #0
 8006278:	4628      	mov	r0, r5
 800627a:	bd38      	pop	{r3, r4, r5, pc}
 800627c:	b118      	cbz	r0, 8006286 <_fflush_r+0x1a>
 800627e:	6983      	ldr	r3, [r0, #24]
 8006280:	b90b      	cbnz	r3, 8006286 <_fflush_r+0x1a>
 8006282:	f000 f887 	bl	8006394 <__sinit>
 8006286:	4b14      	ldr	r3, [pc, #80]	; (80062d8 <_fflush_r+0x6c>)
 8006288:	429c      	cmp	r4, r3
 800628a:	d11b      	bne.n	80062c4 <_fflush_r+0x58>
 800628c:	686c      	ldr	r4, [r5, #4]
 800628e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d0ef      	beq.n	8006276 <_fflush_r+0xa>
 8006296:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006298:	07d0      	lsls	r0, r2, #31
 800629a:	d404      	bmi.n	80062a6 <_fflush_r+0x3a>
 800629c:	0599      	lsls	r1, r3, #22
 800629e:	d402      	bmi.n	80062a6 <_fflush_r+0x3a>
 80062a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80062a2:	f000 f915 	bl	80064d0 <__retarget_lock_acquire_recursive>
 80062a6:	4628      	mov	r0, r5
 80062a8:	4621      	mov	r1, r4
 80062aa:	f7ff ff5d 	bl	8006168 <__sflush_r>
 80062ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80062b0:	4605      	mov	r5, r0
 80062b2:	07da      	lsls	r2, r3, #31
 80062b4:	d4e0      	bmi.n	8006278 <_fflush_r+0xc>
 80062b6:	89a3      	ldrh	r3, [r4, #12]
 80062b8:	059b      	lsls	r3, r3, #22
 80062ba:	d4dd      	bmi.n	8006278 <_fflush_r+0xc>
 80062bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80062be:	f000 f908 	bl	80064d2 <__retarget_lock_release_recursive>
 80062c2:	e7d9      	b.n	8006278 <_fflush_r+0xc>
 80062c4:	4b05      	ldr	r3, [pc, #20]	; (80062dc <_fflush_r+0x70>)
 80062c6:	429c      	cmp	r4, r3
 80062c8:	d101      	bne.n	80062ce <_fflush_r+0x62>
 80062ca:	68ac      	ldr	r4, [r5, #8]
 80062cc:	e7df      	b.n	800628e <_fflush_r+0x22>
 80062ce:	4b04      	ldr	r3, [pc, #16]	; (80062e0 <_fflush_r+0x74>)
 80062d0:	429c      	cmp	r4, r3
 80062d2:	bf08      	it	eq
 80062d4:	68ec      	ldreq	r4, [r5, #12]
 80062d6:	e7da      	b.n	800628e <_fflush_r+0x22>
 80062d8:	08006b5c 	.word	0x08006b5c
 80062dc:	08006b7c 	.word	0x08006b7c
 80062e0:	08006b3c 	.word	0x08006b3c

080062e4 <std>:
 80062e4:	2300      	movs	r3, #0
 80062e6:	b510      	push	{r4, lr}
 80062e8:	4604      	mov	r4, r0
 80062ea:	e9c0 3300 	strd	r3, r3, [r0]
 80062ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80062f2:	6083      	str	r3, [r0, #8]
 80062f4:	8181      	strh	r1, [r0, #12]
 80062f6:	6643      	str	r3, [r0, #100]	; 0x64
 80062f8:	81c2      	strh	r2, [r0, #14]
 80062fa:	6183      	str	r3, [r0, #24]
 80062fc:	4619      	mov	r1, r3
 80062fe:	2208      	movs	r2, #8
 8006300:	305c      	adds	r0, #92	; 0x5c
 8006302:	f7fd fd29 	bl	8003d58 <memset>
 8006306:	4b05      	ldr	r3, [pc, #20]	; (800631c <std+0x38>)
 8006308:	6224      	str	r4, [r4, #32]
 800630a:	6263      	str	r3, [r4, #36]	; 0x24
 800630c:	4b04      	ldr	r3, [pc, #16]	; (8006320 <std+0x3c>)
 800630e:	62a3      	str	r3, [r4, #40]	; 0x28
 8006310:	4b04      	ldr	r3, [pc, #16]	; (8006324 <std+0x40>)
 8006312:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006314:	4b04      	ldr	r3, [pc, #16]	; (8006328 <std+0x44>)
 8006316:	6323      	str	r3, [r4, #48]	; 0x30
 8006318:	bd10      	pop	{r4, pc}
 800631a:	bf00      	nop
 800631c:	08006629 	.word	0x08006629
 8006320:	0800664b 	.word	0x0800664b
 8006324:	08006683 	.word	0x08006683
 8006328:	080066a7 	.word	0x080066a7

0800632c <_cleanup_r>:
 800632c:	4901      	ldr	r1, [pc, #4]	; (8006334 <_cleanup_r+0x8>)
 800632e:	f000 b8af 	b.w	8006490 <_fwalk_reent>
 8006332:	bf00      	nop
 8006334:	0800626d 	.word	0x0800626d

08006338 <__sfmoreglue>:
 8006338:	2268      	movs	r2, #104	; 0x68
 800633a:	b570      	push	{r4, r5, r6, lr}
 800633c:	1e4d      	subs	r5, r1, #1
 800633e:	4355      	muls	r5, r2
 8006340:	460e      	mov	r6, r1
 8006342:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006346:	f7ff fc0f 	bl	8005b68 <_malloc_r>
 800634a:	4604      	mov	r4, r0
 800634c:	b140      	cbz	r0, 8006360 <__sfmoreglue+0x28>
 800634e:	2100      	movs	r1, #0
 8006350:	e9c0 1600 	strd	r1, r6, [r0]
 8006354:	300c      	adds	r0, #12
 8006356:	60a0      	str	r0, [r4, #8]
 8006358:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800635c:	f7fd fcfc 	bl	8003d58 <memset>
 8006360:	4620      	mov	r0, r4
 8006362:	bd70      	pop	{r4, r5, r6, pc}

08006364 <__sfp_lock_acquire>:
 8006364:	4801      	ldr	r0, [pc, #4]	; (800636c <__sfp_lock_acquire+0x8>)
 8006366:	f000 b8b3 	b.w	80064d0 <__retarget_lock_acquire_recursive>
 800636a:	bf00      	nop
 800636c:	20000395 	.word	0x20000395

08006370 <__sfp_lock_release>:
 8006370:	4801      	ldr	r0, [pc, #4]	; (8006378 <__sfp_lock_release+0x8>)
 8006372:	f000 b8ae 	b.w	80064d2 <__retarget_lock_release_recursive>
 8006376:	bf00      	nop
 8006378:	20000395 	.word	0x20000395

0800637c <__sinit_lock_acquire>:
 800637c:	4801      	ldr	r0, [pc, #4]	; (8006384 <__sinit_lock_acquire+0x8>)
 800637e:	f000 b8a7 	b.w	80064d0 <__retarget_lock_acquire_recursive>
 8006382:	bf00      	nop
 8006384:	20000396 	.word	0x20000396

08006388 <__sinit_lock_release>:
 8006388:	4801      	ldr	r0, [pc, #4]	; (8006390 <__sinit_lock_release+0x8>)
 800638a:	f000 b8a2 	b.w	80064d2 <__retarget_lock_release_recursive>
 800638e:	bf00      	nop
 8006390:	20000396 	.word	0x20000396

08006394 <__sinit>:
 8006394:	b510      	push	{r4, lr}
 8006396:	4604      	mov	r4, r0
 8006398:	f7ff fff0 	bl	800637c <__sinit_lock_acquire>
 800639c:	69a3      	ldr	r3, [r4, #24]
 800639e:	b11b      	cbz	r3, 80063a8 <__sinit+0x14>
 80063a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063a4:	f7ff bff0 	b.w	8006388 <__sinit_lock_release>
 80063a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80063ac:	6523      	str	r3, [r4, #80]	; 0x50
 80063ae:	4b13      	ldr	r3, [pc, #76]	; (80063fc <__sinit+0x68>)
 80063b0:	4a13      	ldr	r2, [pc, #76]	; (8006400 <__sinit+0x6c>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	62a2      	str	r2, [r4, #40]	; 0x28
 80063b6:	42a3      	cmp	r3, r4
 80063b8:	bf08      	it	eq
 80063ba:	2301      	moveq	r3, #1
 80063bc:	4620      	mov	r0, r4
 80063be:	bf08      	it	eq
 80063c0:	61a3      	streq	r3, [r4, #24]
 80063c2:	f000 f81f 	bl	8006404 <__sfp>
 80063c6:	6060      	str	r0, [r4, #4]
 80063c8:	4620      	mov	r0, r4
 80063ca:	f000 f81b 	bl	8006404 <__sfp>
 80063ce:	60a0      	str	r0, [r4, #8]
 80063d0:	4620      	mov	r0, r4
 80063d2:	f000 f817 	bl	8006404 <__sfp>
 80063d6:	2200      	movs	r2, #0
 80063d8:	2104      	movs	r1, #4
 80063da:	60e0      	str	r0, [r4, #12]
 80063dc:	6860      	ldr	r0, [r4, #4]
 80063de:	f7ff ff81 	bl	80062e4 <std>
 80063e2:	2201      	movs	r2, #1
 80063e4:	2109      	movs	r1, #9
 80063e6:	68a0      	ldr	r0, [r4, #8]
 80063e8:	f7ff ff7c 	bl	80062e4 <std>
 80063ec:	2202      	movs	r2, #2
 80063ee:	2112      	movs	r1, #18
 80063f0:	68e0      	ldr	r0, [r4, #12]
 80063f2:	f7ff ff77 	bl	80062e4 <std>
 80063f6:	2301      	movs	r3, #1
 80063f8:	61a3      	str	r3, [r4, #24]
 80063fa:	e7d1      	b.n	80063a0 <__sinit+0xc>
 80063fc:	080067c0 	.word	0x080067c0
 8006400:	0800632d 	.word	0x0800632d

08006404 <__sfp>:
 8006404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006406:	4607      	mov	r7, r0
 8006408:	f7ff ffac 	bl	8006364 <__sfp_lock_acquire>
 800640c:	4b1e      	ldr	r3, [pc, #120]	; (8006488 <__sfp+0x84>)
 800640e:	681e      	ldr	r6, [r3, #0]
 8006410:	69b3      	ldr	r3, [r6, #24]
 8006412:	b913      	cbnz	r3, 800641a <__sfp+0x16>
 8006414:	4630      	mov	r0, r6
 8006416:	f7ff ffbd 	bl	8006394 <__sinit>
 800641a:	3648      	adds	r6, #72	; 0x48
 800641c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006420:	3b01      	subs	r3, #1
 8006422:	d503      	bpl.n	800642c <__sfp+0x28>
 8006424:	6833      	ldr	r3, [r6, #0]
 8006426:	b30b      	cbz	r3, 800646c <__sfp+0x68>
 8006428:	6836      	ldr	r6, [r6, #0]
 800642a:	e7f7      	b.n	800641c <__sfp+0x18>
 800642c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006430:	b9d5      	cbnz	r5, 8006468 <__sfp+0x64>
 8006432:	4b16      	ldr	r3, [pc, #88]	; (800648c <__sfp+0x88>)
 8006434:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006438:	60e3      	str	r3, [r4, #12]
 800643a:	6665      	str	r5, [r4, #100]	; 0x64
 800643c:	f000 f847 	bl	80064ce <__retarget_lock_init_recursive>
 8006440:	f7ff ff96 	bl	8006370 <__sfp_lock_release>
 8006444:	2208      	movs	r2, #8
 8006446:	4629      	mov	r1, r5
 8006448:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800644c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006450:	6025      	str	r5, [r4, #0]
 8006452:	61a5      	str	r5, [r4, #24]
 8006454:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006458:	f7fd fc7e 	bl	8003d58 <memset>
 800645c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006460:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006464:	4620      	mov	r0, r4
 8006466:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006468:	3468      	adds	r4, #104	; 0x68
 800646a:	e7d9      	b.n	8006420 <__sfp+0x1c>
 800646c:	2104      	movs	r1, #4
 800646e:	4638      	mov	r0, r7
 8006470:	f7ff ff62 	bl	8006338 <__sfmoreglue>
 8006474:	4604      	mov	r4, r0
 8006476:	6030      	str	r0, [r6, #0]
 8006478:	2800      	cmp	r0, #0
 800647a:	d1d5      	bne.n	8006428 <__sfp+0x24>
 800647c:	f7ff ff78 	bl	8006370 <__sfp_lock_release>
 8006480:	230c      	movs	r3, #12
 8006482:	603b      	str	r3, [r7, #0]
 8006484:	e7ee      	b.n	8006464 <__sfp+0x60>
 8006486:	bf00      	nop
 8006488:	080067c0 	.word	0x080067c0
 800648c:	ffff0001 	.word	0xffff0001

08006490 <_fwalk_reent>:
 8006490:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006494:	4606      	mov	r6, r0
 8006496:	4688      	mov	r8, r1
 8006498:	2700      	movs	r7, #0
 800649a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800649e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80064a2:	f1b9 0901 	subs.w	r9, r9, #1
 80064a6:	d505      	bpl.n	80064b4 <_fwalk_reent+0x24>
 80064a8:	6824      	ldr	r4, [r4, #0]
 80064aa:	2c00      	cmp	r4, #0
 80064ac:	d1f7      	bne.n	800649e <_fwalk_reent+0xe>
 80064ae:	4638      	mov	r0, r7
 80064b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064b4:	89ab      	ldrh	r3, [r5, #12]
 80064b6:	2b01      	cmp	r3, #1
 80064b8:	d907      	bls.n	80064ca <_fwalk_reent+0x3a>
 80064ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80064be:	3301      	adds	r3, #1
 80064c0:	d003      	beq.n	80064ca <_fwalk_reent+0x3a>
 80064c2:	4629      	mov	r1, r5
 80064c4:	4630      	mov	r0, r6
 80064c6:	47c0      	blx	r8
 80064c8:	4307      	orrs	r7, r0
 80064ca:	3568      	adds	r5, #104	; 0x68
 80064cc:	e7e9      	b.n	80064a2 <_fwalk_reent+0x12>

080064ce <__retarget_lock_init_recursive>:
 80064ce:	4770      	bx	lr

080064d0 <__retarget_lock_acquire_recursive>:
 80064d0:	4770      	bx	lr

080064d2 <__retarget_lock_release_recursive>:
 80064d2:	4770      	bx	lr

080064d4 <__swhatbuf_r>:
 80064d4:	b570      	push	{r4, r5, r6, lr}
 80064d6:	460e      	mov	r6, r1
 80064d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064dc:	4614      	mov	r4, r2
 80064de:	2900      	cmp	r1, #0
 80064e0:	461d      	mov	r5, r3
 80064e2:	b096      	sub	sp, #88	; 0x58
 80064e4:	da08      	bge.n	80064f8 <__swhatbuf_r+0x24>
 80064e6:	2200      	movs	r2, #0
 80064e8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80064ec:	602a      	str	r2, [r5, #0]
 80064ee:	061a      	lsls	r2, r3, #24
 80064f0:	d410      	bmi.n	8006514 <__swhatbuf_r+0x40>
 80064f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80064f6:	e00e      	b.n	8006516 <__swhatbuf_r+0x42>
 80064f8:	466a      	mov	r2, sp
 80064fa:	f000 f8fb 	bl	80066f4 <_fstat_r>
 80064fe:	2800      	cmp	r0, #0
 8006500:	dbf1      	blt.n	80064e6 <__swhatbuf_r+0x12>
 8006502:	9a01      	ldr	r2, [sp, #4]
 8006504:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006508:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800650c:	425a      	negs	r2, r3
 800650e:	415a      	adcs	r2, r3
 8006510:	602a      	str	r2, [r5, #0]
 8006512:	e7ee      	b.n	80064f2 <__swhatbuf_r+0x1e>
 8006514:	2340      	movs	r3, #64	; 0x40
 8006516:	2000      	movs	r0, #0
 8006518:	6023      	str	r3, [r4, #0]
 800651a:	b016      	add	sp, #88	; 0x58
 800651c:	bd70      	pop	{r4, r5, r6, pc}
	...

08006520 <__smakebuf_r>:
 8006520:	898b      	ldrh	r3, [r1, #12]
 8006522:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006524:	079d      	lsls	r5, r3, #30
 8006526:	4606      	mov	r6, r0
 8006528:	460c      	mov	r4, r1
 800652a:	d507      	bpl.n	800653c <__smakebuf_r+0x1c>
 800652c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006530:	6023      	str	r3, [r4, #0]
 8006532:	6123      	str	r3, [r4, #16]
 8006534:	2301      	movs	r3, #1
 8006536:	6163      	str	r3, [r4, #20]
 8006538:	b002      	add	sp, #8
 800653a:	bd70      	pop	{r4, r5, r6, pc}
 800653c:	466a      	mov	r2, sp
 800653e:	ab01      	add	r3, sp, #4
 8006540:	f7ff ffc8 	bl	80064d4 <__swhatbuf_r>
 8006544:	9900      	ldr	r1, [sp, #0]
 8006546:	4605      	mov	r5, r0
 8006548:	4630      	mov	r0, r6
 800654a:	f7ff fb0d 	bl	8005b68 <_malloc_r>
 800654e:	b948      	cbnz	r0, 8006564 <__smakebuf_r+0x44>
 8006550:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006554:	059a      	lsls	r2, r3, #22
 8006556:	d4ef      	bmi.n	8006538 <__smakebuf_r+0x18>
 8006558:	f023 0303 	bic.w	r3, r3, #3
 800655c:	f043 0302 	orr.w	r3, r3, #2
 8006560:	81a3      	strh	r3, [r4, #12]
 8006562:	e7e3      	b.n	800652c <__smakebuf_r+0xc>
 8006564:	4b0d      	ldr	r3, [pc, #52]	; (800659c <__smakebuf_r+0x7c>)
 8006566:	62b3      	str	r3, [r6, #40]	; 0x28
 8006568:	89a3      	ldrh	r3, [r4, #12]
 800656a:	6020      	str	r0, [r4, #0]
 800656c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006570:	81a3      	strh	r3, [r4, #12]
 8006572:	9b00      	ldr	r3, [sp, #0]
 8006574:	6120      	str	r0, [r4, #16]
 8006576:	6163      	str	r3, [r4, #20]
 8006578:	9b01      	ldr	r3, [sp, #4]
 800657a:	b15b      	cbz	r3, 8006594 <__smakebuf_r+0x74>
 800657c:	4630      	mov	r0, r6
 800657e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006582:	f000 f8c9 	bl	8006718 <_isatty_r>
 8006586:	b128      	cbz	r0, 8006594 <__smakebuf_r+0x74>
 8006588:	89a3      	ldrh	r3, [r4, #12]
 800658a:	f023 0303 	bic.w	r3, r3, #3
 800658e:	f043 0301 	orr.w	r3, r3, #1
 8006592:	81a3      	strh	r3, [r4, #12]
 8006594:	89a0      	ldrh	r0, [r4, #12]
 8006596:	4305      	orrs	r5, r0
 8006598:	81a5      	strh	r5, [r4, #12]
 800659a:	e7cd      	b.n	8006538 <__smakebuf_r+0x18>
 800659c:	0800632d 	.word	0x0800632d

080065a0 <_raise_r>:
 80065a0:	291f      	cmp	r1, #31
 80065a2:	b538      	push	{r3, r4, r5, lr}
 80065a4:	4604      	mov	r4, r0
 80065a6:	460d      	mov	r5, r1
 80065a8:	d904      	bls.n	80065b4 <_raise_r+0x14>
 80065aa:	2316      	movs	r3, #22
 80065ac:	6003      	str	r3, [r0, #0]
 80065ae:	f04f 30ff 	mov.w	r0, #4294967295
 80065b2:	bd38      	pop	{r3, r4, r5, pc}
 80065b4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80065b6:	b112      	cbz	r2, 80065be <_raise_r+0x1e>
 80065b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80065bc:	b94b      	cbnz	r3, 80065d2 <_raise_r+0x32>
 80065be:	4620      	mov	r0, r4
 80065c0:	f000 f830 	bl	8006624 <_getpid_r>
 80065c4:	462a      	mov	r2, r5
 80065c6:	4601      	mov	r1, r0
 80065c8:	4620      	mov	r0, r4
 80065ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80065ce:	f000 b817 	b.w	8006600 <_kill_r>
 80065d2:	2b01      	cmp	r3, #1
 80065d4:	d00a      	beq.n	80065ec <_raise_r+0x4c>
 80065d6:	1c59      	adds	r1, r3, #1
 80065d8:	d103      	bne.n	80065e2 <_raise_r+0x42>
 80065da:	2316      	movs	r3, #22
 80065dc:	6003      	str	r3, [r0, #0]
 80065de:	2001      	movs	r0, #1
 80065e0:	e7e7      	b.n	80065b2 <_raise_r+0x12>
 80065e2:	2400      	movs	r4, #0
 80065e4:	4628      	mov	r0, r5
 80065e6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80065ea:	4798      	blx	r3
 80065ec:	2000      	movs	r0, #0
 80065ee:	e7e0      	b.n	80065b2 <_raise_r+0x12>

080065f0 <raise>:
 80065f0:	4b02      	ldr	r3, [pc, #8]	; (80065fc <raise+0xc>)
 80065f2:	4601      	mov	r1, r0
 80065f4:	6818      	ldr	r0, [r3, #0]
 80065f6:	f7ff bfd3 	b.w	80065a0 <_raise_r>
 80065fa:	bf00      	nop
 80065fc:	20000020 	.word	0x20000020

08006600 <_kill_r>:
 8006600:	b538      	push	{r3, r4, r5, lr}
 8006602:	2300      	movs	r3, #0
 8006604:	4d06      	ldr	r5, [pc, #24]	; (8006620 <_kill_r+0x20>)
 8006606:	4604      	mov	r4, r0
 8006608:	4608      	mov	r0, r1
 800660a:	4611      	mov	r1, r2
 800660c:	602b      	str	r3, [r5, #0]
 800660e:	f7fb f9ac 	bl	800196a <_kill>
 8006612:	1c43      	adds	r3, r0, #1
 8006614:	d102      	bne.n	800661c <_kill_r+0x1c>
 8006616:	682b      	ldr	r3, [r5, #0]
 8006618:	b103      	cbz	r3, 800661c <_kill_r+0x1c>
 800661a:	6023      	str	r3, [r4, #0]
 800661c:	bd38      	pop	{r3, r4, r5, pc}
 800661e:	bf00      	nop
 8006620:	20000390 	.word	0x20000390

08006624 <_getpid_r>:
 8006624:	f7fb b99a 	b.w	800195c <_getpid>

08006628 <__sread>:
 8006628:	b510      	push	{r4, lr}
 800662a:	460c      	mov	r4, r1
 800662c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006630:	f000 f894 	bl	800675c <_read_r>
 8006634:	2800      	cmp	r0, #0
 8006636:	bfab      	itete	ge
 8006638:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800663a:	89a3      	ldrhlt	r3, [r4, #12]
 800663c:	181b      	addge	r3, r3, r0
 800663e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006642:	bfac      	ite	ge
 8006644:	6563      	strge	r3, [r4, #84]	; 0x54
 8006646:	81a3      	strhlt	r3, [r4, #12]
 8006648:	bd10      	pop	{r4, pc}

0800664a <__swrite>:
 800664a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800664e:	461f      	mov	r7, r3
 8006650:	898b      	ldrh	r3, [r1, #12]
 8006652:	4605      	mov	r5, r0
 8006654:	05db      	lsls	r3, r3, #23
 8006656:	460c      	mov	r4, r1
 8006658:	4616      	mov	r6, r2
 800665a:	d505      	bpl.n	8006668 <__swrite+0x1e>
 800665c:	2302      	movs	r3, #2
 800665e:	2200      	movs	r2, #0
 8006660:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006664:	f000 f868 	bl	8006738 <_lseek_r>
 8006668:	89a3      	ldrh	r3, [r4, #12]
 800666a:	4632      	mov	r2, r6
 800666c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006670:	81a3      	strh	r3, [r4, #12]
 8006672:	4628      	mov	r0, r5
 8006674:	463b      	mov	r3, r7
 8006676:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800667a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800667e:	f000 b817 	b.w	80066b0 <_write_r>

08006682 <__sseek>:
 8006682:	b510      	push	{r4, lr}
 8006684:	460c      	mov	r4, r1
 8006686:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800668a:	f000 f855 	bl	8006738 <_lseek_r>
 800668e:	1c43      	adds	r3, r0, #1
 8006690:	89a3      	ldrh	r3, [r4, #12]
 8006692:	bf15      	itete	ne
 8006694:	6560      	strne	r0, [r4, #84]	; 0x54
 8006696:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800669a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800669e:	81a3      	strheq	r3, [r4, #12]
 80066a0:	bf18      	it	ne
 80066a2:	81a3      	strhne	r3, [r4, #12]
 80066a4:	bd10      	pop	{r4, pc}

080066a6 <__sclose>:
 80066a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066aa:	f000 b813 	b.w	80066d4 <_close_r>
	...

080066b0 <_write_r>:
 80066b0:	b538      	push	{r3, r4, r5, lr}
 80066b2:	4604      	mov	r4, r0
 80066b4:	4608      	mov	r0, r1
 80066b6:	4611      	mov	r1, r2
 80066b8:	2200      	movs	r2, #0
 80066ba:	4d05      	ldr	r5, [pc, #20]	; (80066d0 <_write_r+0x20>)
 80066bc:	602a      	str	r2, [r5, #0]
 80066be:	461a      	mov	r2, r3
 80066c0:	f7fb f98a 	bl	80019d8 <_write>
 80066c4:	1c43      	adds	r3, r0, #1
 80066c6:	d102      	bne.n	80066ce <_write_r+0x1e>
 80066c8:	682b      	ldr	r3, [r5, #0]
 80066ca:	b103      	cbz	r3, 80066ce <_write_r+0x1e>
 80066cc:	6023      	str	r3, [r4, #0]
 80066ce:	bd38      	pop	{r3, r4, r5, pc}
 80066d0:	20000390 	.word	0x20000390

080066d4 <_close_r>:
 80066d4:	b538      	push	{r3, r4, r5, lr}
 80066d6:	2300      	movs	r3, #0
 80066d8:	4d05      	ldr	r5, [pc, #20]	; (80066f0 <_close_r+0x1c>)
 80066da:	4604      	mov	r4, r0
 80066dc:	4608      	mov	r0, r1
 80066de:	602b      	str	r3, [r5, #0]
 80066e0:	f7fb f996 	bl	8001a10 <_close>
 80066e4:	1c43      	adds	r3, r0, #1
 80066e6:	d102      	bne.n	80066ee <_close_r+0x1a>
 80066e8:	682b      	ldr	r3, [r5, #0]
 80066ea:	b103      	cbz	r3, 80066ee <_close_r+0x1a>
 80066ec:	6023      	str	r3, [r4, #0]
 80066ee:	bd38      	pop	{r3, r4, r5, pc}
 80066f0:	20000390 	.word	0x20000390

080066f4 <_fstat_r>:
 80066f4:	b538      	push	{r3, r4, r5, lr}
 80066f6:	2300      	movs	r3, #0
 80066f8:	4d06      	ldr	r5, [pc, #24]	; (8006714 <_fstat_r+0x20>)
 80066fa:	4604      	mov	r4, r0
 80066fc:	4608      	mov	r0, r1
 80066fe:	4611      	mov	r1, r2
 8006700:	602b      	str	r3, [r5, #0]
 8006702:	f7fb f990 	bl	8001a26 <_fstat>
 8006706:	1c43      	adds	r3, r0, #1
 8006708:	d102      	bne.n	8006710 <_fstat_r+0x1c>
 800670a:	682b      	ldr	r3, [r5, #0]
 800670c:	b103      	cbz	r3, 8006710 <_fstat_r+0x1c>
 800670e:	6023      	str	r3, [r4, #0]
 8006710:	bd38      	pop	{r3, r4, r5, pc}
 8006712:	bf00      	nop
 8006714:	20000390 	.word	0x20000390

08006718 <_isatty_r>:
 8006718:	b538      	push	{r3, r4, r5, lr}
 800671a:	2300      	movs	r3, #0
 800671c:	4d05      	ldr	r5, [pc, #20]	; (8006734 <_isatty_r+0x1c>)
 800671e:	4604      	mov	r4, r0
 8006720:	4608      	mov	r0, r1
 8006722:	602b      	str	r3, [r5, #0]
 8006724:	f7fb f98e 	bl	8001a44 <_isatty>
 8006728:	1c43      	adds	r3, r0, #1
 800672a:	d102      	bne.n	8006732 <_isatty_r+0x1a>
 800672c:	682b      	ldr	r3, [r5, #0]
 800672e:	b103      	cbz	r3, 8006732 <_isatty_r+0x1a>
 8006730:	6023      	str	r3, [r4, #0]
 8006732:	bd38      	pop	{r3, r4, r5, pc}
 8006734:	20000390 	.word	0x20000390

08006738 <_lseek_r>:
 8006738:	b538      	push	{r3, r4, r5, lr}
 800673a:	4604      	mov	r4, r0
 800673c:	4608      	mov	r0, r1
 800673e:	4611      	mov	r1, r2
 8006740:	2200      	movs	r2, #0
 8006742:	4d05      	ldr	r5, [pc, #20]	; (8006758 <_lseek_r+0x20>)
 8006744:	602a      	str	r2, [r5, #0]
 8006746:	461a      	mov	r2, r3
 8006748:	f7fb f986 	bl	8001a58 <_lseek>
 800674c:	1c43      	adds	r3, r0, #1
 800674e:	d102      	bne.n	8006756 <_lseek_r+0x1e>
 8006750:	682b      	ldr	r3, [r5, #0]
 8006752:	b103      	cbz	r3, 8006756 <_lseek_r+0x1e>
 8006754:	6023      	str	r3, [r4, #0]
 8006756:	bd38      	pop	{r3, r4, r5, pc}
 8006758:	20000390 	.word	0x20000390

0800675c <_read_r>:
 800675c:	b538      	push	{r3, r4, r5, lr}
 800675e:	4604      	mov	r4, r0
 8006760:	4608      	mov	r0, r1
 8006762:	4611      	mov	r1, r2
 8006764:	2200      	movs	r2, #0
 8006766:	4d05      	ldr	r5, [pc, #20]	; (800677c <_read_r+0x20>)
 8006768:	602a      	str	r2, [r5, #0]
 800676a:	461a      	mov	r2, r3
 800676c:	f7fb f917 	bl	800199e <_read>
 8006770:	1c43      	adds	r3, r0, #1
 8006772:	d102      	bne.n	800677a <_read_r+0x1e>
 8006774:	682b      	ldr	r3, [r5, #0]
 8006776:	b103      	cbz	r3, 800677a <_read_r+0x1e>
 8006778:	6023      	str	r3, [r4, #0]
 800677a:	bd38      	pop	{r3, r4, r5, pc}
 800677c:	20000390 	.word	0x20000390

08006780 <_init>:
 8006780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006782:	bf00      	nop
 8006784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006786:	bc08      	pop	{r3}
 8006788:	469e      	mov	lr, r3
 800678a:	4770      	bx	lr

0800678c <_fini>:
 800678c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800678e:	bf00      	nop
 8006790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006792:	bc08      	pop	{r3}
 8006794:	469e      	mov	lr, r3
 8006796:	4770      	bx	lr
